[0210/201011.514:INFO:cefpython_app.cpp(196)] [Browser process] OnBeforeChildProcessLaunch() command line: "C:\Python36\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support /prefetch:2

[0210/201011.515:INFO:cefpython_app.cpp(196)] [Browser process] OnBeforeChildProcessLaunch() command line: "C:\Python36\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support --supports-dual-gpus=false --gpu-driver-bug-workarounds=7,10,19,23,41,61,74 --disable-gl-extensions="GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent" --gpu-vendor-id=0x8086 --gpu-device-id=0x0d26 --gpu-driver-vendor="Intel Corporation" --gpu-driver-version=20.19.15.4835 --gpu-driver-date=10-16-2017 --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support /prefetch:2

[0210/201011.550:INFO:cef_log.cpp(8)] [Browser process] CreateBrowserSync() called

[0210/201011.586:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[0210/201011.613:INFO:cef_log.cpp(8)] [Browser process] navigateUrl: data:text/html;base64,<html>

<head>
    <meta charset="utf-8">
    <script>
        /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = "data:application/vnd.ms-fontobject;base64,eEoBALhJAQABAAIAAAAAAAIABQMAAAAAAAABAJABAAAAAExQAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAkA29QgAAAAAAAAAAAAAAAAAAAAAAABwAdABvAG8AbABrAGkAdAAtAGUAbgB0AHkAcABvAAAADgBSAGUAZwB1AGwAYQByAAAAFgBWAGUAcgBzAGkAbwBuACAAMQAuADAAAAAcAHQAbwBvAGwAawBpAHQALQBlAG4AdAB5AHAAbwAAAAAAAAEAAAALAIAAAwAwR1NVQiCLJXoAAAE4AAAAVE9TLzI9Z0quAAABjAAAAFZjbWFwlVCk8AAACFgAABf4Z2x5ZnZHu6UAACOMAAEOkGhlYWQOAObyAAAA4AAAADZoaGVhBi8EsAAAALwAAAAkaG10ePoH/8wAAAHkAAAGdGxvY2FIIox4AAAgUAAAAzxtYXhwArUA4QAAARgAAAAgbmFtZf3QUMwAATIcAAACXnBvc3TNVwlHAAE0fAAAFTkAAQAAAxgAAAAAAxj/9//6Ax4AAQAAAAAAAAAAAAAAAAAAAZ0AAQAAAAEAAEK9DZBfDzz1AAsDGAAAAADV5lHiAAAAANXmUeL/9//6Ax4DHwAAAAgAAgAAAAAAAAABAAABnQDVAA4AAAAAAAIAAAAKAAoAAAD/AAAAAAAAAAEAAAAKADAAPgACREZMVAAObGF0bgAaAAQAAAAAAAAAAQAAAAQAAAAAAAAAAQAAAAFsaWdhAAgAAAABAAAAAQAEAAQAAAABAAgAAQAGAAAAAQAAAAEDFgGQAAUAAAGEAioAAABuAYQCKgAAAXwAJgDMAAACAAUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBmRWQAQOoB650DGAAAAEcDHwAGAAAAAQAAAAAAAAAAAAADGAAAAxgAAAMY//8DGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP/+AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//8DGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//QMYAAADGAAAAxgAAAMYAAADGAAAAxj//QMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//8DGAAAAxgAAAMYAAADGP//Axj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//wMY//8DGP//Axj//wMYAAADGAAAAxgAAAMY//0DGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP//AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP/9AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP//AxgAAAMYAAADGP//AxgAAAMYAAADGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP/9AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//8DGAAAAxgAAAMYAAADGAAAAxgAAAJkAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//cDGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAA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AAABNAAA6zUAAOs1AAABNQAA6zYAAOs2AAABNgAA6zcAAOs3AAABNwAA6zgAAOs4AAABOAAA6zkAAOs5AAABOQAA6zoAAOs6AAABOgAA6zsAAOs7AAABOwAA6zwAAOs8AAABPAAA6z0AAOs9AAABPQAA6z4AAOs+AAABPgAA6z8AAOs/AAABPwAA60AAAOtAAAABPwAA60EAAOtBAAABQAAA60IAAOtCAAABQQAA60MAAOtDAAABQgAA60QAAOtEAAABQwAA60UAAOtFAAABRAAA60YAAOtGAAABRQAA60cAAOtHAAABRgAA60gAAOtIAAABRwAA60kAAOtJAAABSAAA60oAAOtKAAABSQAA60sAAOtLAAABSgAA60wAAOtMAAABSwAA600AAOtNAAABTAAA604AAOtOAAABTQAA608AAOtPAAABTgAA61AAAOtQAAABTwAA61EAAOtRAAABUAAA61IAAOtSAAABUQAA61MAAOtTAAABUgAA61QAAOtUAAABUwAA61UAAOtVAAABVAAA61YAAOtWAAABVQAA61cAAOtXAAABVgAA61gAAOtYAAABVwAA61kAAOtZAAABWAAA61oAAOtaAAABWQAA61sAAOtbAAABWgAA61wAAOtcAAABWwAA610AAOtdAAABXAAA614AAOteAAABXQAA618AAOtfAAABXgAA62AAAOtgAAABXwAA62EAAOthAAABYAAA62IAAOtiAAABYQAA62MAAOtjAAABYgAA62QAAOtkAAABYwAA62UAAOtlAAABZAAA62YAAOtmAAABZQAA62cAAOtnAAABZgAA62gAAOtoAAABZwAA62kAAOtpAAABaAAA62oAAOtqAAABaQAA62sAAOtrAAABagAA62wAAOtsAAABawAA620AAOttAAABbAAA624AAOtuAAABbQAA628AAOtvAAABbgAA63AAAOtwAAABbwAA63EAAOtxAAABcAAA63IAAOtyAAABcQAA63MAAOtzAAABcgAA63QAAOt0AAABcwAA63UAAOt1AAABdAAA63YAAOt2AAABdQAA63cAAOt3AAABdgAA63gAAOt4AAABdwAA63kAAOt5AAABeAAA63oAAOt6AAABeQAA63sAAOt7AAABegAA63wAAOt8AAABewAA630AAOt9AAABfAAA634AAOt+AAABfQAA638AAOt/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AQMBBAEFAQYBBwEIAQkBCgELAQwBDQEOAQ8BEAERARIBEwEUARUBFgEXARgBGQEaARsBHAEdAR4BHwEgASEBIgEjASQBJQEmAScBKAEpASoBKwEsAS0BLgEvATABMQEyATMBNAE1ATYBNwE4ATkBOgE7ATwBPQE+AT8BQAFBAUIBQwFEAUUBRgFHAUgBSQFKAUsBTAFNAU4BTwFQAVEBUgFTAVQBVQFWAVcBWAFZAVoBWwFcAV0BXgFfAWABYQFiAWMBZAFlAWYBZwFoAWkBagFrAWwBbQFuAW8BcAFxAXIBcwF0AXUBdgF3AXgBeQF6AXsBfAF9AX4BfwGAAYEBggGDAYQBhQGGAYcBiAGJAYoBiwGMAY0BjgGPAZABkQGSAZMBlAGVAZYBlwGYAZkBmgGbAZwBnQGeAZ8BoAGhAaIBowGkAaUBpgGnAagBqQGqAasBrAGtAa4BrwGwAbEBsgGzAbQBtQG2AbcBuAG5AboBuwG8Ab0BvgG/AcABwQHCAcMBxAHFAcYBxwHIAckBygHLAcwBzQHOAc8B0AHRAdIB0wHUAdUB1gHXAdgB2QHaAdsB3AHdAd4B3wHgAeEB4gHjAeQB5QHmAecB6AHpAeoB6wHsAe0B7gHvAfAB8QHyAfMB9AH1AfYB9wH4AfkB+gH7AfwB/QH+Af8CAAIBAgICAwIEAgUCBgIHAggCCQIKAgsCDAINAg4CDwIQAhECEgITAhQCFQIWAhcCGAIZAhoCGwIcAh0CHgIfAiACIQIiAiMCJAIlAiYCJwIoAikCKgIrAiwCLQIuAi8CMAIxAjICMwI0AjUCNgI3AjgCOQI6AjsCPAI9Aj4CPwJAAkECQgJDAkQCRQJGAkcCSAJJAkoCSwJMAk0CTgJPAlACUQJSAlMCVAJVAlYCVwJYAlkCWgJbAlwCXQJeAl8CYAJhAmICYwJkAmUCZgJnAmgCaQJqAmsCbAJtAm4CbwJwAnECcgJzAnQCdQJ2AncCeAJ5AnoCewJ8An0CfgJ/AoACgQKCAoMChAKFAoYChwKIAokCigKLAowCjQKOAo8CkAKRApICkwKUApUClgKXApgCmQKaApsCnAKdAp4AETUwMHB4LXdpdGgtY2lyY2xlBTUwMHB4C2FkZC10by1saXN0CGFkZC11c2VyB2FkZHJlc3MGYWRqdXN0A2FpchBhaXJjcmFmdC1sYW5kaW5nEWFpcmNyYWZ0LXRha2Utb2ZmCGFpcmNyYWZ0DGFsaWduLWJvdHRvbRdhbGlnbi1ob3Jpem9udGFsLW1pZGRsZQphbGlnbi1sZWZ0C2FsaWduLXJpZ2h0CWFsaWduLXRvcBVhbGlnbi12ZXJ0aWNhbC1taWRkbGUJYXBwLXN0b3JlB2FyY2hpdmUKYXJlYS1ncmFwaA9hcnJvdy1ib2xkLWRvd24PYXJyb3ctYm9sZC1sZWZ0EGFycm93LWJvbGQtcmlnaHQNYXJyb3ctYm9sZC11cAphcnJvdy1kb3duCmFycm93LWxlZnQPYXJyb3ctbG9uZy1kb3duD2Fycm93LWxvbmctbGVmdBBhcnJvdy1sb25nLXJpZ2h0DWFycm93LWxvbmctdXALYXJyb3ctcmlnaHQIYXJyb3ctdXAWYXJyb3ctd2l0aC1jaXJjbGUtZG93bhZhcnJvdy13aXRoLWNpcmNsZS1sZWZ0F2Fycm93LXdpdGgtY2lyY2xlLXJpZ2h0FGFycm93LXdpdGgtY2lyY2xlLXVwCmF0dGFjaG1lbnQQYXdhcmVuZXNzLXJpYmJvbgxiYWNrLWluLXRpbWUEYmFjawViYWlkdQliYXItZ3JhcGgIYmFzZWNhbXAHYmF0dGVyeQtiZWFtZWQtbm90ZQdiZWhhbmNlBGJlbGwKYmxhY2tib2FyZAVibG9jawRib29rCGJvb2ttYXJrCWJvb2ttYXJrcwRib3dsA2JveAlicmllZmNhc2UHYnJvd3NlcgVicnVzaAZidWNrZXQDYnVnBGNha2UKY2FsY3VsYXRvcghjYWxlbmRhcgZjYW1lcmEDY2N3BGNoYXQFY2hlY2sMY2hldnJvbi1kb3duDGNoZXZyb24tbGVmdA1jaGV2cm9uLXJpZ2h0EmNoZXZyb24tc21hbGwtZG93bhJjaGV2cm9uLXNtYWxsLWxlZnQTY2hldnJvbi1zbWFsbC1yaWdodBBjaGV2cm9uLXNtYWxsLXVwEWNoZXZyb24tdGhpbi1kb3duEWNoZXZyb24tdGhpbi1sZWZ0EmNoZXZyb24tdGhpbi1yaWdodA9jaGV2cm9uLXRoaW4tdXAKY2hldnJvbi11cBhjaGV2cm9uLXdpdGgtY2lyY2xlLWRvd24YY2hldnJvbi13aXRoLWNpcmNsZS1sZWZ0GWNoZXZyb24td2l0aC1jaXJjbGUtcmlnaHQWY2hldnJvbi13aXRoLWNpcmNsZS11cBFjaXJjbGUtd2l0aC1jcm9zcxFjaXJjbGUtd2l0aC1taW51cxBjaXJjbGUtd2l0aC1wbHVzBmNpcmNsZQ5jaXJjdWxhci1ncmFwaAxjbGFwcGVyYm9hcmQQY2xhc3NpYy1jb21wdXRlcgljbGlwYm9hcmQFY2xvY2sFY2xvdWQEY29kZQNjb2cHY29sb3Vycwdjb21wYXNzGGNvbnRyb2xsZXItZmFzdC1iYWNrd2FyZBdjb250cm9sbGVyLWZhc3QtZm9yd2FyZBhjb250cm9sbGVyLWp1bXAtdG8tc3RhcnQPY29udHJvbGxlci1uZXh0D2NvbnRyb2xsZXItcGF1cw9jb250cm9sbGVyLXBsYXkRY29udHJvbGxlci1yZWNvcmQPY29udHJvbGxlci1zdG9wEWNvbnRyb2xsZXItdm9sdW1lBGNvcHkOY3JlYXRpdmUtY2xvdWQcY3JlYXRpdmUtY29tbW9ucy1hdHRyaWJ1dGlvbhljcmVhdGl2ZS1jb21tb25zLW5vZGVyaXZzIWNyZWF0aXZlLWNvbW1vbnMtbm9uY29tbWVyY2lhbC1ldSFjcmVhdGl2ZS1jb21tb25zLW5vbmNvbW1lcmNpYWwtdXMeY3JlYXRpdmUtY29tbW9ucy1wdWJsaWMtZG9tYWluFmNyZWF0aXZlLWNvbW1vbnMtcmVtaXgWY3JlYXRpdmUtY29tbW9ucy1zaGFyZRtjcmVhdGl2ZS1jb21tb25zLXNoYXJlYWxpa2UQY3JlYXRpdmUtY29tbW9ucwtjcmVkaXQtY2FyZAZjcmVkaXQEY3JvcAVjcm9zcwNjdXACY3cFY3ljbGUIZGF0YWJhc2UIZGlhbC1wYWQJZGlyZWN0aW9uEmRvY3VtZW50LWxhbmRzY2FwZQhkb2N1bWVudAlkb2N1bWVudHMKZG90LXNpbmdsZRVkb3RzLXRocmVlLWhvcml6b250YWwTZG90cy10aHJlZS12ZXJ0aWNhbBNkb3RzLXR3by1ob3Jpem9udGFsEWRvdHMtdHdvLXZlcnRpY2FsCGRvd25sb2FkFGRyaWJiYmxlLXdpdGgtY2lyY2xlCGRyaWJiYmxlBWRyaW5rBWRyaXZlBGRyb3AHZHJvcGJveARlZGl0BWVtYWlsC2Vtb2ppLWZsaXJ0C2Vtb2ppLWhhcHB5DWVtb2ppLW5ldXRyYWwJZW1vamktc2FkBWVyYXNlBmVyYXNlcghldmVybm90ZQZleHBvcnQNZXllLXdpdGgtbGluZQNleWUUZmFjZWJvb2std2l0aC1jaXJjbGUIZmFjZWJvb2sHZmVhdGhlcgtmaW5nZXJwcmludARmbGFnBWZsYXNoCmZsYXNobGlnaHQKZmxhdC1icnVzaAZmbGF0dHISZmxpY2tyLXdpdGgtY2lyY2xlBmZsaWNrcgtmbG93LWJyYW5jaAxmbG93LWNhc2NhZGUJZmxvdy1saW5lDWZsb3ctcGFyYWxsZWwJZmxvdy10cmVlBmZsb3dlcg1mb2xkZXItaW1hZ2VzDGZvbGRlci1tdXNpYwxmb2xkZXItdmlkZW8GZm9sZGVyB2ZvcndhcmQKZm91cnNxdWFyZQZmdW5uZWwPZ2FtZS1jb250cm9sbGVyBWdhdWdlEmdpdGh1Yi13aXRoLWNpcmNsZQZnaXRodWIFZ2xvYmUXZ29vZ2xlLXBsdXMtd2l0aC1jaXJjbGULZ29vZ2xlLXBsdXMMZ29vZ2xlLWRyaXZlD2dvb2dsZS1oYW5nb3V0cwtnb29nbGUtcGxheQ5ncmFkdWF0aW9uLWNhcARncmlkC2dyb292ZXNoYXJrCmhhaXItY3Jvc3MEaGFuZA5oZWFydC1vdXRsaW5lZAVoZWFydBBoZWxwLXdpdGgtY2lyY2xlBGhlbHAEaG9tZQpob3VyLWdsYXNzBWhvdXp6BmljbG91ZA5pbWFnZS1pbnZlcnRlZAVpbWFnZQZpbWFnZXMFaW5ib3gIaW5maW5pdHkQaW5mby13aXRoLWNpcmNsZQRpbmZvFWluc3RhZ3JhbS13aXRoLWNpcmNsZQlpbnN0YWdyYW0HaW5zdGFsbANrZXkIa2V5Ym9hcmQJbGFiLWZsYXNrCGxhbmRsaW5lCGxhbmd1YWdlBmxhcHRvcBJsYXN0Zm0td2l0aC1jaXJjbGUGbGFzdGZtBmxheWVycwRsZWFmCmxldmVsLWRvd24IbGV2ZWwtdXAIbGlmZWJ1b3kKbGlnaHQtYnVsYgpsaWdodC1kb3duCGxpZ2h0LXVwCmxpbmUtZ3JhcGgEbGluaxRsaW5rZWRpbi13aXRoLWNpcmNsZQhsaW5rZWRpbgRsaXN0DGxvY2F0aW9uLXBpbghsb2NhdGlvbglsb2NrLW9wZW4EbG9jawdsb2ctb3V0BWxvZ2luBGxvb3AGbWFnbmV0EG1hZ25pZnlpbmctZ2xhc3MQbWFpbC13aXRoLWNpcmNsZQRtYWlsA21hbgNtYXAEbWFzawVtZWRhbBJtZWRpdW0td2l0aC1jaXJjbGUGbWVkaXVtCW1lZ2FwaG9uZQptZW51LXdoaXRlBG1lbnUFbWVyZ2UHbWVzc2FnZQNtaWMFbWludXMEbWl4aQZtb2JpbGUKbW9kZXJuLW1pYwRtb29uDW1vdXNlLXBvaW50ZXIFbW91c2UFbXVzaWMHbmV0d29yawtuZXctbWVzc2FnZQNuZXcEbmV3cwpuZXdzbGV0dGVyBG5vdGUMbm90aWZpY2F0aW9uEW5vdGlmaWNhdGlvbnMtb2ZmCm9sZC1tb2JpbGUJb2xkLXBob25lCG9uZWRyaXZlCW9wZW4tYm9vawdwYWxldHRlC3BhcGVyLXBsYW5lBnBheXBhbAZwZW5jaWwFcGhvbmUGcGljYXNhCXBpZS1jaGFydANwaW4VcGludGVyZXN0LXdpdGgtY2lyY2xlCXBpbnRlcmVzdARwbHVzBXBvcHVwCnBvd2VyLXBsdWcMcHJpY2UtcmliYm9uCXByaWNlLXRhZwVwcmludA5wcm9ncmVzcy1lbXB0eQ1wcm9ncmVzcy1mdWxsDHByb2dyZXNzLW9uZQxwcm9ncmVzcy10d28HcHVibGlzaA5xcS13aXRoLWNpcmNsZQJxcQVxdW90ZQVyYWRpbxByYWZ0LXdpdGgtY2lyY2xlBHJhZnQHcmFpbmJvdxByZGlvLXdpdGgtY2lyY2xlBHJkaW8LcmVtb3ZlLXVzZXIGcmVucmVuCXJlcGx5LWFsbAVyZXBseQpyZXNpemUtMTAwEnJlc2l6ZS1mdWxsLXNjcmVlbgdyZXR3ZWV0BnJvY2tldAtyb3VuZC1icnVzaANyc3MFcnVsZXIEc2F2ZQhzY2lzc29ycwZzY3JpYmQNc2VsZWN0LWFycm93cxFzaGFyZS1hbHRlcm5hdGl2ZQVzaGFyZQlzaGFyZWFibGUGc2hpZWxkBHNob3AMc2hvcHBpbmctYmFnD3Nob3BwaW5nLWJhc2tldA1zaG9wcGluZy1jYXJ0B3NodWZmbGUGc2lnbmFsCnNpbmEtd2VpYm8Rc2t5cGUtd2l0aC1jaXJjbGUFc2t5cGUKc2xpZGVzaGFyZQhzbWFzaGluZwlzb3VuZC1taXgKc291bmQtbXV0ZQVzb3VuZApzb3VuZGNsb3VkC3Nwb3J0cy1jbHViE3Nwb3RpZnktd2l0aC1jaXJjbGUHc3BvdGlmeQtzcHJlYWRzaGVldA1zcXVhcmVkLWNyb3NzDXNxdWFyZWQtbWludXMMc3F1YXJlZC1wbHVzDXN0YXItb3V0bGluZWQEc3RhcglzdG9wd2F0Y2gXc3R1bWJsZXVwb24td2l0aC1jaXJjbGULc3R1bWJsZXVwb24Ic3VpdGNhc2UEc3dhcAVzd2FybQZzd2VkZW4Gc3dpdGNoE3RhYmxldC1tb2JpbGUtY29tYm8GdGFibGV0A3RhZxZ0ZXh0LWRvY3VtZW50LWludmVydGVkDXRleHQtZG9jdW1lbnQEdGV4dAt0aGVybW9tZXRlcgt0aHVtYnMtZG93bgl0aHVtYnMtdXANdGh1bmRlci1jbG91ZAZ0aWNrZXQJdGltZS1zbG90BXRvb2xzDHRyYWZmaWMtY29uZQV0cmFzaAR0cmVlDXRyaWFuZ2xlLWRvd24NdHJpYW5nbGUtbGVmdA50cmlhbmdsZS1yaWdodAt0cmlhbmdsZS11cAt0cmlwYWR2aXNvcgZ0cm9waHkSdHVtYmxyLXdpdGgtY2lyY2xlBnR1bWJscgJ0dhN0d2l0dGVyLXdpdGgtY2lyY2xlB3R3aXR0ZXIGdHlwaW5nCXVuaW5zdGFsbAZ1bnJlYWQFdW50YWcPdXBsb2FkLXRvLWNsb3VkBnVwbG9hZAR1c2VyBXVzZXJzBnYtY2FyZAx2aWRlby1jYW1lcmEFdmlkZW8RdmltZW8td2l0aC1jaXJjbGUFdmltZW8QdmluZS13aXRoLWNpcmNsZQR2aW5lBXZpbnlsDnZrLWFsdGVybml0aXZlDnZrLXdpdGgtY2lyY2xlAnZrCXZvaWNlbWFpbAZ3YWxsZXQHd2FybmluZwV3YXRlcg13aW5kb3dzLXN0b3JlEHhpbmctd2l0aC1jaXJjbGUEeGluZwR5ZWxwEXlvdWtvLXdpdGgtY2lyY2xlBXlvdWtvE3lvdXR1YmUtd2l0aC1jaXJjbGUHeW91dHViZQAAAAAA"

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = "data:font/ttf;base64,AAEAAAALAIAAAwAwR1NVQiCLJXoAAAE4AAAAVE9TLzI9Z0quAAABjAAAAFZjbWFwlVCk8AAACFgAABf4Z2x5ZnZHu6UAACOMAAEOkGhlYWQOAObyAAAA4AAAADZoaGVhBi8EsAAAALwAAAAkaG10ePoH/8wAAAHkAAAGdGxvY2FIIox4AAAgUAAAAzxtYXhwArUA4QAAARgAAAAgbmFtZf3QUMwAATIcAAACXnBvc3TNVwlHAAE0fAAAFTkAAQAAAxgAAAAAAxj/9//6Ax4AAQAAAAAAAAAAAAAAAAAAAZ0AAQAAAAEAAEK9DZBfDzz1AAsDGAAAAADV5lHiAAAAANXmUeL/9//6Ax4DHwAAAAgAAgAAAAAAAAABAAABnQDVAA4AAAAAAAIAAAAKAAoAAAD/AAAAAAAAAAEAAAAKADAAPgACREZMVAAObGF0bgAaAAQAAAAAAAAAAQAAAAQAAAAAAAAAAQAAAAFsaWdhAAgAAAABAAAAAQAEAAQAAAABAAgAAQAGAAAAAQAAAAEDFgGQAAUAAAGEAioAAABuAYQCKgAAAXwAJgDMAAACAAUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBmRWQAQOoB650DGAAAAEcDHwAGAAAAAQAAAAAAAAAAAAADGAAAAxgAAAMY//8DGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP/+AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//8DGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//QMYAAADGAAAAxgAAAMYAAADGAAAAxj//QMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//8DGAAAAxgAAAMYAAADGP//Axj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//wMY//8DGP//Axj//wMYAAADGAAAAxgAAAMY//0DGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP//AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP/9AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP//AxgAAAMYAAADGP//AxgAAAMYAAADGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGP/9AxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//8DGAAAAxgAAAMYAAADGAAAAxgAAAJkAAADGAAAAxgAAAMYAAADGAAAAxgAAAMY//cDGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxj//wMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAA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AAABQwAA60UAAOtFAAABRAAA60YAAOtGAAABRQAA60cAAOtHAAABRgAA60gAAOtIAAABRwAA60kAAOtJAAABSAAA60oAAOtKAAABSQAA60sAAOtLAAABSgAA60wAAOtMAAABSwAA600AAOtNAAABTAAA604AAOtOAAABTQAA608AAOtPAAABTgAA61AAAOtQAAABTwAA61EAAOtRAAABUAAA61IAAOtSAAABUQAA61MAAOtTAAABUgAA61QAAOtUAAABUwAA61UAAOtVAAABVAAA61YAAOtWAAABVQAA61cAAOtXAAABVgAA61gAAOtYAAABVwAA61kAAOtZAAABWAAA61oAAOtaAAABWQAA61sAAOtbAAABWgAA61wAAOtcAAABWwAA610AAOtdAAABXAAA614AAOteAAABXQAA618AAOtfAAABXgAA62AAAOtgAAABXwAA62EAAOthAAABYAAA62IAAOtiAAABYQAA62MAAOtjAAABYgAA62QAAOtkAAABYwAA62UAAOtlAAABZAAA62YAAOtmAAABZQAA62cAAOtnAAABZgAA62gAAOtoAAABZwAA62kAAOtpAAABaAAA62oAAOtqAAABaQAA62sAAOtrAAABagAA62wAAOtsAAABawAA620AAOttAAABbAAA624AAOtuAAABbQAA628AAOtvAAABbgAA63AAAOtwAAABbwAA63EAAOtxAAABcAAA63IAAOtyAAABcQAA63MAAOtzAAABcgAA63QAAOt0AAABcwAA63UAAOt1AAABdAAA63YAAOt2AAABdQAA63cAAOt3AAABdgAA63gAAOt4AAABdwAA63kAAOt5AAABeAAA63oAAOt6AAABeQAA63sAAOt7AAABegAA63wAAOt8AAABewAA630AAOt9AAABfAAA634AAOt+AAABfQAA638AAOt/AAABfgAA64AAAOuAAAABfwAA64EAAOuBAAABgAAA64IAAOuCAAABgQAA64MAAOuDAAABggAA64QAAOuEAAABgwAA64UAAOuFAAABhAAA64YAAOuGAAABhQAA64cAAOuHAAABhgAA64gAAOuIAAABhwAA64kAAOuJAAABiAAA64oAAOuKAAABiQAA64sAAOuLAAABigAA64wAAOuMAAABiwAA640AAOuNAAABjAAA644AAOuOAAABjQAA648AAOuP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AWMBZAFlAWYBZwFoAWkBagFrAWwBbQFuAW8BcAFxAXIBcwF0AXUBdgF3AXgBeQF6AXsBfAF9AX4BfwGAAYEBggGDAYQBhQGGAYcBiAGJAYoBiwGMAY0BjgGPAZABkQGSAZMBlAGVAZYBlwGYAZkBmgGbAZwBnQGeAZ8BoAGhAaIBowGkAaUBpgGnAagBqQGqAasBrAGtAa4BrwGwAbEBsgGzAbQBtQG2AbcBuAG5AboBuwG8Ab0BvgG/AcABwQHCAcMBxAHFAcYBxwHIAckBygHLAcwBzQHOAc8B0AHRAdIB0wHUAdUB1gHXAdgB2QHaAdsB3AHdAd4B3wHgAeEB4gHjAeQB5QHmAecB6AHpAeoB6wHsAe0B7gHvAfAB8QHyAfMB9AH1AfYB9wH4AfkB+gH7AfwB/QH+Af8CAAIBAgICAwIEAgUCBgIHAggCCQIKAgsCDAINAg4CDwIQAhECEgITAhQCFQIWAhcCGAIZAhoCGwIcAh0CHgIfAiACIQIiAiMCJAIlAiYCJwIoAikCKgIrAiwCLQIuAi8CMAIxAjICMwI0AjUCNgI3AjgCOQI6AjsCPAI9Aj4CPwJAAkECQgJDAkQCRQJGAkcCSAJJAkoCSwJMAk0CTgJPAlACUQJSAlMCVAJVAlYCVwJYAlkCWgJbAlwCXQJeAl8CYAJhAmICYwJkAmUCZgJnAmgCaQJqAmsCbAJtAm4CbwJwAnECcgJzAnQCdQJ2AncCeAJ5AnoCewJ8An0CfgJ/AoACgQKCAoMChAKFAoYChwKIAokCigKLAowCjQKOAo8CkAKRApICkwKUApUClgKXApgCmQKaApsCnAKdAp4AETUwMHB4LXdpdGgtY2lyY2xlBTUwMHB4C2FkZC10by1saXN0CGFkZC11c2VyB2FkZHJlc3MGYWRqdXN0A2FpchBhaXJjcmFmdC1sYW5kaW5nEWFpcmNyYWZ0LXRha2Utb2ZmCGFpcmNyYWZ0DGFsaWduLWJvdHRvbRdhbGlnbi1ob3Jpem9udGFsLW1pZGRsZQphbGlnbi1sZWZ0C2FsaWduLXJpZ2h0CWFsaWduLXRvcBVhbGlnbi12ZXJ0aWNhbC1taWRkbGUJYXBwLXN0b3JlB2FyY2hpdmUKYXJlYS1ncmFwaA9hcnJvdy1ib2xkLWRvd24PYXJyb3ctYm9sZC1sZWZ0EGFycm93LWJvbGQtcmlnaHQNYXJyb3ctYm9sZC11cAphcnJvdy1kb3duCmFycm93LWxlZnQPYXJyb3ctbG9uZy1kb3duD2Fycm93LWxvbmctbGVmdBBhcnJvdy1sb25nLXJpZ2h0DWFycm93LWxvbmctdXALYXJyb3ctcmlnaHQIYXJyb3ctdXAWYXJyb3ctd2l0aC1jaXJjbGUtZG93bhZhcnJvdy13aXRoLWNpcmNsZS1sZWZ0F2Fycm93LXdpdGgtY2lyY2xlLXJpZ2h0FGFycm93LXdpdGgtY2lyY2xlLXVwCmF0dGFjaG1lbnQQYXdhcmVuZXNzLXJpYmJvbgxiYWNrLWluLXRpbWUEYmFjawViYWlkdQliYXItZ3JhcGgIYmFzZWNhbXAHYmF0dGVyeQtiZWFtZWQtbm90ZQdiZWhhbmNlBGJlbGwKYmxhY2tib2FyZAVibG9jawRib29rCGJvb2ttYXJrCWJvb2ttYXJrcwRib3dsA2JveAlicmllZmNhc2UHYnJvd3NlcgVicnVzaAZidWNrZXQDYnVnBGNha2UKY2FsY3VsYXRvcghjYWxlbmRhcgZjYW1lcmEDY2N3BGNoYXQFY2hlY2sMY2hldnJvbi1kb3duDGNoZXZyb24tbGVmdA1jaGV2cm9uLXJpZ2h0EmNoZXZyb24tc21hbGwtZG93bhJjaGV2cm9uLXNtYWxsLWxlZnQTY2hldnJvbi1zbWFsbC1yaWdodBBjaGV2cm9uLXNtYWxsLXVwEWNoZXZyb24tdGhpbi1kb3duEWNoZXZyb24tdGhpbi1sZWZ0EmNoZXZyb24tdGhpbi1yaWdodA9jaGV2cm9uLXRoaW4tdXAKY2hldnJvbi11cBhjaGV2cm9uLXdpdGgtY2lyY2xlLWRvd24YY2hldnJvbi13aXRoLWNpcmNsZS1sZWZ0GWNoZXZyb24td2l0aC1jaXJjbGUtcmlnaHQWY2hldnJvbi13aXRoLWNpcmNsZS11cBFjaXJjbGUtd2l0aC1jcm9zcxFjaXJjbGUtd2l0aC1taW51cxBjaXJjbGUtd2l0aC1wbHVzBmNpcmNsZQ5jaXJjdWxhci1ncmFwaAxjbGFwcGVyYm9hcmQQY2xhc3NpYy1jb21wdXRlcgljbGlwYm9hcmQFY2xvY2sFY2xvdWQEY29kZQNjb2cHY29sb3Vycwdjb21wYXNzGGNvbnRyb2xsZXItZmFzdC1iYWNrd2FyZBdjb250cm9sbGVyLWZhc3QtZm9yd2FyZBhjb250cm9sbGVyLWp1bXAtdG8tc3RhcnQPY29udHJvbGxlci1uZXh0D2NvbnRyb2xsZXItcGF1cw9jb250cm9sbGVyLXBsYXkRY29udHJvbGxlci1yZWNvcmQPY29udHJvbGxlci1zdG9wEWNvbnRyb2xsZXItdm9sdW1lBGNvcHkOY3JlYXRpdmUtY2xvdWQcY3JlYXRpdmUtY29tbW9ucy1hdHRyaWJ1dGlvbhljcmVhdGl2ZS1jb21tb25zLW5vZGVyaXZzIWNyZWF0aXZlLWNvbW1vbnMtbm9uY29tbWVyY2lhbC1ldSFjcmVhdGl2ZS1jb21tb25zLW5vbmNvbW1lcmNpYWwtdXMeY3JlYXRpdmUtY29tbW9ucy1wdWJsaWMtZG9tYWluFmNyZWF0aXZlLWNvbW1vbnMtcmVtaXgWY3JlYXRpdmUtY29tbW9ucy1zaGFyZRtjcmVhdGl2ZS1jb21tb25zLXNoYXJlYWxpa2UQY3JlYXRpdmUtY29tbW9ucwtjcmVkaXQtY2FyZAZjcmVkaXQEY3JvcAVjcm9zcwNjdXACY3cFY3ljbGUIZGF0YWJhc2UIZGlhbC1wYWQJZGlyZWN0aW9uEmRvY3VtZW50LWxhbmRzY2FwZQhkb2N1bWVudAlkb2N1bWVudHMKZG90LXNpbmdsZRVkb3RzLXRocmVlLWhvcml6b250YWwTZG90cy10aHJlZS12ZXJ0aWNhbBNkb3RzLXR3by1ob3Jpem9udGFsEWRvdHMtdHdvLXZlcnRpY2FsCGRvd25sb2FkFGRyaWJiYmxlLXdpdGgtY2lyY2xlCGRyaWJiYmxlBWRyaW5rBWRyaXZlBGRyb3AHZHJvcGJveARlZGl0BWVtYWlsC2Vtb2ppLWZsaXJ0C2Vtb2ppLWhhcHB5DWVtb2ppLW5ldXRyYWwJZW1vamktc2FkBWVyYXNlBmVyYXNlcghldmVybm90ZQZleHBvcnQNZXllLXdpdGgtbGluZQNleWUUZmFjZWJvb2std2l0aC1jaXJjbGUIZmFjZWJvb2sHZmVhdGhlcgtmaW5nZXJwcmludARmbGFnBWZsYXNoCmZsYXNobGlnaHQKZmxhdC1icnVzaAZmbGF0dHISZmxpY2tyLXdpdGgtY2lyY2xlBmZsaWNrcgtmbG93LWJyYW5jaAxmbG93LWNhc2NhZGUJZmxvdy1saW5lDWZsb3ctcGFyYWxsZWwJZmxvdy10cmVlBmZsb3dlcg1mb2xkZXItaW1hZ2VzDGZvbGRlci1tdXNpYwxmb2xkZXItdmlkZW8GZm9sZGVyB2ZvcndhcmQKZm91cnNxdWFyZQZmdW5uZWwPZ2FtZS1jb250cm9sbGVyBWdhdWdlEmdpdGh1Yi13aXRoLWNpcmNsZQZnaXRodWIFZ2xvYmUXZ29vZ2xlLXBsdXMtd2l0aC1jaXJjbGULZ29vZ2xlLXBsdXMMZ29vZ2xlLWRyaXZlD2dvb2dsZS1oYW5nb3V0cwtnb29nbGUtcGxheQ5ncmFkdWF0aW9uLWNhcARncmlkC2dyb292ZXNoYXJrCmhhaXItY3Jvc3MEaGFuZA5oZWFydC1vdXRsaW5lZAVoZWFydBBoZWxwLXdpdGgtY2lyY2xlBGhlbHAEaG9tZQpob3VyLWdsYXNzBWhvdXp6BmljbG91ZA5pbWFnZS1pbnZlcnRlZAVpbWFnZQZpbWFnZXMFaW5ib3gIaW5maW5pdHkQaW5mby13aXRoLWNpcmNsZQRpbmZvFWluc3RhZ3JhbS13aXRoLWNpcmNsZQlpbnN0YWdyYW0HaW5zdGFsbANrZXkIa2V5Ym9hcmQJbGFiLWZsYXNrCGxhbmRsaW5lCGxhbmd1YWdlBmxhcHRvcBJsYXN0Zm0td2l0aC1jaXJjbGUGbGFzdGZtBmxheWVycwRsZWFmCmxldmVsLWRvd24IbGV2ZWwtdXAIbGlmZWJ1b3kKbGlnaHQtYnVsYgpsaWdodC1kb3duCGxpZ2h0LXVwCmxpbmUtZ3JhcGgEbGluaxRsaW5rZWRpbi13aXRoLWNpcmNsZQhsaW5rZWRpbgRsaXN0DGxvY2F0aW9uLXBpbghsb2NhdGlvbglsb2NrLW9wZW4EbG9jawdsb2ctb3V0BWxvZ2luBGxvb3AGbWFnbmV0EG1hZ25pZnlpbmctZ2xhc3MQbWFpbC13aXRoLWNpcmNsZQRtYWlsA21hbgNtYXAEbWFzawVtZWRhbBJtZWRpdW0td2l0aC1jaXJjbGUGbWVkaXVtCW1lZ2FwaG9uZQptZW51LXdoaXRlBG1lbnUFbWVyZ2UHbWVzc2FnZQNtaWMFbWludXMEbWl4aQZtb2JpbGUKbW9kZXJuLW1pYwRtb29uDW1vdXNlLXBvaW50ZXIFbW91c2UFbXVzaWMHbmV0d29yawtuZXctbWVzc2FnZQNuZXcEbmV3cwpuZXdzbGV0dGVyBG5vdGUMbm90aWZpY2F0aW9uEW5vdGlmaWNhdGlvbnMtb2ZmCm9sZC1tb2JpbGUJb2xkLXBob25lCG9uZWRyaXZlCW9wZW4tYm9vawdwYWxldHRlC3BhcGVyLXBsYW5lBnBheXBhbAZwZW5jaWwFcGhvbmUGcGljYXNhCXBpZS1jaGFydANwaW4VcGludGVyZXN0LXdpdGgtY2lyY2xlCXBpbnRlcmVzdARwbHVzBXBvcHVwCnBvd2VyLXBsdWcMcHJpY2UtcmliYm9uCXByaWNlLXRhZwVwcmludA5wcm9ncmVzcy1lbXB0eQ1wcm9ncmVzcy1mdWxsDHByb2dyZXNzLW9uZQxwcm9ncmVzcy10d28HcHVibGlzaA5xcS13aXRoLWNpcmNsZQJxcQVxdW90ZQVyYWRpbxByYWZ0LXdpdGgtY2lyY2xlBHJhZnQHcmFpbmJvdxByZGlvLXdpdGgtY2lyY2xlBHJkaW8LcmVtb3ZlLXVzZXIGcmVucmVuCXJlcGx5LWFsbAVyZXBseQpyZXNpemUtMTAwEnJlc2l6ZS1mdWxsLXNjcmVlbgdyZXR3ZWV0BnJvY2tldAtyb3VuZC1icnVzaANyc3MFcnVsZXIEc2F2ZQhzY2lzc29ycwZzY3JpYmQNc2VsZWN0LWFycm93cxFzaGFyZS1hbHRlcm5hdGl2ZQVzaGFyZQlzaGFyZWFibGUGc2hpZWxkBHNob3AMc2hvcHBpbmctYmFnD3Nob3BwaW5nLWJhc2tldA1zaG9wcGluZy1jYXJ0B3NodWZmbGUGc2lnbmFsCnNpbmEtd2VpYm8Rc2t5cGUtd2l0aC1jaXJjbGUFc2t5cGUKc2xpZGVzaGFyZQhzbWFzaGluZwlzb3VuZC1taXgKc291bmQtbXV0ZQVzb3VuZApzb3VuZGNsb3VkC3Nwb3J0cy1jbHViE3Nwb3RpZnktd2l0aC1jaXJjbGUHc3BvdGlmeQtzcHJlYWRzaGVldA1zcXVhcmVkLWNyb3NzDXNxdWFyZWQtbWludXMMc3F1YXJlZC1wbHVzDXN0YXItb3V0bGluZWQEc3RhcglzdG9wd2F0Y2gXc3R1bWJsZXVwb24td2l0aC1jaXJjbGULc3R1bWJsZXVwb24Ic3VpdGNhc2UEc3dhcAVzd2FybQZzd2VkZW4Gc3dpdGNoE3RhYmxldC1tb2JpbGUtY29tYm8GdGFibGV0A3RhZxZ0ZXh0LWRvY3VtZW50LWludmVydGVkDXRleHQtZG9jdW1lbnQEdGV4dAt0aGVybW9tZXRlcgt0aHVtYnMtZG93bgl0aHVtYnMtdXANdGh1bmRlci1jbG91ZAZ0aWNrZXQJdGltZS1zbG90BXRvb2xzDHRyYWZmaWMtY29uZQV0cmFzaAR0cmVlDXRyaWFuZ2xlLWRvd24NdHJpYW5nbGUtbGVmdA50cmlhbmdsZS1yaWdodAt0cmlhbmdsZS11cAt0cmlwYWR2aXNvcgZ0cm9waHkSdHVtYmxyLXdpdGgtY2lyY2xlBnR1bWJscgJ0dhN0d2l0dGVyLXdpdGgtY2lyY2xlB3R3aXR0ZXIGdHlwaW5nCXVuaW5zdGFsbAZ1bnJlYWQFdW50YWcPdXBsb2FkLXRvLWNsb3VkBnVwbG9hZAR1c2VyBXVzZXJzBnYtY2FyZAx2aWRlby1jYW1lcmEFdmlkZW8RdmltZW8td2l0aC1jaXJjbGUFdmltZW8QdmluZS13aXRoLWNpcmNsZQR2aW5lBXZpbnlsDnZrLWFsdGVybml0aXZlDnZrLXdpdGgtY2lyY2xlAnZrCXZvaWNlbWFpbAZ3YWxsZXQHd2FybmluZwV3YXRlcg13aW5kb3dzLXN0b3JlEHhpbmctd2l0aC1jaXJjbGUEeGluZwR5ZWxwEXlvdWtvLXdpdGgtY2lyY2xlBXlvdWtvE3lvdXR1YmUtd2l0aC1jaXJjbGUHeW91dHViZQAAAAAA"

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = "data:font/woff;base64,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"

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = "data:font/woff2;base64,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"

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

// fonts loading
__webpack_require__(0)
__webpack_require__(1)
__webpack_require__(2)
__webpack_require__(3)
// css loading
__webpack_require__(5)

// jquery
jquery = __webpack_require__(11)
window.$ = jquery
window.jQuery = jquery

// bootstrap - dashboard -theme
var popper = __webpack_require__(13)
window.Popper = popper
__webpack_require__(15)

// // vue
// var vue = require('../public/javascripts/lib/vue.js')
// window.Vue = vue

// three.js
var three = __webpack_require__(16)
window.THREE = three

// // threeapp.js
// var threeapp = require('../public/javascripts/app/threeapp.js')
// window.THREEAPP = threeapp


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(6);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(9)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../../node_modules/css-loader/index.js!./toolkit-light.min.css", function() {
		var newContent = require("!!../../node_modules/css-loader/index.js!./toolkit-light.min.css");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(7);
exports = module.exports = __webpack_require__(8)(false);
// imports


// module
exports.push([module.i, "@charset \"UTF-8\";@media print{*,::after,::before{text-shadow:none!important;-webkit-box-shadow:none!important;box-shadow:none!important}a,a:visited{text-decoration:underline}abbr[title]::after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}html{-webkit-box-sizing:border-box;box-sizing:border-box;font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:transparent}*,::after,::before{-webkit-box-sizing:inherit;box-sizing:inherit}@-ms-viewport{width:device-width}article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:Roboto,\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:.9rem;font-weight:300;line-height:1.5;color:#000;background-color:#fff}[tabindex=\"-1\"]:focus{outline:0!important}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0}address{margin-bottom:1rem;font-style:normal;line-height:inherit}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#1997c6;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#106382;text-decoration:underline}a:not([href]):not([tabindex]){color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg:not(:root){overflow:hidden}[role=button],a,area,button,input,label,select,summary,textarea{-ms-touch-action:manipulation;touch-action:manipulation}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#999;text-align:left;caption-side:bottom}th{text-align:left}label{display:inline-block;margin-bottom:.5rem}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;font-family:inherit;font-weight:300;line-height:1.1;color:inherit}.h1,h1{font-size:2.5rem}.h2,h2{font-size:2rem}.h3,h3{font-size:1.75rem}.h4,h4{font-size:1.5rem}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}.lead{font-size:1.035rem;font-weight:inherit}.display-1{font-size:6rem;font-weight:300;line-height:1.1}.display-2{font-size:5.5rem;font-weight:300;line-height:1.1}.display-3{font-size:4.5rem;font-weight:300;line-height:1.1}.display-4{font-size:3.5rem;font-weight:300;line-height:1.1}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:5px}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:20px;font-size:1.25rem}.blockquote-footer{display:block;font-size:80%;color:#868e96}.blockquote-footer::before{content:\"\\2014   \\A0\"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#fff;border:1px solid #ddd;border-radius:.25rem;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:10px;line-height:1}.figure-caption{font-size:90%;color:#868e96}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace}code{padding:.2rem .4rem;font-size:90%;color:#bd4147;background-color:#f8f9fa;border-radius:.25rem}a>code{padding:0;color:inherit;background-color:inherit}kbd{padding:.2rem .4rem;font-size:90%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;margin-top:0;margin-bottom:1rem;font-size:90%;color:#212529}pre code{padding:0;font-size:inherit;color:inherit;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{margin-right:auto;margin-left:auto;padding-right:10px;padding-left:10px;width:100%}@media (min-width:768px){.container{max-width:880px}}@media (min-width:992px){.container{max-width:950px}}@media (min-width:1200px){.container{max-width:1100px}}.container-fluid{width:100%;margin-right:auto;margin-left:auto;padding-right:10px;padding-left:10px;width:100%}.row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-10px;margin-left:-10px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-10,.col-11,.col-12,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-auto,.col-lg,.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-auto,.col-md,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-auto,.col-sm,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-auto{position:relative;width:100%;min-height:1px;padding-right:10px;padding-left:10px}.col{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-1{-webkit-box-flex:0;-ms-flex:0 0 8.33333%;flex:0 0 8.33333%;max-width:8.33333%}.col-2{-webkit-box-flex:0;-ms-flex:0 0 16.66667%;flex:0 0 16.66667%;max-width:16.66667%}.col-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-webkit-box-flex:0;-ms-flex:0 0 33.33333%;flex:0 0 33.33333%;max-width:33.33333%}.col-5{-webkit-box-flex:0;-ms-flex:0 0 41.66667%;flex:0 0 41.66667%;max-width:41.66667%}.col-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-webkit-box-flex:0;-ms-flex:0 0 58.33333%;flex:0 0 58.33333%;max-width:58.33333%}.col-8{-webkit-box-flex:0;-ms-flex:0 0 66.66667%;flex:0 0 66.66667%;max-width:66.66667%}.col-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-webkit-box-flex:0;-ms-flex:0 0 83.33333%;flex:0 0 83.33333%;max-width:83.33333%}.col-11{-webkit-box-flex:0;-ms-flex:0 0 91.66667%;flex:0 0 91.66667%;max-width:91.66667%}.col-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}@media (min-width:576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-sm-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-sm-1{-webkit-box-flex:0;-ms-flex:0 0 8.33333%;flex:0 0 8.33333%;max-width:8.33333%}.col-sm-2{-webkit-box-flex:0;-ms-flex:0 0 16.66667%;flex:0 0 16.66667%;max-width:16.66667%}.col-sm-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-webkit-box-flex:0;-ms-flex:0 0 33.33333%;flex:0 0 33.33333%;max-width:33.33333%}.col-sm-5{-webkit-box-flex:0;-ms-flex:0 0 41.66667%;flex:0 0 41.66667%;max-width:41.66667%}.col-sm-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-webkit-box-flex:0;-ms-flex:0 0 58.33333%;flex:0 0 58.33333%;max-width:58.33333%}.col-sm-8{-webkit-box-flex:0;-ms-flex:0 0 66.66667%;flex:0 0 66.66667%;max-width:66.66667%}.col-sm-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-webkit-box-flex:0;-ms-flex:0 0 83.33333%;flex:0 0 83.33333%;max-width:83.33333%}.col-sm-11{-webkit-box-flex:0;-ms-flex:0 0 91.66667%;flex:0 0 91.66667%;max-width:91.66667%}.col-sm-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-sm-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-sm-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-sm-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-sm-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-sm-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-sm-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-sm-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-sm-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-sm-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-sm-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-sm-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}}@media (min-width:768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-md-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-md-1{-webkit-box-flex:0;-ms-flex:0 0 8.33333%;flex:0 0 8.33333%;max-width:8.33333%}.col-md-2{-webkit-box-flex:0;-ms-flex:0 0 16.66667%;flex:0 0 16.66667%;max-width:16.66667%}.col-md-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-webkit-box-flex:0;-ms-flex:0 0 33.33333%;flex:0 0 33.33333%;max-width:33.33333%}.col-md-5{-webkit-box-flex:0;-ms-flex:0 0 41.66667%;flex:0 0 41.66667%;max-width:41.66667%}.col-md-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-webkit-box-flex:0;-ms-flex:0 0 58.33333%;flex:0 0 58.33333%;max-width:58.33333%}.col-md-8{-webkit-box-flex:0;-ms-flex:0 0 66.66667%;flex:0 0 66.66667%;max-width:66.66667%}.col-md-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-webkit-box-flex:0;-ms-flex:0 0 83.33333%;flex:0 0 83.33333%;max-width:83.33333%}.col-md-11{-webkit-box-flex:0;-ms-flex:0 0 91.66667%;flex:0 0 91.66667%;max-width:91.66667%}.col-md-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-md-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-md-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-md-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-md-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-md-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-md-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-md-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-md-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-md-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-md-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-md-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}}@media (min-width:992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-lg-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-lg-1{-webkit-box-flex:0;-ms-flex:0 0 8.33333%;flex:0 0 8.33333%;max-width:8.33333%}.col-lg-2{-webkit-box-flex:0;-ms-flex:0 0 16.66667%;flex:0 0 16.66667%;max-width:16.66667%}.col-lg-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-webkit-box-flex:0;-ms-flex:0 0 33.33333%;flex:0 0 33.33333%;max-width:33.33333%}.col-lg-5{-webkit-box-flex:0;-ms-flex:0 0 41.66667%;flex:0 0 41.66667%;max-width:41.66667%}.col-lg-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-webkit-box-flex:0;-ms-flex:0 0 58.33333%;flex:0 0 58.33333%;max-width:58.33333%}.col-lg-8{-webkit-box-flex:0;-ms-flex:0 0 66.66667%;flex:0 0 66.66667%;max-width:66.66667%}.col-lg-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-webkit-box-flex:0;-ms-flex:0 0 83.33333%;flex:0 0 83.33333%;max-width:83.33333%}.col-lg-11{-webkit-box-flex:0;-ms-flex:0 0 91.66667%;flex:0 0 91.66667%;max-width:91.66667%}.col-lg-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-lg-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-lg-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-lg-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-lg-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-lg-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-lg-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-lg-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-lg-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-lg-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-lg-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-lg-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}}@media (min-width:1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-xl-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-xl-1{-webkit-box-flex:0;-ms-flex:0 0 8.33333%;flex:0 0 8.33333%;max-width:8.33333%}.col-xl-2{-webkit-box-flex:0;-ms-flex:0 0 16.66667%;flex:0 0 16.66667%;max-width:16.66667%}.col-xl-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-webkit-box-flex:0;-ms-flex:0 0 33.33333%;flex:0 0 33.33333%;max-width:33.33333%}.col-xl-5{-webkit-box-flex:0;-ms-flex:0 0 41.66667%;flex:0 0 41.66667%;max-width:41.66667%}.col-xl-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-webkit-box-flex:0;-ms-flex:0 0 58.33333%;flex:0 0 58.33333%;max-width:58.33333%}.col-xl-8{-webkit-box-flex:0;-ms-flex:0 0 66.66667%;flex:0 0 66.66667%;max-width:66.66667%}.col-xl-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-webkit-box-flex:0;-ms-flex:0 0 83.33333%;flex:0 0 83.33333%;max-width:83.33333%}.col-xl-11{-webkit-box-flex:0;-ms-flex:0 0 91.66667%;flex:0 0 91.66667%;max-width:91.66667%}.col-xl-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-xl-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-xl-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-xl-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-xl-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-xl-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-xl-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-xl-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-xl-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-xl-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-xl-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-xl-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}}.table{width:100%;max-width:100%;margin-bottom:20px;background-color:transparent}.table td,.table th{padding:.75rem;vertical-align:top;border-top:1px solid #e9ecef}.table thead th{vertical-align:bottom;border-bottom:2px solid #e9ecef}.table tbody+tbody{border-top:2px solid #e9ecef}.table .table{background-color:#fff}.table-sm td,.table-sm th{padding:.3rem}.table-bordered{border:1px solid #e9ecef}.table-bordered td,.table-bordered th{border:1px solid #e9ecef}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#bfe2ef}.table-hover .table-primary:hover{background-color:#abd9ea}.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#abd9ea}.table-success,.table-success>td,.table-success>th{background-color:#bff0df}.table-hover .table-success:hover{background-color:#aaebd5}.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#aaebd5}.table-info,.table-info>td,.table-info>th{background-color:#e4ddff}.table-hover .table-info:hover{background-color:#d0c4ff}.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#d0c4ff}.table-warning,.table-warning>td,.table-warning>th{background-color:#f7f4c7}.table-hover .table-warning:hover{background-color:#f4f0b1}.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#f4f0b1}.table-danger,.table-danger>td,.table-danger>th{background-color:#f8cbd1}.table-hover .table-danger:hover{background-color:#f5b5bd}.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f5b5bd}.table-dark,.table-dark>td,.table-dark>th{background-color:#bfbfc1}.table-hover .table-dark:hover{background-color:#b2b2b4}.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b2b2b4}.table-active,.table-active>td,.table-active>th{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.thead-inverse th{color:#fff;background-color:#212529}.thead-default th{color:#495057;background-color:#e9ecef}.table-inverse{color:#fff;background-color:#212529}.table-inverse td,.table-inverse th,.table-inverse thead th{border-color:#32383e}.table-inverse.table-bordered{border:0}.table-inverse.table-striped tbody tr:nth-of-type(odd){background-color:rgba(255,255,255,.05)}.table-inverse.table-hover tbody tr:hover{background-color:rgba(255,255,255,.075)}@media (max-width:991px){.table-responsive{display:block;width:100%;overflow-x:auto;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive.table-bordered{border:0}}.form-control{display:block;width:100%;padding:.5rem .75rem;font-size:.9rem;line-height:1.25;color:#495057;background-color:#fff;background-image:none;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem;-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s,-webkit-box-shadow ease-in-out .15s}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#71cced;outline:0}.form-control::-webkit-input-placeholder{color:#868e96;opacity:1}.form-control:-ms-input-placeholder{color:#868e96;opacity:1}.form-control::placeholder{color:#868e96;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:not([size]):not([multiple]){height:calc(2.25rem + 2px)}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block}.col-form-label{padding-top:calc(.5rem - 1px * 2);padding-bottom:calc(.5rem - 1px * 2);margin-bottom:0}.col-form-label-lg{padding-top:calc(.5rem - 1px * 2);padding-bottom:calc(.5rem - 1px * 2);font-size:1.25rem}.col-form-label-sm{padding-top:calc(.25rem - 1px * 2);padding-bottom:calc(.25rem - 1px * 2);font-size:.875rem}.col-form-legend{padding-top:.5rem;padding-bottom:.5rem;margin-bottom:0;font-size:.9rem}.form-control-plaintext{padding-top:.5rem;padding-bottom:.5rem;margin-bottom:0;line-height:1.25;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm,.input-group-lg>.form-control-plaintext.form-control,.input-group-lg>.form-control-plaintext.input-group-addon,.input-group-lg>.input-group-btn>.form-control-plaintext.btn,.input-group-sm>.form-control-plaintext.form-control,.input-group-sm>.form-control-plaintext.input-group-addon,.input-group-sm>.input-group-btn>.form-control-plaintext.btn{padding-right:0;padding-left:0}.form-control-sm,.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.input-group-sm>.input-group-btn>select.btn:not([size]):not([multiple]),.input-group-sm>select.form-control:not([size]):not([multiple]),.input-group-sm>select.input-group-addon:not([size]):not([multiple]),select.form-control-sm:not([size]):not([multiple]){height:calc(1.8125rem + 2px)}.form-control-lg,.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.input-group-lg>.input-group-btn>select.btn:not([size]):not([multiple]),.input-group-lg>select.form-control:not([size]):not([multiple]),.input-group-lg>select.input-group-addon:not([size]):not([multiple]),select.form-control-lg:not([size]):not([multiple]){height:calc(2.3125rem + 2px)}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:.25rem}.form-row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;margin-bottom:.5rem}.form-check.disabled .form-check-label{color:#999}.form-check-label{padding-left:1.25rem;margin-bottom:0}.form-check-input{position:absolute;margin-top:.25rem;margin-left:-1.25rem}.form-check-input:only-child{position:static}.form-check-inline{display:inline-block}.form-check-inline .form-check-label{vertical-align:middle}.form-check-inline+.form-check-inline{margin-left:.75rem}.invalid-feedback{display:none;margin-top:.25rem;font-size:.875rem;color:#e64759}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;width:250px;padding:.5rem;margin-top:.1rem;font-size:.875rem;line-height:1;color:#fff;background-color:rgba(230,71,89,.8);border-radius:.2rem}.custom-select.is-valid,.form-control.is-valid,.was-validated .custom-select:valid,.was-validated .form-control:valid{border-color:#1bc98e}.custom-select.is-valid:focus,.form-control.is-valid:focus,.was-validated .custom-select:valid:focus,.was-validated .form-control:valid:focus{-webkit-box-shadow:0 0 0 .2rem rgba(27,201,142,.25);box-shadow:0 0 0 .2rem rgba(27,201,142,.25)}.custom-select.is-valid~.invalid-feedback,.custom-select.is-valid~.invalid-tooltip,.form-control.is-valid~.invalid-feedback,.form-control.is-valid~.invalid-tooltip,.was-validated .custom-select:valid~.invalid-feedback,.was-validated .custom-select:valid~.invalid-tooltip,.was-validated .form-control:valid~.invalid-feedback,.was-validated .form-control:valid~.invalid-tooltip{display:block}.form-check-input.is-valid+.form-check-label,.was-validated .form-check-input:valid+.form-check-label{color:#1bc98e}.custom-control-input.is-valid~.custom-control-indicator,.was-validated .custom-control-input:valid~.custom-control-indicator{background-color:rgba(27,201,142,.25)}.custom-control-input.is-valid~.custom-control-description,.was-validated .custom-control-input:valid~.custom-control-description{color:#1bc98e}.custom-file-input.is-valid~.custom-file-control,.was-validated .custom-file-input:valid~.custom-file-control{border-color:#1bc98e}.custom-file-input.is-valid~.custom-file-control::before,.was-validated .custom-file-input:valid~.custom-file-control::before{border-color:inherit}.custom-file-input.is-valid:focus,.was-validated .custom-file-input:valid:focus{-webkit-box-shadow:0 0 0 .2rem rgba(27,201,142,.25);box-shadow:0 0 0 .2rem rgba(27,201,142,.25)}.custom-select.is-invalid,.form-control.is-invalid,.was-validated .custom-select:invalid,.was-validated .form-control:invalid{border-color:#e64759}.custom-select.is-invalid:focus,.form-control.is-invalid:focus,.was-validated .custom-select:invalid:focus,.was-validated .form-control:invalid:focus{-webkit-box-shadow:0 0 0 .2rem rgba(230,71,89,.25);box-shadow:0 0 0 .2rem rgba(230,71,89,.25)}.custom-select.is-invalid~.invalid-feedback,.custom-select.is-invalid~.invalid-tooltip,.form-control.is-invalid~.invalid-feedback,.form-control.is-invalid~.invalid-tooltip,.was-validated .custom-select:invalid~.invalid-feedback,.was-validated .custom-select:invalid~.invalid-tooltip,.was-validated .form-control:invalid~.invalid-feedback,.was-validated .form-control:invalid~.invalid-tooltip{display:block}.form-check-input.is-invalid+.form-check-label,.was-validated .form-check-input:invalid+.form-check-label{color:#e64759}.custom-control-input.is-invalid~.custom-control-indicator,.was-validated .custom-control-input:invalid~.custom-control-indicator{background-color:rgba(230,71,89,.25)}.custom-control-input.is-invalid~.custom-control-description,.was-validated .custom-control-input:invalid~.custom-control-description{color:#e64759}.custom-file-input.is-invalid~.custom-file-control,.was-validated .custom-file-input:invalid~.custom-file-control{border-color:#e64759}.custom-file-input.is-invalid~.custom-file-control::before,.was-validated .custom-file-input:invalid~.custom-file-control::before{border-color:inherit}.custom-file-input.is-invalid:focus,.was-validated .custom-file-input:invalid:focus{-webkit-box-shadow:0 0 0 .2rem rgba(230,71,89,.25);box-shadow:0 0 0 .2rem rgba(230,71,89,.25)}.form-inline{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-bottom:0}.form-inline .form-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:0}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .input-group{width:auto}.form-inline .form-control-label{margin-bottom:0;vertical-align:middle}.form-inline .form-check{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:auto;margin-top:0;margin-bottom:0}.form-inline .form-check-label{padding-left:0}.form-inline .form-check-input{position:relative;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding-left:0}.form-inline .custom-control-indicator{position:static;display:inline-block;margin-right:.25rem;vertical-align:text-bottom}.form-inline .has-feedback .form-control-feedback{top:0}}.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:.5rem .75rem;font-size:.9rem;line-height:1.25;border-radius:.25rem;-webkit-transition:all .15s ease-in-out;transition:all .15s ease-in-out}.btn:focus,.btn:hover{text-decoration:none}.btn.focus,.btn:focus{outline:0;-webkit-box-shadow:0 0 0 3px rgba(25,151,198,.25);box-shadow:0 0 0 3px rgba(25,151,198,.25)}.btn.disabled,.btn:disabled{opacity:.65}.btn.active,.btn:active{background-image:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#1997c6;border-color:#1997c6}.btn-primary:hover{color:#fff;background-color:#157da4;border-color:#137499}.btn-primary.focus,.btn-primary:focus{-webkit-box-shadow:0 0 0 3px rgba(25,151,198,.5);box-shadow:0 0 0 3px rgba(25,151,198,.5)}.btn-primary.disabled,.btn-primary:disabled{background-color:#1997c6;border-color:#1997c6}.btn-primary.active,.btn-primary:active,.show>.btn-primary.dropdown-toggle{background-color:#157da4;background-image:none;border-color:#137499}.btn-success{color:#fff;background-color:#1bc98e;border-color:#1bc98e}.btn-success:hover{color:#fff;background-color:#16a776;border-color:#159c6e}.btn-success.focus,.btn-success:focus{-webkit-box-shadow:0 0 0 3px rgba(27,201,142,.5);box-shadow:0 0 0 3px rgba(27,201,142,.5)}.btn-success.disabled,.btn-success:disabled{background-color:#1bc98e;border-color:#1bc98e}.btn-success.active,.btn-success:active,.show>.btn-success.dropdown-toggle{background-color:#16a776;background-image:none;border-color:#159c6e}.btn-info{color:#111;background-color:#9f86ff;border-color:#9f86ff}.btn-info:hover{color:#111;background-color:#8160ff;border-color:#7753ff}.btn-info.focus,.btn-info:focus{-webkit-box-shadow:0 0 0 3px rgba(159,134,255,.5);box-shadow:0 0 0 3px rgba(159,134,255,.5)}.btn-info.disabled,.btn-info:disabled{background-color:#9f86ff;border-color:#9f86ff}.btn-info.active,.btn-info:active,.show>.btn-info.dropdown-toggle{background-color:#8160ff;background-image:none;border-color:#7753ff}.btn-warning{color:#111;background-color:#e4d836;border-color:#e4d836}.btn-warning:hover{color:#111;background-color:#d7ca1d;border-color:#ccbf1b}.btn-warning.focus,.btn-warning:focus{-webkit-box-shadow:0 0 0 3px rgba(228,216,54,.5);box-shadow:0 0 0 3px rgba(228,216,54,.5)}.btn-warning.disabled,.btn-warning:disabled{background-color:#e4d836;border-color:#e4d836}.btn-warning.active,.btn-warning:active,.show>.btn-warning.dropdown-toggle{background-color:#d7ca1d;background-image:none;border-color:#ccbf1b}.btn-danger{color:#fff;background-color:#e64759;border-color:#e64759}.btn-danger:hover{color:#fff;background-color:#e1253b;border-color:#dc1e33}.btn-danger.focus,.btn-danger:focus{-webkit-box-shadow:0 0 0 3px rgba(230,71,89,.5);box-shadow:0 0 0 3px rgba(230,71,89,.5)}.btn-danger.disabled,.btn-danger:disabled{background-color:#e64759;border-color:#e64759}.btn-danger.active,.btn-danger:active,.show>.btn-danger.dropdown-toggle{background-color:#e1253b;background-image:none;border-color:#dc1e33}.btn-dark{color:#fff;background-color:#1a1c22;border-color:#1a1c22}.btn-dark:hover{color:#fff;background-color:#090a0c;border-color:#040405}.btn-dark.focus,.btn-dark:focus{-webkit-box-shadow:0 0 0 3px rgba(26,28,34,.5);box-shadow:0 0 0 3px rgba(26,28,34,.5)}.btn-dark.disabled,.btn-dark:disabled{background-color:#1a1c22;border-color:#1a1c22}.btn-dark.active,.btn-dark:active,.show>.btn-dark.dropdown-toggle{background-color:#090a0c;background-image:none;border-color:#040405}.btn-outline-primary{color:#1997c6;background-color:transparent;background-image:none;border-color:#1997c6}.btn-outline-primary:hover{color:#fff;background-color:#1997c6;border-color:#1997c6}.btn-outline-primary.focus,.btn-outline-primary:focus{-webkit-box-shadow:0 0 0 3px rgba(25,151,198,.5);box-shadow:0 0 0 3px rgba(25,151,198,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#1997c6;background-color:transparent}.btn-outline-primary.active,.btn-outline-primary:active,.show>.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#1997c6;border-color:#1997c6}.btn-outline-success{color:#1bc98e;background-color:transparent;background-image:none;border-color:#1bc98e}.btn-outline-success:hover{color:#fff;background-color:#1bc98e;border-color:#1bc98e}.btn-outline-success.focus,.btn-outline-success:focus{-webkit-box-shadow:0 0 0 3px rgba(27,201,142,.5);box-shadow:0 0 0 3px rgba(27,201,142,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#1bc98e;background-color:transparent}.btn-outline-success.active,.btn-outline-success:active,.show>.btn-outline-success.dropdown-toggle{color:#fff;background-color:#1bc98e;border-color:#1bc98e}.btn-outline-info{color:#9f86ff;background-color:transparent;background-image:none;border-color:#9f86ff}.btn-outline-info:hover{color:#fff;background-color:#9f86ff;border-color:#9f86ff}.btn-outline-info.focus,.btn-outline-info:focus{-webkit-box-shadow:0 0 0 3px rgba(159,134,255,.5);box-shadow:0 0 0 3px rgba(159,134,255,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#9f86ff;background-color:transparent}.btn-outline-info.active,.btn-outline-info:active,.show>.btn-outline-info.dropdown-toggle{color:#fff;background-color:#9f86ff;border-color:#9f86ff}.btn-outline-warning{color:#e4d836;background-color:transparent;background-image:none;border-color:#e4d836}.btn-outline-warning:hover{color:#fff;background-color:#e4d836;border-color:#e4d836}.btn-outline-warning.focus,.btn-outline-warning:focus{-webkit-box-shadow:0 0 0 3px rgba(228,216,54,.5);box-shadow:0 0 0 3px rgba(228,216,54,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#e4d836;background-color:transparent}.btn-outline-warning.active,.btn-outline-warning:active,.show>.btn-outline-warning.dropdown-toggle{color:#fff;background-color:#e4d836;border-color:#e4d836}.btn-outline-danger{color:#e64759;background-color:transparent;background-image:none;border-color:#e64759}.btn-outline-danger:hover{color:#fff;background-color:#e64759;border-color:#e64759}.btn-outline-danger.focus,.btn-outline-danger:focus{-webkit-box-shadow:0 0 0 3px rgba(230,71,89,.5);box-shadow:0 0 0 3px rgba(230,71,89,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#e64759;background-color:transparent}.btn-outline-danger.active,.btn-outline-danger:active,.show>.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#e64759;border-color:#e64759}.btn-outline-dark{color:#1a1c22;background-color:transparent;background-image:none;border-color:#1a1c22}.btn-outline-dark:hover{color:#fff;background-color:#1a1c22;border-color:#1a1c22}.btn-outline-dark.focus,.btn-outline-dark:focus{-webkit-box-shadow:0 0 0 3px rgba(26,28,34,.5);box-shadow:0 0 0 3px rgba(26,28,34,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#1a1c22;background-color:transparent}.btn-outline-dark.active,.btn-outline-dark:active,.show>.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#1a1c22;border-color:#1a1c22}.btn-link{font-weight:400;color:#1997c6;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link:disabled{background-color:transparent}.btn-link,.btn-link:active,.btn-link:focus{border-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#106382;text-decoration:underline;background-color:transparent}.btn-link:disabled{color:#868e96}.btn-link:disabled:focus,.btn-link:disabled:hover{text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.show{opacity:1}.collapse{display:none}.collapse.show{display:block}tr.collapse.show{display:table-row}tbody.collapse.show{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition:height .35s ease;transition:height .35s ease}.dropdown,.dropup{position:relative}.dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropup .dropdown-menu{margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle::after{border-top:0;border-bottom:.3em solid}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:.9rem;color:#000;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-divider{height:0;margin:10px 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background:0 0;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#1997c6}.dropdown-item.disabled,.dropdown-item:disabled{color:#868e96;background-color:transparent}.show>a{outline:0}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#868e96;white-space:nowrap}.btn-group,.btn-group-vertical{position:relative;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;margin-bottom:0}.btn-group-vertical>.btn:hover,.btn-group>.btn:hover{z-index:2}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group,.btn-group-vertical .btn+.btn,.btn-group-vertical .btn+.btn-group,.btn-group-vertical .btn-group+.btn,.btn-group-vertical .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.btn+.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.btn+.dropdown-toggle-split::after{margin-left:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.btn-group-vertical .btn,.btn-group-vertical .btn-group{width:100%}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-top-right-radius:0}[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio],[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;width:100%}.input-group .form-control{position:relative;z-index:2;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;margin-bottom:0}.input-group .form-control:active,.input-group .form-control:focus,.input-group .form-control:hover{z-index:3}.input-group .form-control,.input-group-addon,.input-group-btn{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{white-space:nowrap;vertical-align:middle}.input-group-addon{padding:.5rem .75rem;margin-bottom:0;font-size:.9rem;font-weight:400;line-height:1.25;color:#495057;text-align:center;background-color:#e9ecef;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.input-group-addon.form-control-sm,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.input-group-addon.btn{padding:.25rem .5rem;font-size:.875rem;border-radius:.2rem}.input-group-addon.form-control-lg,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.input-group-addon.btn{padding:.5rem 1rem;font-size:1.25rem;border-radius:.3rem}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:not(:last-child),.input-group-addon:not(:last-child),.input-group-btn:not(:first-child)>.btn-group:not(:last-child)>.btn,.input-group-btn:not(:first-child)>.btn:not(:last-child):not(.dropdown-toggle),.input-group-btn:not(:last-child)>.btn,.input-group-btn:not(:last-child)>.btn-group>.btn,.input-group-btn:not(:last-child)>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:not(:last-child){border-right:0}.input-group .form-control:not(:first-child),.input-group-addon:not(:first-child),.input-group-btn:not(:first-child)>.btn,.input-group-btn:not(:first-child)>.btn-group>.btn,.input-group-btn:not(:first-child)>.dropdown-toggle,.input-group-btn:not(:last-child)>.btn-group:not(:first-child)>.btn,.input-group-btn:not(:last-child)>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.form-control+.input-group-addon:not(:first-child){border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:3}.input-group-btn:not(:last-child)>.btn,.input-group-btn:not(:last-child)>.btn-group{margin-right:-1px}.input-group-btn:not(:first-child)>.btn,.input-group-btn:not(:first-child)>.btn-group{z-index:2;margin-left:-1px}.input-group-btn:not(:first-child)>.btn-group:active,.input-group-btn:not(:first-child)>.btn-group:focus,.input-group-btn:not(:first-child)>.btn-group:hover,.input-group-btn:not(:first-child)>.btn:active,.input-group-btn:not(:first-child)>.btn:focus,.input-group-btn:not(:first-child)>.btn:hover{z-index:3}.custom-control{position:relative;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;min-height:1.5rem;padding-left:1.5rem;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked~.custom-control-indicator{color:#fff;background-color:#1997c6}.custom-control-input:focus~.custom-control-indicator{-webkit-box-shadow:0 0 0 1px #fff,0 0 0 3px #1997c6;box-shadow:0 0 0 1px #fff,0 0 0 3px #1997c6}.custom-control-input:active~.custom-control-indicator{color:#fff;background-color:#9fdcf3}.custom-control-input:disabled~.custom-control-indicator{background-color:#e9ecef}.custom-control-input:disabled~.custom-control-description{color:#868e96}.custom-control-indicator{position:absolute;top:.25rem;left:0;display:block;width:1rem;height:1rem;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#fff;background-repeat:no-repeat;background-position:center center;background-size:50% 50%}.custom-checkbox .custom-control-indicator{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-indicator{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E\")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-indicator{background-color:#1997c6;background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='%23fff' d='M0 2h4'/%3E%3C/svg%3E\")}.custom-radio .custom-control-indicator{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-indicator{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E\")}.custom-controls-stacked{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.custom-controls-stacked .custom-control{margin-bottom:.25rem}.custom-controls-stacked .custom-control+.custom-control{margin-left:0}.custom-select{display:inline-block;max-width:100%;height:calc(2.25rem + 2px);padding:.375rem 1.75rem .375rem .75rem;line-height:1.25;color:#495057;vertical-align:middle;background:#fff url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23333' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\") no-repeat right .75rem center;background-size:8px 10px;border:1px solid rgba(0,0,0,.15);border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#71cced;outline:0}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select:disabled{color:#868e96;background-color:#e9ecef}.custom-select::-ms-expand{opacity:0}.custom-select-sm{height:calc(1.8125rem + 2px);padding-top:.375rem;padding-bottom:.375rem;font-size:75%}.custom-file{position:relative;display:inline-block;max-width:100%;height:2.5rem;margin-bottom:0}.custom-file-input{min-width:14rem;max-width:100%;height:2.5rem;margin:0;opacity:0}.custom-file-control{position:absolute;top:0;right:0;left:0;z-index:5;height:2.5rem;padding:.5rem 1rem;line-height:1.5;color:#495057;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#fff;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.custom-file-control:lang(en):empty::after{content:\"Choose file...\"}.custom-file-control::before{position:absolute;top:-1px;right:-1px;bottom:-1px;z-index:6;display:block;height:2.5rem;padding:.5rem 1rem;line-height:1.5;color:#495057;background-color:#e9ecef;border:1px solid rgba(0,0,0,.15);border-radius:0 .25rem .25rem 0}.custom-file-control:lang(en)::before{content:\"Browse\"}.nav{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#868e96}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #ddd}.nav-tabs .nav-link.disabled{color:#868e96;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#fff;border-color:#ddd #ddd #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.show>.nav-pills .nav-link{color:#fff;background-color:#1997c6}.nav-fill .nav-item{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:.5rem 1rem}.navbar>.container,.navbar>.container-fluid{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:.125rem;padding-bottom:.125rem;margin-right:1rem;font-size:1.25rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background:0 0;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:no-repeat center center;background-size:100% 100%}@media (max-width:575px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width:767px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width:991px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width:1199px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand{color:rgba(0,0,0,.9)}.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:rgba(255,255,255,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:rgba(255,255,255,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:rgba(255,255,255,.5);border-color:rgba(255,255,255,.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\")}.navbar-dark .navbar-text{color:rgba(255,255,255,.5)}.card{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card-body{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:.75rem}.card-subtitle{margin-top:-.375rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card>.list-group:first-child .list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card>.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-header{padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-footer{padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-right:-.625rem;margin-bottom:-.75rem;margin-left:-.625rem;border-bottom:0}.card-header-pills{margin-right:-.625rem;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}@media (min-width:576px){.card-deck{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-right:15px;margin-left:15px}}@media (min-width:576px){.card-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group .card{-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%}.card-group .card+.card{margin-left:0;border-left:0}.card-group .card:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.card-group .card:first-child .card-img-top{border-top-right-radius:0}.card-group .card:first-child .card-img-bottom{border-bottom-right-radius:0}.card-group .card:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.card-group .card:last-child .card-img-top{border-top-left-radius:0}.card-group .card:last-child .card-img-bottom{border-bottom-left-radius:0}.card-group .card:not(:first-child):not(:last-child){border-radius:0}.card-group .card:not(:first-child):not(:last-child) .card-img-bottom,.card-group .card:not(:first-child):not(:last-child) .card-img-top{border-radius:0}}.card-columns .card{margin-bottom:.75rem}@media (min-width:576px){.card-columns{-webkit-column-count:3;column-count:3;-webkit-column-gap:1.25rem;column-gap:1.25rem}.card-columns .card{display:inline-block;width:100%}}.breadcrumb{padding:.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb::after{display:block;clear:both;content:\"\"}.breadcrumb-item{float:left}.breadcrumb-item+.breadcrumb-item::before{display:inline-block;padding-right:.5rem;padding-left:.5rem;color:#868e96;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:underline}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:none}.breadcrumb-item.active{color:#868e96}.pagination{display:-webkit-box;display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:2;color:#fff;background-color:#1997c6;border-color:#1997c6}.page-item.disabled .page-link{color:#868e96;pointer-events:none;background-color:#fff;border-color:#ddd}.page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#1997c6;background-color:#fff;border:1px solid #ddd}.page-link:focus,.page-link:hover{color:#106382;text-decoration:none;background-color:#e9ecef;border-color:#ddd}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.25rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:.875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#1997c6}.badge-primary[href]:focus,.badge-primary[href]:hover{color:#fff;text-decoration:none;background-color:#137499}.badge-success{color:#fff;background-color:#1bc98e}.badge-success[href]:focus,.badge-success[href]:hover{color:#fff;text-decoration:none;background-color:#159c6e}.badge-info{color:#111;background-color:#9f86ff}.badge-info[href]:focus,.badge-info[href]:hover{color:#111;text-decoration:none;background-color:#7753ff}.badge-warning{color:#111;background-color:#e4d836}.badge-warning[href]:focus,.badge-warning[href]:hover{color:#111;text-decoration:none;background-color:#ccbf1b}.badge-danger{color:#fff;background-color:#e64759}.badge-danger[href]:focus,.badge-danger[href]:hover{color:#fff;text-decoration:none;background-color:#dc1e33}.badge-dark{color:#fff;background-color:#1a1c22}.badge-dark[href]:focus,.badge-dark[href]:hover{color:#fff;text-decoration:none;background-color:#040405}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible .close{position:relative;top:-.75rem;right:-1.25rem;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#0d4f67;background-color:#d1eaf4;border-color:#bfe2ef}.alert-primary hr{border-top-color:#abd9ea}.alert-primary .alert-link{color:#072c3a}.alert-success{color:#0e694a;background-color:#d1f4e8;border-color:#bff0df}.alert-success hr{border-top-color:#aaebd5}.alert-success .alert-link{color:#083c2a}.alert-info{color:#534685;background-color:#ece7ff;border-color:#e4ddff}.alert-info hr{border-top-color:#d0c4ff}.alert-info .alert-link{color:#3e3464}.alert-warning{color:#77701c;background-color:#faf7d7;border-color:#f7f4c7}.alert-warning hr{border-top-color:#f4f0b1}.alert-warning .alert-link{color:#4e4912}.alert-danger{color:#78252e;background-color:#fadade;border-color:#f8cbd1}.alert-danger hr{border-top-color:#f5b5bd}.alert-danger .alert-link{color:#51191f}.alert-dark{color:#0d0f11;background-color:#d1d2d3;border-color:#bfbfc1}.alert-dark hr{border-top-color:#b2b2b4}.alert-dark .alert-link{color:#000}@-webkit-keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}.progress{display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;font-size:.75rem;line-height:1rem;text-align:center;background-color:#e9ecef;border-radius:.25rem}.progress-bar{height:1rem;line-height:1rem;color:#fff;background-color:#1997c6;-webkit-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}.media{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.media-body{-webkit-box-flex:1;-ms-flex:1;flex:1}.list-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#000;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.75rem 1.25rem;margin-bottom:-1px;background-color:transparent;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.list-group-item:focus,.list-group-item:hover{text-decoration:none}.list-group-item.disabled,.list-group-item:disabled{color:#868e96;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#1997c6;border-color:#1997c6}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{border-bottom:0}.list-group-item-primary{color:#0d4f67;background-color:#bfe2ef}a.list-group-item-primary,button.list-group-item-primary{color:#0d4f67}a.list-group-item-primary:focus,a.list-group-item-primary:hover,button.list-group-item-primary:focus,button.list-group-item-primary:hover{color:#0d4f67;background-color:#abd9ea}a.list-group-item-primary.active,button.list-group-item-primary.active{color:#fff;background-color:#0d4f67;border-color:#0d4f67}.list-group-item-success{color:#0e694a;background-color:#bff0df}a.list-group-item-success,button.list-group-item-success{color:#0e694a}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#0e694a;background-color:#aaebd5}a.list-group-item-success.active,button.list-group-item-success.active{color:#fff;background-color:#0e694a;border-color:#0e694a}.list-group-item-info{color:#534685;background-color:#e4ddff}a.list-group-item-info,button.list-group-item-info{color:#534685}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#534685;background-color:#d0c4ff}a.list-group-item-info.active,button.list-group-item-info.active{color:#fff;background-color:#534685;border-color:#534685}.list-group-item-warning{color:#77701c;background-color:#f7f4c7}a.list-group-item-warning,button.list-group-item-warning{color:#77701c}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#77701c;background-color:#f4f0b1}a.list-group-item-warning.active,button.list-group-item-warning.active{color:#fff;background-color:#77701c;border-color:#77701c}.list-group-item-danger{color:#78252e;background-color:#f8cbd1}a.list-group-item-danger,button.list-group-item-danger{color:#78252e}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#78252e;background-color:#f5b5bd}a.list-group-item-danger.active,button.list-group-item-danger.active{color:#fff;background-color:#78252e;border-color:#78252e}.list-group-item-dark{color:#0d0f11;background-color:#bfbfc1}a.list-group-item-dark,button.list-group-item-dark{color:#0d0f11}a.list-group-item-dark:focus,a.list-group-item-dark:hover,button.list-group-item-dark:focus,button.list-group-item-dark:hover{color:#0d0f11;background-color:#b2b2b4}a.list-group-item-dark.active,button.list-group-item-dark.active{color:#fff;background-color:#0d0f11;border-color:#0d0f11}.close{float:right;font-size:1.5rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:focus,.close:hover{color:#000;text-decoration:none;opacity:.75}button.close{padding:0;background:0 0;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;outline:0}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform .3s ease-out;transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out, -webkit-transform .3s ease-out;-webkit-transform:translate(0,-25%);transform:translate(0,-25%)}.modal.show .modal-dialog{-webkit-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:15px;border-bottom:1px solid #e9ecef}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:15px}.modal-footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:15px;border-top:1px solid #e9ecef}.modal-footer>:not(:first-child){margin-left:.25rem}.modal-footer>:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:30px auto}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg{max-width:800px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:Roboto,\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:5px;height:5px}.tooltip.bs-tooltip-auto[x-placement^=top],.tooltip.bs-tooltip-top{padding:5px 0}.tooltip.bs-tooltip-auto[x-placement^=top] .arrow,.tooltip.bs-tooltip-top .arrow{bottom:0}.tooltip.bs-tooltip-auto[x-placement^=top] .arrow::before,.tooltip.bs-tooltip-top .arrow::before{margin-left:-3px;content:\"\";border-width:5px 5px 0;border-top-color:#000}.tooltip.bs-tooltip-auto[x-placement^=right],.tooltip.bs-tooltip-right{padding:0 5px}.tooltip.bs-tooltip-auto[x-placement^=right] .arrow,.tooltip.bs-tooltip-right .arrow{left:0}.tooltip.bs-tooltip-auto[x-placement^=right] .arrow::before,.tooltip.bs-tooltip-right .arrow::before{margin-top:-3px;content:\"\";border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.bs-tooltip-auto[x-placement^=bottom],.tooltip.bs-tooltip-bottom{padding:5px 0}.tooltip.bs-tooltip-auto[x-placement^=bottom] .arrow,.tooltip.bs-tooltip-bottom .arrow{top:0}.tooltip.bs-tooltip-auto[x-placement^=bottom] .arrow::before,.tooltip.bs-tooltip-bottom .arrow::before{margin-left:-3px;content:\"\";border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bs-tooltip-auto[x-placement^=left],.tooltip.bs-tooltip-left{padding:0 5px}.tooltip.bs-tooltip-auto[x-placement^=left] .arrow,.tooltip.bs-tooltip-left .arrow{right:0}.tooltip.bs-tooltip-auto[x-placement^=left] .arrow::before,.tooltip.bs-tooltip-left .arrow::before{right:0;margin-top:-3px;content:\"\";border-width:5px 0 5px 5px;border-left-color:#000}.tooltip .arrow::before{position:absolute;border-color:transparent;border-style:solid}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;padding:1px;font-family:Roboto,\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover .arrow{position:absolute;display:block;width:10px;height:5px}.popover .arrow::after,.popover .arrow::before{position:absolute;display:block;border-color:transparent;border-style:solid}.popover .arrow::before{content:\"\";border-width:11px}.popover .arrow::after{content:\"\";border-width:11px}.popover.bs-popover-auto[x-placement^=top],.popover.bs-popover-top{margin-bottom:10px}.popover.bs-popover-auto[x-placement^=top] .arrow,.popover.bs-popover-top .arrow{bottom:0}.popover.bs-popover-auto[x-placement^=top] .arrow::after,.popover.bs-popover-auto[x-placement^=top] .arrow::before,.popover.bs-popover-top .arrow::after,.popover.bs-popover-top .arrow::before{border-bottom-width:0}.popover.bs-popover-auto[x-placement^=top] .arrow::before,.popover.bs-popover-top .arrow::before{bottom:-11px;margin-left:-6px;border-top-color:rgba(0,0,0,.25)}.popover.bs-popover-auto[x-placement^=top] .arrow::after,.popover.bs-popover-top .arrow::after{bottom:-10px;margin-left:-6px;border-top-color:#fff}.popover.bs-popover-auto[x-placement^=right],.popover.bs-popover-right{margin-left:10px}.popover.bs-popover-auto[x-placement^=right] .arrow,.popover.bs-popover-right .arrow{left:0}.popover.bs-popover-auto[x-placement^=right] .arrow::after,.popover.bs-popover-auto[x-placement^=right] .arrow::before,.popover.bs-popover-right .arrow::after,.popover.bs-popover-right .arrow::before{margin-top:-8px;border-left-width:0}.popover.bs-popover-auto[x-placement^=right] .arrow::before,.popover.bs-popover-right .arrow::before{left:-11px;border-right-color:rgba(0,0,0,.25)}.popover.bs-popover-auto[x-placement^=right] .arrow::after,.popover.bs-popover-right .arrow::after{left:-10px;border-right-color:#fff}.popover.bs-popover-auto[x-placement^=bottom],.popover.bs-popover-bottom{margin-top:10px}.popover.bs-popover-auto[x-placement^=bottom] .arrow,.popover.bs-popover-bottom .arrow{top:0}.popover.bs-popover-auto[x-placement^=bottom] .arrow::after,.popover.bs-popover-auto[x-placement^=bottom] .arrow::before,.popover.bs-popover-bottom .arrow::after,.popover.bs-popover-bottom .arrow::before{margin-left:-7px;border-top-width:0}.popover.bs-popover-auto[x-placement^=bottom] .arrow::before,.popover.bs-popover-bottom .arrow::before{top:-11px;border-bottom-color:rgba(0,0,0,.25)}.popover.bs-popover-auto[x-placement^=bottom] .arrow::after,.popover.bs-popover-bottom .arrow::after{top:-10px;border-bottom-color:#fff}.popover.bs-popover-auto[x-placement^=bottom] .popover-header::before,.popover.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:20px;margin-left:-10px;content:\"\";border-bottom:1px solid #f7f7f7}.popover.bs-popover-auto[x-placement^=left],.popover.bs-popover-left{margin-right:10px}.popover.bs-popover-auto[x-placement^=left] .arrow,.popover.bs-popover-left .arrow{right:0}.popover.bs-popover-auto[x-placement^=left] .arrow::after,.popover.bs-popover-auto[x-placement^=left] .arrow::before,.popover.bs-popover-left .arrow::after,.popover.bs-popover-left .arrow::before{margin-top:-8px;border-right-width:0}.popover.bs-popover-auto[x-placement^=left] .arrow::before,.popover.bs-popover-left .arrow::before{right:-11px;border-left-color:rgba(0,0,0,.25)}.popover.bs-popover-auto[x-placement^=left] .arrow::after,.popover.bs-popover-left .arrow::after{right:-10px;border-left-color:#fff}.popover-header{padding:8px 14px;margin-bottom:0;font-size:.9rem;color:inherit;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:9px 14px;color:#000}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-item{position:relative;display:none;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;-webkit-transition:-webkit-transform .6s ease;transition:-webkit-transform .6s ease;transition:transform .6s ease;transition:transform .6s ease, -webkit-transform .6s ease;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.carousel-item-next,.carousel-item-prev{position:absolute;top:0}.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translateX(0);transform:translateX(0)}@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)){.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.active.carousel-item-right,.carousel-item-next{-webkit-transform:translateX(100%);transform:translateX(100%)}@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)){.active.carousel-item-right,.carousel-item-next{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}}.active.carousel-item-left,.carousel-item-prev{-webkit-transform:translateX(-100%);transform:translateX(-100%)}@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)){.active.carousel-item-left,.carousel-item-prev{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:.5}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:transparent no-repeat center center;background-size:100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M4 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M1.5 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E\")}.carousel-indicators{position:absolute;right:0;bottom:10px;left:0;z-index:15;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{position:relative;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;background-color:rgba(255,255,255,.5)}.carousel-indicators li::before{position:absolute;top:-10px;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators li::after{position:absolute;bottom:-10px;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators .active{background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#1997c6!important}a.bg-primary:focus,a.bg-primary:hover{background-color:#137499!important}.bg-success{background-color:#1bc98e!important}a.bg-success:focus,a.bg-success:hover{background-color:#159c6e!important}.bg-info{background-color:#9f86ff!important}a.bg-info:focus,a.bg-info:hover{background-color:#7753ff!important}.bg-warning{background-color:#e4d836!important}a.bg-warning:focus,a.bg-warning:hover{background-color:#ccbf1b!important}.bg-danger{background-color:#e64759!important}a.bg-danger:focus,a.bg-danger:hover{background-color:#dc1e33!important}.bg-dark{background-color:#1a1c22!important}a.bg-dark:focus,a.bg-dark:hover{background-color:#040405!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #e9ecef!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#1997c6!important}.border-success{border-color:#1bc98e!important}.border-info{border-color:#9f86ff!important}.border-warning{border-color:#e4d836!important}.border-danger{border-color:#e64759!important}.border-dark{border-color:#1a1c22!important}.border-white{border-color:#fff!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:.25rem!important;border-top-right-radius:.25rem!important}.rounded-right{border-top-right-radius:.25rem!important;border-bottom-right-radius:.25rem!important}.rounded-bottom{border-bottom-right-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-circle{border-radius:50%}.rounded-0{border-radius:0}.clearfix::after{display:block;clear:both;content:\"\"}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-cell{display:table-cell!important}.d-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-sm-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-md-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-lg-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-xl-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}.d-print-block{display:none!important}@media print{.d-print-block{display:block!important}}.d-print-inline{display:none!important}@media print{.d-print-inline{display:inline!important}}.d-print-inline-block{display:none!important}@media print{.d-print-inline-block{display:inline-block!important}}@media print{.d-print-none{display:none!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive::before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9::before{padding-top:42.85714%}.embed-responsive-16by9::before{padding-top:56.25%}.embed-responsive-4by3::before{padding-top:75%}.embed-responsive-1by1::before{padding-top:100%}.flex-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.flex-sm-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-sm-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-sm-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-sm-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-sm-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-sm-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-sm-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-sm-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-sm-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-sm-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-sm-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-sm-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-sm-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-sm-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-sm-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-sm-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-sm-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-sm-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-sm-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-sm-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-sm-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-sm-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-sm-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-sm-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-sm-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-sm-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-sm-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-sm-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.flex-md-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-md-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-md-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-md-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-md-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-md-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-md-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-md-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-md-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-md-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-md-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-md-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-md-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-md-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-md-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-md-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-md-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-md-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-md-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-md-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-md-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-md-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-md-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-md-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-md-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-md-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-md-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-md-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-lg-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-lg-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-lg-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-lg-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-lg-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-lg-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-lg-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-lg-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-lg-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-lg-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-lg-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-lg-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-lg-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-lg-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-lg-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-lg-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-lg-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-lg-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-lg-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-lg-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-lg-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-lg-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-lg-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-lg-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-lg-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-lg-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-lg-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-xl-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-xl-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-xl-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-xl-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-xl-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-xl-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-xl-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-xl-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-xl-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-xl-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-xl-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-xl-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-xl-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-xl-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-xl-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-xl-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-xl-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-xl-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-xl-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-xl-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-xl-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-xl-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-xl-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-xl-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-xl-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-xl-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-xl-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}@supports ((position: -webkit-sticky) or (position: sticky)){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;-webkit-clip-path:inset(50%);clip-path:inset(50%);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal;-webkit-clip-path:none;clip-path:none}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.m-0{margin:0!important}.mt-0{margin-top:0!important}.mr-0{margin-right:0!important}.mb-0{margin-bottom:0!important}.ml-0{margin-left:0!important}.mx-0{margin-right:0!important;margin-left:0!important}.my-0{margin-top:0!important;margin-bottom:0!important}.m-1{margin:.25rem!important}.mt-1{margin-top:.25rem!important}.mr-1{margin-right:.25rem!important}.mb-1{margin-bottom:.25rem!important}.ml-1{margin-left:.25rem!important}.mx-1{margin-right:.25rem!important;margin-left:.25rem!important}.my-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.m-2{margin:.5rem!important}.mt-2{margin-top:.5rem!important}.mr-2{margin-right:.5rem!important}.mb-2{margin-bottom:.5rem!important}.ml-2{margin-left:.5rem!important}.mx-2{margin-right:.5rem!important;margin-left:.5rem!important}.my-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.m-3{margin:1rem!important}.mt-3{margin-top:1rem!important}.mr-3{margin-right:1rem!important}.mb-3{margin-bottom:1rem!important}.ml-3{margin-left:1rem!important}.mx-3{margin-right:1rem!important;margin-left:1rem!important}.my-3{margin-top:1rem!important;margin-bottom:1rem!important}.m-4{margin:1.5rem!important}.mt-4{margin-top:1.5rem!important}.mr-4{margin-right:1.5rem!important}.mb-4{margin-bottom:1.5rem!important}.ml-4{margin-left:1.5rem!important}.mx-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.my-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.m-5{margin:3rem!important}.mt-5{margin-top:3rem!important}.mr-5{margin-right:3rem!important}.mb-5{margin-bottom:3rem!important}.ml-5{margin-left:3rem!important}.mx-5{margin-right:3rem!important;margin-left:3rem!important}.my-5{margin-top:3rem!important;margin-bottom:3rem!important}.p-0{padding:0!important}.pt-0{padding-top:0!important}.pr-0{padding-right:0!important}.pb-0{padding-bottom:0!important}.pl-0{padding-left:0!important}.px-0{padding-right:0!important;padding-left:0!important}.py-0{padding-top:0!important;padding-bottom:0!important}.p-1{padding:.25rem!important}.pt-1{padding-top:.25rem!important}.pr-1{padding-right:.25rem!important}.pb-1{padding-bottom:.25rem!important}.pl-1{padding-left:.25rem!important}.px-1{padding-right:.25rem!important;padding-left:.25rem!important}.py-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.p-2{padding:.5rem!important}.pt-2{padding-top:.5rem!important}.pr-2{padding-right:.5rem!important}.pb-2{padding-bottom:.5rem!important}.pl-2{padding-left:.5rem!important}.px-2{padding-right:.5rem!important;padding-left:.5rem!important}.py-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.p-3{padding:1rem!important}.pt-3{padding-top:1rem!important}.pr-3{padding-right:1rem!important}.pb-3{padding-bottom:1rem!important}.pl-3{padding-left:1rem!important}.px-3{padding-right:1rem!important;padding-left:1rem!important}.py-3{padding-top:1rem!important;padding-bottom:1rem!important}.p-4{padding:1.5rem!important}.pt-4{padding-top:1.5rem!important}.pr-4{padding-right:1.5rem!important}.pb-4{padding-bottom:1.5rem!important}.pl-4{padding-left:1.5rem!important}.px-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.py-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.p-5{padding:3rem!important}.pt-5{padding-top:3rem!important}.pr-5{padding-right:3rem!important}.pb-5{padding-bottom:3rem!important}.pl-5{padding-left:3rem!important}.px-5{padding-right:3rem!important;padding-left:3rem!important}.py-5{padding-top:3rem!important;padding-bottom:3rem!important}.m-auto{margin:auto!important}.mt-auto{margin-top:auto!important}.mr-auto{margin-right:auto!important}.mb-auto{margin-bottom:auto!important}.ml-auto{margin-left:auto!important}.mx-auto{margin-right:auto!important;margin-left:auto!important}.my-auto{margin-top:auto!important;margin-bottom:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0{margin-top:0!important}.mr-sm-0{margin-right:0!important}.mb-sm-0{margin-bottom:0!important}.ml-sm-0{margin-left:0!important}.mx-sm-0{margin-right:0!important;margin-left:0!important}.my-sm-0{margin-top:0!important;margin-bottom:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1{margin-top:.25rem!important}.mr-sm-1{margin-right:.25rem!important}.mb-sm-1{margin-bottom:.25rem!important}.ml-sm-1{margin-left:.25rem!important}.mx-sm-1{margin-right:.25rem!important;margin-left:.25rem!important}.my-sm-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2{margin-top:.5rem!important}.mr-sm-2{margin-right:.5rem!important}.mb-sm-2{margin-bottom:.5rem!important}.ml-sm-2{margin-left:.5rem!important}.mx-sm-2{margin-right:.5rem!important;margin-left:.5rem!important}.my-sm-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3{margin-top:1rem!important}.mr-sm-3{margin-right:1rem!important}.mb-sm-3{margin-bottom:1rem!important}.ml-sm-3{margin-left:1rem!important}.mx-sm-3{margin-right:1rem!important;margin-left:1rem!important}.my-sm-3{margin-top:1rem!important;margin-bottom:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4{margin-top:1.5rem!important}.mr-sm-4{margin-right:1.5rem!important}.mb-sm-4{margin-bottom:1.5rem!important}.ml-sm-4{margin-left:1.5rem!important}.mx-sm-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.my-sm-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5{margin-top:3rem!important}.mr-sm-5{margin-right:3rem!important}.mb-sm-5{margin-bottom:3rem!important}.ml-sm-5{margin-left:3rem!important}.mx-sm-5{margin-right:3rem!important;margin-left:3rem!important}.my-sm-5{margin-top:3rem!important;margin-bottom:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0{padding-top:0!important}.pr-sm-0{padding-right:0!important}.pb-sm-0{padding-bottom:0!important}.pl-sm-0{padding-left:0!important}.px-sm-0{padding-right:0!important;padding-left:0!important}.py-sm-0{padding-top:0!important;padding-bottom:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1{padding-top:.25rem!important}.pr-sm-1{padding-right:.25rem!important}.pb-sm-1{padding-bottom:.25rem!important}.pl-sm-1{padding-left:.25rem!important}.px-sm-1{padding-right:.25rem!important;padding-left:.25rem!important}.py-sm-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2{padding-top:.5rem!important}.pr-sm-2{padding-right:.5rem!important}.pb-sm-2{padding-bottom:.5rem!important}.pl-sm-2{padding-left:.5rem!important}.px-sm-2{padding-right:.5rem!important;padding-left:.5rem!important}.py-sm-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3{padding-top:1rem!important}.pr-sm-3{padding-right:1rem!important}.pb-sm-3{padding-bottom:1rem!important}.pl-sm-3{padding-left:1rem!important}.px-sm-3{padding-right:1rem!important;padding-left:1rem!important}.py-sm-3{padding-top:1rem!important;padding-bottom:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4{padding-top:1.5rem!important}.pr-sm-4{padding-right:1.5rem!important}.pb-sm-4{padding-bottom:1.5rem!important}.pl-sm-4{padding-left:1.5rem!important}.px-sm-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.py-sm-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5{padding-top:3rem!important}.pr-sm-5{padding-right:3rem!important}.pb-sm-5{padding-bottom:3rem!important}.pl-sm-5{padding-left:3rem!important}.px-sm-5{padding-right:3rem!important;padding-left:3rem!important}.py-sm-5{padding-top:3rem!important;padding-bottom:3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto{margin-top:auto!important}.mr-sm-auto{margin-right:auto!important}.mb-sm-auto{margin-bottom:auto!important}.ml-sm-auto{margin-left:auto!important}.mx-sm-auto{margin-right:auto!important;margin-left:auto!important}.my-sm-auto{margin-top:auto!important;margin-bottom:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0{margin-top:0!important}.mr-md-0{margin-right:0!important}.mb-md-0{margin-bottom:0!important}.ml-md-0{margin-left:0!important}.mx-md-0{margin-right:0!important;margin-left:0!important}.my-md-0{margin-top:0!important;margin-bottom:0!important}.m-md-1{margin:.25rem!important}.mt-md-1{margin-top:.25rem!important}.mr-md-1{margin-right:.25rem!important}.mb-md-1{margin-bottom:.25rem!important}.ml-md-1{margin-left:.25rem!important}.mx-md-1{margin-right:.25rem!important;margin-left:.25rem!important}.my-md-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2{margin-top:.5rem!important}.mr-md-2{margin-right:.5rem!important}.mb-md-2{margin-bottom:.5rem!important}.ml-md-2{margin-left:.5rem!important}.mx-md-2{margin-right:.5rem!important;margin-left:.5rem!important}.my-md-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3{margin-top:1rem!important}.mr-md-3{margin-right:1rem!important}.mb-md-3{margin-bottom:1rem!important}.ml-md-3{margin-left:1rem!important}.mx-md-3{margin-right:1rem!important;margin-left:1rem!important}.my-md-3{margin-top:1rem!important;margin-bottom:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4{margin-top:1.5rem!important}.mr-md-4{margin-right:1.5rem!important}.mb-md-4{margin-bottom:1.5rem!important}.ml-md-4{margin-left:1.5rem!important}.mx-md-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.my-md-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5{margin-top:3rem!important}.mr-md-5{margin-right:3rem!important}.mb-md-5{margin-bottom:3rem!important}.ml-md-5{margin-left:3rem!important}.mx-md-5{margin-right:3rem!important;margin-left:3rem!important}.my-md-5{margin-top:3rem!important;margin-bottom:3rem!important}.p-md-0{padding:0!important}.pt-md-0{padding-top:0!important}.pr-md-0{padding-right:0!important}.pb-md-0{padding-bottom:0!important}.pl-md-0{padding-left:0!important}.px-md-0{padding-right:0!important;padding-left:0!important}.py-md-0{padding-top:0!important;padding-bottom:0!important}.p-md-1{padding:.25rem!important}.pt-md-1{padding-top:.25rem!important}.pr-md-1{padding-right:.25rem!important}.pb-md-1{padding-bottom:.25rem!important}.pl-md-1{padding-left:.25rem!important}.px-md-1{padding-right:.25rem!important;padding-left:.25rem!important}.py-md-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2{padding-top:.5rem!important}.pr-md-2{padding-right:.5rem!important}.pb-md-2{padding-bottom:.5rem!important}.pl-md-2{padding-left:.5rem!important}.px-md-2{padding-right:.5rem!important;padding-left:.5rem!important}.py-md-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3{padding-top:1rem!important}.pr-md-3{padding-right:1rem!important}.pb-md-3{padding-bottom:1rem!important}.pl-md-3{padding-left:1rem!important}.px-md-3{padding-right:1rem!important;padding-left:1rem!important}.py-md-3{padding-top:1rem!important;padding-bottom:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4{padding-top:1.5rem!important}.pr-md-4{padding-right:1.5rem!important}.pb-md-4{padding-bottom:1.5rem!important}.pl-md-4{padding-left:1.5rem!important}.px-md-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.py-md-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5{padding-top:3rem!important}.pr-md-5{padding-right:3rem!important}.pb-md-5{padding-bottom:3rem!important}.pl-md-5{padding-left:3rem!important}.px-md-5{padding-right:3rem!important;padding-left:3rem!important}.py-md-5{padding-top:3rem!important;padding-bottom:3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto{margin-top:auto!important}.mr-md-auto{margin-right:auto!important}.mb-md-auto{margin-bottom:auto!important}.ml-md-auto{margin-left:auto!important}.mx-md-auto{margin-right:auto!important;margin-left:auto!important}.my-md-auto{margin-top:auto!important;margin-bottom:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0{margin-top:0!important}.mr-lg-0{margin-right:0!important}.mb-lg-0{margin-bottom:0!important}.ml-lg-0{margin-left:0!important}.mx-lg-0{margin-right:0!important;margin-left:0!important}.my-lg-0{margin-top:0!important;margin-bottom:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1{margin-top:.25rem!important}.mr-lg-1{margin-right:.25rem!important}.mb-lg-1{margin-bottom:.25rem!important}.ml-lg-1{margin-left:.25rem!important}.mx-lg-1{margin-right:.25rem!important;margin-left:.25rem!important}.my-lg-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2{margin-top:.5rem!important}.mr-lg-2{margin-right:.5rem!important}.mb-lg-2{margin-bottom:.5rem!important}.ml-lg-2{margin-left:.5rem!important}.mx-lg-2{margin-right:.5rem!important;margin-left:.5rem!important}.my-lg-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3{margin-top:1rem!important}.mr-lg-3{margin-right:1rem!important}.mb-lg-3{margin-bottom:1rem!important}.ml-lg-3{margin-left:1rem!important}.mx-lg-3{margin-right:1rem!important;margin-left:1rem!important}.my-lg-3{margin-top:1rem!important;margin-bottom:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4{margin-top:1.5rem!important}.mr-lg-4{margin-right:1.5rem!important}.mb-lg-4{margin-bottom:1.5rem!important}.ml-lg-4{margin-left:1.5rem!important}.mx-lg-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.my-lg-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5{margin-top:3rem!important}.mr-lg-5{margin-right:3rem!important}.mb-lg-5{margin-bottom:3rem!important}.ml-lg-5{margin-left:3rem!important}.mx-lg-5{margin-right:3rem!important;margin-left:3rem!important}.my-lg-5{margin-top:3rem!important;margin-bottom:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0{padding-top:0!important}.pr-lg-0{padding-right:0!important}.pb-lg-0{padding-bottom:0!important}.pl-lg-0{padding-left:0!important}.px-lg-0{padding-right:0!important;padding-left:0!important}.py-lg-0{padding-top:0!important;padding-bottom:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1{padding-top:.25rem!important}.pr-lg-1{padding-right:.25rem!important}.pb-lg-1{padding-bottom:.25rem!important}.pl-lg-1{padding-left:.25rem!important}.px-lg-1{padding-right:.25rem!important;padding-left:.25rem!important}.py-lg-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2{padding-top:.5rem!important}.pr-lg-2{padding-right:.5rem!important}.pb-lg-2{padding-bottom:.5rem!important}.pl-lg-2{padding-left:.5rem!important}.px-lg-2{padding-right:.5rem!important;padding-left:.5rem!important}.py-lg-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3{padding-top:1rem!important}.pr-lg-3{padding-right:1rem!important}.pb-lg-3{padding-bottom:1rem!important}.pl-lg-3{padding-left:1rem!important}.px-lg-3{padding-right:1rem!important;padding-left:1rem!important}.py-lg-3{padding-top:1rem!important;padding-bottom:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4{padding-top:1.5rem!important}.pr-lg-4{padding-right:1.5rem!important}.pb-lg-4{padding-bottom:1.5rem!important}.pl-lg-4{padding-left:1.5rem!important}.px-lg-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.py-lg-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5{padding-top:3rem!important}.pr-lg-5{padding-right:3rem!important}.pb-lg-5{padding-bottom:3rem!important}.pl-lg-5{padding-left:3rem!important}.px-lg-5{padding-right:3rem!important;padding-left:3rem!important}.py-lg-5{padding-top:3rem!important;padding-bottom:3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto{margin-top:auto!important}.mr-lg-auto{margin-right:auto!important}.mb-lg-auto{margin-bottom:auto!important}.ml-lg-auto{margin-left:auto!important}.mx-lg-auto{margin-right:auto!important;margin-left:auto!important}.my-lg-auto{margin-top:auto!important;margin-bottom:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0{margin-top:0!important}.mr-xl-0{margin-right:0!important}.mb-xl-0{margin-bottom:0!important}.ml-xl-0{margin-left:0!important}.mx-xl-0{margin-right:0!important;margin-left:0!important}.my-xl-0{margin-top:0!important;margin-bottom:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1{margin-top:.25rem!important}.mr-xl-1{margin-right:.25rem!important}.mb-xl-1{margin-bottom:.25rem!important}.ml-xl-1{margin-left:.25rem!important}.mx-xl-1{margin-right:.25rem!important;margin-left:.25rem!important}.my-xl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2{margin-top:.5rem!important}.mr-xl-2{margin-right:.5rem!important}.mb-xl-2{margin-bottom:.5rem!important}.ml-xl-2{margin-left:.5rem!important}.mx-xl-2{margin-right:.5rem!important;margin-left:.5rem!important}.my-xl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3{margin-top:1rem!important}.mr-xl-3{margin-right:1rem!important}.mb-xl-3{margin-bottom:1rem!important}.ml-xl-3{margin-left:1rem!important}.mx-xl-3{margin-right:1rem!important;margin-left:1rem!important}.my-xl-3{margin-top:1rem!important;margin-bottom:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4{margin-top:1.5rem!important}.mr-xl-4{margin-right:1.5rem!important}.mb-xl-4{margin-bottom:1.5rem!important}.ml-xl-4{margin-left:1.5rem!important}.mx-xl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.my-xl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5{margin-top:3rem!important}.mr-xl-5{margin-right:3rem!important}.mb-xl-5{margin-bottom:3rem!important}.ml-xl-5{margin-left:3rem!important}.mx-xl-5{margin-right:3rem!important;margin-left:3rem!important}.my-xl-5{margin-top:3rem!important;margin-bottom:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0{padding-top:0!important}.pr-xl-0{padding-right:0!important}.pb-xl-0{padding-bottom:0!important}.pl-xl-0{padding-left:0!important}.px-xl-0{padding-right:0!important;padding-left:0!important}.py-xl-0{padding-top:0!important;padding-bottom:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1{padding-top:.25rem!important}.pr-xl-1{padding-right:.25rem!important}.pb-xl-1{padding-bottom:.25rem!important}.pl-xl-1{padding-left:.25rem!important}.px-xl-1{padding-right:.25rem!important;padding-left:.25rem!important}.py-xl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2{padding-top:.5rem!important}.pr-xl-2{padding-right:.5rem!important}.pb-xl-2{padding-bottom:.5rem!important}.pl-xl-2{padding-left:.5rem!important}.px-xl-2{padding-right:.5rem!important;padding-left:.5rem!important}.py-xl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3{padding-top:1rem!important}.pr-xl-3{padding-right:1rem!important}.pb-xl-3{padding-bottom:1rem!important}.pl-xl-3{padding-left:1rem!important}.px-xl-3{padding-right:1rem!important;padding-left:1rem!important}.py-xl-3{padding-top:1rem!important;padding-bottom:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4{padding-top:1.5rem!important}.pr-xl-4{padding-right:1.5rem!important}.pb-xl-4{padding-bottom:1.5rem!important}.pl-xl-4{padding-left:1.5rem!important}.px-xl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.py-xl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5{padding-top:3rem!important}.pr-xl-5{padding-right:3rem!important}.pb-xl-5{padding-bottom:3rem!important}.pl-xl-5{padding-left:3rem!important}.px-xl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xl-5{padding-top:3rem!important;padding-bottom:3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto{margin-top:auto!important}.mr-xl-auto{margin-right:auto!important}.mb-xl-auto{margin-bottom:auto!important}.ml-xl-auto{margin-left:auto!important}.mx-xl-auto{margin-right:auto!important;margin-left:auto!important}.my-xl-auto{margin-top:auto!important;margin-bottom:auto!important}}.text-justify{text-align:justify!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-normal{font-weight:400}.font-weight-bold{font-weight:700}.font-italic{font-style:italic}.text-white{color:#fff!important}.text-primary{color:#1997c6!important}a.text-primary:focus,a.text-primary:hover{color:#137499!important}.text-success{color:#1bc98e!important}a.text-success:focus,a.text-success:hover{color:#159c6e!important}.text-info{color:#9f86ff!important}a.text-info:focus,a.text-info:hover{color:#7753ff!important}.text-warning{color:#e4d836!important}a.text-warning:focus,a.text-warning:hover{color:#ccbf1b!important}.text-danger{color:#e64759!important}a.text-danger:focus,a.text-danger:hover{color:#dc1e33!important}.text-dark{color:#1a1c22!important}a.text-dark:focus,a.text-dark:hover{color:#040405!important}.text-muted{color:#999!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.visible{visibility:visible!important}.invisible{visibility:hidden!important}body{font-weight:300;letter-spacing:0}button,input,optgroup,select,textarea{font-family:inherit}.lead{font-size:1.035rem;font-weight:inherit;line-height:1.4;letter-spacing:0}@media (min-width:576px){.lead{font-size:1.35rem}}.list-spaced li{margin-bottom:5px}.list-bordered li{border-top:1px solid #adb5bd}.list-bordered li:last-child{border-bottom:1px solid #adb5bd}.text-serif{font-family:Georgia,\"Times New Roman\",Times,serif}.text-xs-left{text-align:left}.text-xs-right{text-align:right}.text-xs-center{text-align:center}@media (min-width:576px){.text-sm-left{text-align:left}.text-sm-right{text-align:right}.text-sm-center{text-align:center}}@media (min-width:768px){.text-md-left{text-align:left}.text-md-right{text-align:right}.text-md-center{text-align:center}}@media (min-width:992px){.text-lg-left{text-align:left}.text-lg-right{text-align:right}.text-lg-center{text-align:center}}.alert-dark{color:#fff;background-color:rgba(0,0,0,.9);border-color:rgba(0,0,0,.8)}.alert-dark hr{border-top-color:rgba(0,0,0,.8)}.alert-dark .alert-link{color:#e6e6e6}.alert-dark .close{text-shadow:0 1px 0 #000}.alert-dark .close:focus,.alert-dark .close:hover{color:#fff}.alert-full{border-radius:0}.btn{text-transform:none;letter-spacing:normal}.btn-borderless{border:0}.btn-xs{padding:.25rem .5rem;font-size:.75rem;line-height:1.5;border-radius:.2rem}.btn-more:after{position:relative;top:1px;content:'\\3009';display:inline-block;padding-left:.3em;color:inherit}.btn-toolbar .btn-toolbar-item{float:left}.btn-toolbar>.btn-toolbar-item{margin-left:5px}.btn-toolbar-divider{float:left;width:1px;height:34px;margin-left:10px;margin-right:5px;background-color:#eee}.btn-group-justified.btn-group-justified-spaced{width:calc(100% + 10px);margin-left:-5px;border-spacing:5px}.nav>.nav-header{padding-left:15px;padding-right:15px;margin-bottom:5px;font-size:85%;font-weight:400;letter-spacing:1px;color:#a2a9b1;text-transform:uppercase}.nav>li+.nav-header{margin-top:20px}.nav-bordered>.nav-item{float:left}.nav-bordered>.nav-item>.nav-link{display:inline-block;padding:10px 0;font-weight:300;color:#777;border-bottom:4px solid transparent}.nav-bordered>.nav-item>.nav-link:focus,.nav-bordered>.nav-item>.nav-link:hover{color:#1997c6;background-color:transparent}.nav-bordered>.nav-item>.nav-link.active,.nav-bordered>.nav-item>.nav-link.active:focus,.nav-bordered>.nav-item>.nav-link.active:hover{font-weight:500;color:#777;border-bottom-color:#1997c6}.nav-bordered>.nav-item+.nav-item{margin-left:30px}.nav-bordered.nav-justified>.nav-item+.nav-item{margin-left:0}.nav-bordered.nav-justified>.nav-item>.nav-link{margin-bottom:0}.nav-bordered.nav-stacked>.nav-item{float:none;margin-left:0}.nav-bordered.nav-stacked>.nav-item+.nav-item{margin-top:0}.nav-bordered.nav-stacked>.nav-item>.nav-link{display:block;padding:5px 10px 5px 30px;border-bottom:0;border-left:4px solid transparent}.nav-bordered.nav-stacked>.nav-item>.nav-link:focus,.nav-bordered.nav-stacked>.nav-item>.nav-link:hover{border-left:4px solid;text-decoration:none}.nav-bordered.nav-stacked>.nav-item>.nav-link.active,.nav-bordered.nav-stacked>.nav-item>.nav-link.active:focus,.nav-bordered.nav-stacked>.nav-item>.nav-link.active:hover{border-left-color:#1997c6}.nav-bordered.nav-stacked .nav-header{padding-left:34px}.nav-bordered.nav-stacked .nav-divider{height:0;margin:10px 0;overflow:hidden;border-top:1px solid rgba(255,255,255,.2);margin-left:34px;margin-top:20px;margin-bottom:25px}.navbar>.container-fluid{margin-left:-1rem;margin-right:-1rem}.with-top-navbar{padding-top:49px}.navbar-nav>li>a>.badge{margin-left:5px}.navbar-brand>img{vertical-align:text-top}.navbar-brand-icon{float:left;margin-right:5px}.navbar-default .navbar-brand-emphasized,.navbar-default .navbar-brand-emphasized:focus,.navbar-default .navbar-brand-emphasized:hover{background-color:transparent}.navbar-dark .navbar-brand-emphasized,.navbar-dark .navbar-brand-emphasized:focus,.navbar-dark .navbar-brand-emphasized:hover{color:#fff;background-color:#212529}.navbar-padded .navbar-header{padding-left:5px;padding-right:5px}@media (min-width:576px){.navbar-padded{padding-top:20px;padding-bottom:20px}}.navbar-form-control{border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-dark .navbar-form-control{background-color:#31373d}.navbar-dark .navbar-form-control:focus{color:#212529;background-color:#fff;-webkit-box-shadow:0 0 6px rgba(255,255,255,.5);box-shadow:0 0 6px rgba(255,255,255,.5)}.navbar-nav>.active>a,.navbar-nav>.active>a:focus,.navbar-nav>.active>a:hover{font-weight:500}.navbar-btn-avatar,.navbar-btn-avatar:active,.navbar-btn-avatar:active:focus,.navbar-btn-avatar:focus,.navbar-btn-avatar:hover,.navbar-btn-avatar:hover:active{padding:0;border:0;background:0 0;outline:0!important;-webkit-box-shadow:none!important;box-shadow:none!important}.navbar-btn-avatar img{height:35px;width:35px}.navbar-header::after{display:block;clear:both;content:\"\"}@media (min-width:768px){.navbar-header{float:left}}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{font-weight:500}.list-group-header{display:block;padding:1rem 1.25rem;margin-bottom:-1px;font-weight:400;color:inherit;background-color:transparent;border:1px solid rgba(0,0,0,.125)}.list-group-header:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.list-group-header:last-child{margin-bottom:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.list-group-progress{position:absolute;top:0;bottom:0;left:0;z-index:-1;display:block;background-color:#f7f7f7}.modal-body-scroller{max-height:500px;overflow:auto;border-radius:.3rem}.modal-body+.modal-body{border-top:1px solid #e9ecef}.modal-actions::after{display:block;clear:both;content:\"\"}.modal-action{float:left;width:50%;padding:15px;border:solid #e9ecef;border-width:1px 0 0}.modal-action+.modal-action{border-left-width:1px}.modal-action:first-child{border-bottom-left-radius:-.7rem}.modal-action:last-child{border-bottom-right-radius:-.7rem}.modal-action:active,.modal-action:focus,.modal-action:hover{text-decoration:none;background-color:#f5f5f5;border-color:#e9ecef}@media (min-width:576px){.table-full{margin-right:-11px;margin-left:-11px}}.table-actions{padding-bottom:15px}.container-fill-height{display:table;width:100%;height:100vh}.container-fill-height .container-content-bottom,.container-fill-height .container-content-middle{display:table-cell;vertical-align:middle}.container-fill-height .container-content-bottom{vertical-align:bottom}@media (min-width:576px){.container-fluid-spacious{padding-right:40px;padding-left:40px}}.pos-r{position:relative!important}.pos-a{position:absolute!important}.pos-f{position:fixed!important}.w-1{width:25%!important}.w-2{width:50%!important}.w-3{width:75%!important}.w-full{width:100%!important}body{font-weight:300;letter-spacing:0}button,input,optgroup,select,textarea{font-family:inherit}.lead{font-size:1.035rem;font-weight:inherit;line-height:1.4;letter-spacing:0}@media (min-width:576px){.lead{font-size:1.35rem}}.list-spaced li{margin-bottom:5px}.list-bordered li{border-top:1px solid #adb5bd}.list-bordered li:last-child{border-bottom:1px solid #adb5bd}.text-serif{font-family:Georgia,\"Times New Roman\",Times,serif}.text-xs-left{text-align:left}.text-xs-right{text-align:right}.text-xs-center{text-align:center}@media (min-width:576px){.text-sm-left{text-align:left}.text-sm-right{text-align:right}.text-sm-center{text-align:center}}@media (min-width:768px){.text-md-left{text-align:left}.text-md-right{text-align:right}.text-md-center{text-align:center}}@media (min-width:992px){.text-lg-left{text-align:left}.text-lg-right{text-align:right}.text-lg-center{text-align:center}}@font-face{font-family:toolkit-entypo;src:url(" + escape(__webpack_require__(0)) + ");src:url(" + escape(__webpack_require__(0)) + "?#iefix) format(\"eot\"),url(" + escape(__webpack_require__(3)) + ") format(\"woff2\"),url(" + escape(__webpack_require__(2)) + ") format(\"woff\"),url(" + escape(__webpack_require__(1)) + ") format(\"truetype\");font-weight:400;font-style:normal}.icon:before{position:relative;top:2px;display:inline-block;font-family:toolkit-entypo;speak:none;font-size:100%;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.carousel .icon-chevron-thin-left,.carousel .icon-chevron-thin-right{position:absolute;top:50%;margin-top:-10px;z-index:5;display:inline-block}.carousel .icon-chevron-thin-left{left:50%;margin-left:-10px}.carousel .icon-chevron-thin-right{right:50%;margin-right:-10px}.icon-500px-with-circle:before{content:\"\\EA01\"}.icon-500px:before{content:\"\\EA02\"}.icon-add-to-list:before{content:\"\\EA03\"}.icon-add-user:before{content:\"\\EA04\"}.icon-address:before{content:\"\\EA05\"}.icon-adjust:before{content:\"\\EA06\"}.icon-air:before{content:\"\\EA07\"}.icon-aircraft-landing:before{content:\"\\EA08\"}.icon-aircraft-take-off:before{content:\"\\EA09\"}.icon-aircraft:before{content:\"\\EA0A\"}.icon-align-bottom:before{content:\"\\EA0B\"}.icon-align-horizontal-middle:before{content:\"\\EA0C\"}.icon-align-left:before{content:\"\\EA0D\"}.icon-align-right:before{content:\"\\EA0E\"}.icon-align-top:before{content:\"\\EA0F\"}.icon-align-vertical-middle:before{content:\"\\EA10\"}.icon-app-store:before{content:\"\\EA11\"}.icon-archive:before{content:\"\\EA12\"}.icon-area-graph:before{content:\"\\EA13\"}.icon-arrow-bold-down:before{content:\"\\EA14\"}.icon-arrow-bold-left:before{content:\"\\EA15\"}.icon-arrow-bold-right:before{content:\"\\EA16\"}.icon-arrow-bold-up:before{content:\"\\EA17\"}.icon-arrow-down:before{content:\"\\EA18\"}.icon-arrow-left:before{content:\"\\EA19\"}.icon-arrow-long-down:before{content:\"\\EA1A\"}.icon-arrow-long-left:before{content:\"\\EA1B\"}.icon-arrow-long-right:before{content:\"\\EA1C\"}.icon-arrow-long-up:before{content:\"\\EA1D\"}.icon-arrow-right:before{content:\"\\EA1E\"}.icon-arrow-up:before{content:\"\\EA1F\"}.icon-arrow-with-circle-down:before{content:\"\\EA20\"}.icon-arrow-with-circle-left:before{content:\"\\EA21\"}.icon-arrow-with-circle-right:before{content:\"\\EA22\"}.icon-arrow-with-circle-up:before{content:\"\\EA23\"}.icon-attachment:before{content:\"\\EA24\"}.icon-awareness-ribbon:before{content:\"\\EA25\"}.icon-back-in-time:before{content:\"\\EA26\"}.icon-back:before{content:\"\\EA27\"}.icon-baidu:before{content:\"\\EA28\"}.icon-bar-graph:before{content:\"\\EA29\"}.icon-basecamp:before{content:\"\\EA2A\"}.icon-battery:before{content:\"\\EA2B\"}.icon-beamed-note:before{content:\"\\EA2C\"}.icon-behance:before{content:\"\\EA2D\"}.icon-bell:before{content:\"\\EA2E\"}.icon-blackboard:before{content:\"\\EA2F\"}.icon-block:before{content:\"\\EA30\"}.icon-book:before{content:\"\\EA31\"}.icon-bookmark:before{content:\"\\EA32\"}.icon-bookmarks:before{content:\"\\EA33\"}.icon-bowl:before{content:\"\\EA34\"}.icon-box:before{content:\"\\EA35\"}.icon-briefcase:before{content:\"\\EA36\"}.icon-browser:before{content:\"\\EA37\"}.icon-brush:before{content:\"\\EA38\"}.icon-bucket:before{content:\"\\EA39\"}.icon-bug:before{content:\"\\EA3A\"}.icon-cake:before{content:\"\\EA3B\"}.icon-calculator:before{content:\"\\EA3C\"}.icon-calendar:before{content:\"\\EA3D\"}.icon-camera:before{content:\"\\EA3E\"}.icon-ccw:before{content:\"\\EA3F\"}.icon-chat:before{content:\"\\EA40\"}.icon-check:before{content:\"\\EA41\"}.icon-chevron-down:before{content:\"\\EA42\"}.icon-chevron-left:before{content:\"\\EA43\"}.icon-chevron-right:before{content:\"\\EA44\"}.icon-chevron-small-down:before{content:\"\\EA45\"}.icon-chevron-small-left:before{content:\"\\EA46\"}.icon-chevron-small-right:before{content:\"\\EA47\"}.icon-chevron-small-up:before{content:\"\\EA48\"}.icon-chevron-thin-down:before{content:\"\\EA49\"}.icon-chevron-thin-left:before{content:\"\\EA4A\"}.icon-chevron-thin-right:before{content:\"\\EA4B\"}.icon-chevron-thin-up:before{content:\"\\EA4C\"}.icon-chevron-up:before{content:\"\\EA4D\"}.icon-chevron-with-circle-down:before{content:\"\\EA4E\"}.icon-chevron-with-circle-left:before{content:\"\\EA4F\"}.icon-chevron-with-circle-right:before{content:\"\\EA50\"}.icon-chevron-with-circle-up:before{content:\"\\EA51\"}.icon-circle-with-cross:before{content:\"\\EA52\"}.icon-circle-with-minus:before{content:\"\\EA53\"}.icon-circle-with-plus:before{content:\"\\EA54\"}.icon-circle:before{content:\"\\EA55\"}.icon-circular-graph:before{content:\"\\EA56\"}.icon-clapperboard:before{content:\"\\EA57\"}.icon-classic-computer:before{content:\"\\EA58\"}.icon-clipboard:before{content:\"\\EA59\"}.icon-clock:before{content:\"\\EA5A\"}.icon-cloud:before{content:\"\\EA5B\"}.icon-code:before{content:\"\\EA5C\"}.icon-cog:before{content:\"\\EA5D\"}.icon-colours:before{content:\"\\EA5E\"}.icon-compass:before{content:\"\\EA5F\"}.icon-controller-fast-backward:before{content:\"\\EA60\"}.icon-controller-fast-forward:before{content:\"\\EA61\"}.icon-controller-jump-to-start:before{content:\"\\EA62\"}.icon-controller-next:before{content:\"\\EA63\"}.icon-controller-paus:before{content:\"\\EA64\"}.icon-controller-play:before{content:\"\\EA65\"}.icon-controller-record:before{content:\"\\EA66\"}.icon-controller-stop:before{content:\"\\EA67\"}.icon-controller-volume:before{content:\"\\EA68\"}.icon-copy:before{content:\"\\EA69\"}.icon-creative-cloud:before{content:\"\\EA6A\"}.icon-creative-commons-attribution:before{content:\"\\EA6B\"}.icon-creative-commons-noderivs:before{content:\"\\EA6C\"}.icon-creative-commons-noncommercial-eu:before{content:\"\\EA6D\"}.icon-creative-commons-noncommercial-us:before{content:\"\\EA6E\"}.icon-creative-commons-public-domain:before{content:\"\\EA6F\"}.icon-creative-commons-remix:before{content:\"\\EA70\"}.icon-creative-commons-share:before{content:\"\\EA71\"}.icon-creative-commons-sharealike:before{content:\"\\EA72\"}.icon-creative-commons:before{content:\"\\EA73\"}.icon-credit-card:before{content:\"\\EA74\"}.icon-credit:before{content:\"\\EA75\"}.icon-crop:before{content:\"\\EA76\"}.icon-cross:before{content:\"\\EA77\"}.icon-cup:before{content:\"\\EA78\"}.icon-cw:before{content:\"\\EA79\"}.icon-cycle:before{content:\"\\EA7A\"}.icon-database:before{content:\"\\EA7B\"}.icon-dial-pad:before{content:\"\\EA7C\"}.icon-direction:before{content:\"\\EA7D\"}.icon-document-landscape:before{content:\"\\EA7E\"}.icon-document:before{content:\"\\EA7F\"}.icon-documents:before{content:\"\\EA80\"}.icon-dot-single:before{content:\"\\EA81\"}.icon-dots-three-horizontal:before{content:\"\\EA82\"}.icon-dots-three-vertical:before{content:\"\\EA83\"}.icon-dots-two-horizontal:before{content:\"\\EA84\"}.icon-dots-two-vertical:before{content:\"\\EA85\"}.icon-download:before{content:\"\\EA86\"}.icon-dribbble-with-circle:before{content:\"\\EA87\"}.icon-dribbble:before{content:\"\\EA88\"}.icon-drink:before{content:\"\\EA89\"}.icon-drive:before{content:\"\\EA8A\"}.icon-drop:before{content:\"\\EA8B\"}.icon-dropbox:before{content:\"\\EA8C\"}.icon-edit:before{content:\"\\EA8D\"}.icon-email:before{content:\"\\EA8E\"}.icon-emoji-flirt:before{content:\"\\EA8F\"}.icon-emoji-happy:before{content:\"\\EA90\"}.icon-emoji-neutral:before{content:\"\\EA91\"}.icon-emoji-sad:before{content:\"\\EA92\"}.icon-erase:before{content:\"\\EA93\"}.icon-eraser:before{content:\"\\EA94\"}.icon-evernote:before{content:\"\\EA95\"}.icon-export:before{content:\"\\EA96\"}.icon-eye-with-line:before{content:\"\\EA97\"}.icon-eye:before{content:\"\\EA98\"}.icon-facebook-with-circle:before{content:\"\\EA99\"}.icon-facebook:before{content:\"\\EA9A\"}.icon-feather:before{content:\"\\EA9B\"}.icon-fingerprint:before{content:\"\\EA9C\"}.icon-flag:before{content:\"\\EA9D\"}.icon-flash:before{content:\"\\EA9E\"}.icon-flashlight:before{content:\"\\EA9F\"}.icon-flat-brush:before{content:\"\\EAA0\"}.icon-flattr:before{content:\"\\EAA1\"}.icon-flickr-with-circle:before{content:\"\\EAA2\"}.icon-flickr:before{content:\"\\EAA3\"}.icon-flow-branch:before{content:\"\\EAA4\"}.icon-flow-cascade:before{content:\"\\EAA5\"}.icon-flow-line:before{content:\"\\EAA6\"}.icon-flow-parallel:before{content:\"\\EAA7\"}.icon-flow-tree:before{content:\"\\EAA8\"}.icon-flower:before{content:\"\\EAA9\"}.icon-folder-images:before{content:\"\\EAAA\"}.icon-folder-music:before{content:\"\\EAAB\"}.icon-folder-video:before{content:\"\\EAAC\"}.icon-folder:before{content:\"\\EAAD\"}.icon-forward:before{content:\"\\EAAE\"}.icon-foursquare:before{content:\"\\EAAF\"}.icon-funnel:before{content:\"\\EAB0\"}.icon-game-controller:before{content:\"\\EAB1\"}.icon-gauge:before{content:\"\\EAB2\"}.icon-github-with-circle:before{content:\"\\EAB3\"}.icon-github:before{content:\"\\EAB4\"}.icon-globe:before{content:\"\\EAB5\"}.icon-google-plus-with-circle:before{content:\"\\EAB6\"}.icon-google-plus:before{content:\"\\EAB7\"}.icon-google-drive:before{content:\"\\EAB8\"}.icon-google-hangouts:before{content:\"\\EAB9\"}.icon-google-play:before{content:\"\\EABA\"}.icon-graduation-cap:before{content:\"\\EABB\"}.icon-grid:before{content:\"\\EABC\"}.icon-grooveshark:before{content:\"\\EABD\"}.icon-hair-cross:before{content:\"\\EABE\"}.icon-hand:before{content:\"\\EABF\"}.icon-heart-outlined:before{content:\"\\EAC0\"}.icon-heart:before{content:\"\\EAC1\"}.icon-help-with-circle:before{content:\"\\EAC2\"}.icon-help:before{content:\"\\EAC3\"}.icon-home:before{content:\"\\EAC4\"}.icon-hour-glass:before{content:\"\\EAC5\"}.icon-houzz:before{content:\"\\EAC6\"}.icon-icloud:before{content:\"\\EAC7\"}.icon-image-inverted:before{content:\"\\EAC8\"}.icon-image:before{content:\"\\EAC9\"}.icon-images:before{content:\"\\EACA\"}.icon-inbox:before{content:\"\\EACB\"}.icon-infinity:before{content:\"\\EACC\"}.icon-info-with-circle:before{content:\"\\EACD\"}.icon-info:before{content:\"\\EACE\"}.icon-instagram-with-circle:before{content:\"\\EACF\"}.icon-instagram:before{content:\"\\EAD0\"}.icon-install:before{content:\"\\EAD1\"}.icon-key:before{content:\"\\EAD2\"}.icon-keyboard:before{content:\"\\EAD3\"}.icon-lab-flask:before{content:\"\\EAD4\"}.icon-landline:before{content:\"\\EAD5\"}.icon-language:before{content:\"\\EAD6\"}.icon-laptop:before{content:\"\\EAD7\"}.icon-lastfm-with-circle:before{content:\"\\EAD8\"}.icon-lastfm:before{content:\"\\EAD9\"}.icon-layers:before{content:\"\\EADA\"}.icon-leaf:before{content:\"\\EADB\"}.icon-level-down:before{content:\"\\EADC\"}.icon-level-up:before{content:\"\\EADD\"}.icon-lifebuoy:before{content:\"\\EADE\"}.icon-light-bulb:before{content:\"\\EADF\"}.icon-light-down:before{content:\"\\EAE0\"}.icon-light-up:before{content:\"\\EAE1\"}.icon-line-graph:before{content:\"\\EAE2\"}.icon-link:before{content:\"\\EAE3\"}.icon-linkedin-with-circle:before{content:\"\\EAE4\"}.icon-linkedin:before{content:\"\\EAE5\"}.icon-list:before{content:\"\\EAE6\"}.icon-location-pin:before{content:\"\\EAE7\"}.icon-location:before{content:\"\\EAE8\"}.icon-lock-open:before{content:\"\\EAE9\"}.icon-lock:before{content:\"\\EAEA\"}.icon-log-out:before{content:\"\\EAEB\"}.icon-login:before{content:\"\\EAEC\"}.icon-loop:before{content:\"\\EAED\"}.icon-magnet:before{content:\"\\EAEE\"}.icon-magnifying-glass:before{content:\"\\EAEF\"}.icon-mail-with-circle:before{content:\"\\EAF0\"}.icon-mail:before{content:\"\\EAF1\"}.icon-man:before{content:\"\\EAF2\"}.icon-map:before{content:\"\\EAF3\"}.icon-mask:before{content:\"\\EAF4\"}.icon-medal:before{content:\"\\EAF5\"}.icon-medium-with-circle:before{content:\"\\EAF6\"}.icon-medium:before{content:\"\\EAF7\"}.icon-megaphone:before{content:\"\\EAF8\"}.icon-menu-white:before{content:\"\\EAF9\"}.icon-menu:before{content:\"\\EAFA\"}.icon-merge:before{content:\"\\EAFB\"}.icon-message:before{content:\"\\EAFC\"}.icon-mic:before{content:\"\\EAFD\"}.icon-minus:before{content:\"\\EAFE\"}.icon-mixi:before{content:\"\\EAFF\"}.icon-mobile:before{content:\"\\EB00\"}.icon-modern-mic:before{content:\"\\EB01\"}.icon-moon:before{content:\"\\EB02\"}.icon-mouse-pointer:before{content:\"\\EB03\"}.icon-mouse:before{content:\"\\EB04\"}.icon-music:before{content:\"\\EB05\"}.icon-network:before{content:\"\\EB06\"}.icon-new-message:before{content:\"\\EB07\"}.icon-new:before{content:\"\\EB08\"}.icon-news:before{content:\"\\EB09\"}.icon-newsletter:before{content:\"\\EB0A\"}.icon-note:before{content:\"\\EB0B\"}.icon-notification:before{content:\"\\EB0C\"}.icon-notifications-off:before{content:\"\\EB0D\"}.icon-old-mobile:before{content:\"\\EB0E\"}.icon-old-phone:before{content:\"\\EB0F\"}.icon-onedrive:before{content:\"\\EB10\"}.icon-open-book:before{content:\"\\EB11\"}.icon-palette:before{content:\"\\EB12\"}.icon-paper-plane:before{content:\"\\EB13\"}.icon-paypal:before{content:\"\\EB14\"}.icon-pencil:before{content:\"\\EB15\"}.icon-phone:before{content:\"\\EB16\"}.icon-picasa:before{content:\"\\EB17\"}.icon-pie-chart:before{content:\"\\EB18\"}.icon-pin:before{content:\"\\EB19\"}.icon-pinterest-with-circle:before{content:\"\\EB1A\"}.icon-pinterest:before{content:\"\\EB1B\"}.icon-plus:before{content:\"\\EB1C\"}.icon-popup:before{content:\"\\EB1D\"}.icon-power-plug:before{content:\"\\EB1E\"}.icon-price-ribbon:before{content:\"\\EB1F\"}.icon-price-tag:before{content:\"\\EB20\"}.icon-print:before{content:\"\\EB21\"}.icon-progress-empty:before{content:\"\\EB22\"}.icon-progress-full:before{content:\"\\EB23\"}.icon-progress-one:before{content:\"\\EB24\"}.icon-progress-two:before{content:\"\\EB25\"}.icon-publish:before{content:\"\\EB26\"}.icon-qq-with-circle:before{content:\"\\EB27\"}.icon-qq:before{content:\"\\EB28\"}.icon-quote:before{content:\"\\EB29\"}.icon-radio:before{content:\"\\EB2A\"}.icon-raft-with-circle:before{content:\"\\EB2B\"}.icon-raft:before{content:\"\\EB2C\"}.icon-rainbow:before{content:\"\\EB2D\"}.icon-rdio-with-circle:before{content:\"\\EB2E\"}.icon-rdio:before{content:\"\\EB2F\"}.icon-remove-user:before{content:\"\\EB30\"}.icon-renren:before{content:\"\\EB31\"}.icon-reply-all:before{content:\"\\EB32\"}.icon-reply:before{content:\"\\EB33\"}.icon-resize-100:before{content:\"\\EB34\"}.icon-resize-full-screen:before{content:\"\\EB35\"}.icon-retweet:before{content:\"\\EB36\"}.icon-rocket:before{content:\"\\EB37\"}.icon-round-brush:before{content:\"\\EB38\"}.icon-rss:before{content:\"\\EB39\"}.icon-ruler:before{content:\"\\EB3A\"}.icon-save:before{content:\"\\EB3B\"}.icon-scissors:before{content:\"\\EB3C\"}.icon-scribd:before{content:\"\\EB3D\"}.icon-select-arrows:before{content:\"\\EB3E\"}.icon-share-alternative:before{content:\"\\EB3F\"}.icon-share-alternitive:before{content:\"\\EB40\"}.icon-share:before{content:\"\\EB41\"}.icon-shareable:before{content:\"\\EB42\"}.icon-shield:before{content:\"\\EB43\"}.icon-shop:before{content:\"\\EB44\"}.icon-shopping-bag:before{content:\"\\EB45\"}.icon-shopping-basket:before{content:\"\\EB46\"}.icon-shopping-cart:before{content:\"\\EB47\"}.icon-shuffle:before{content:\"\\EB48\"}.icon-signal:before{content:\"\\EB49\"}.icon-sina-weibo:before{content:\"\\EB4A\"}.icon-skype-with-circle:before{content:\"\\EB4B\"}.icon-skype:before{content:\"\\EB4C\"}.icon-slideshare:before{content:\"\\EB4D\"}.icon-smashing:before{content:\"\\EB4E\"}.icon-sound-mix:before{content:\"\\EB4F\"}.icon-sound-mute:before{content:\"\\EB50\"}.icon-sound:before{content:\"\\EB51\"}.icon-soundcloud:before{content:\"\\EB52\"}.icon-sports-club:before{content:\"\\EB53\"}.icon-spotify-with-circle:before{content:\"\\EB54\"}.icon-spotify:before{content:\"\\EB55\"}.icon-spreadsheet:before{content:\"\\EB56\"}.icon-squared-cross:before{content:\"\\EB57\"}.icon-squared-minus:before{content:\"\\EB58\"}.icon-squared-plus:before{content:\"\\EB59\"}.icon-star-outlined:before{content:\"\\EB5A\"}.icon-star:before{content:\"\\EB5B\"}.icon-stopwatch:before{content:\"\\EB5C\"}.icon-stumbleupon-with-circle:before{content:\"\\EB5D\"}.icon-stumbleupon:before{content:\"\\EB5E\"}.icon-suitcase:before{content:\"\\EB5F\"}.icon-swap:before{content:\"\\EB60\"}.icon-swarm:before{content:\"\\EB61\"}.icon-sweden:before{content:\"\\EB62\"}.icon-switch:before{content:\"\\EB63\"}.icon-tablet-mobile-combo:before{content:\"\\EB64\"}.icon-tablet:before{content:\"\\EB65\"}.icon-tag:before{content:\"\\EB66\"}.icon-text-document-inverted:before{content:\"\\EB67\"}.icon-text-document:before{content:\"\\EB68\"}.icon-text:before{content:\"\\EB69\"}.icon-thermometer:before{content:\"\\EB6A\"}.icon-thumbs-down:before{content:\"\\EB6B\"}.icon-thumbs-up:before{content:\"\\EB6C\"}.icon-thunder-cloud:before{content:\"\\EB6D\"}.icon-ticket:before{content:\"\\EB6E\"}.icon-time-slot:before{content:\"\\EB6F\"}.icon-tools:before{content:\"\\EB70\"}.icon-traffic-cone:before{content:\"\\EB71\"}.icon-trash:before{content:\"\\EB72\"}.icon-tree:before{content:\"\\EB73\"}.icon-triangle-down:before{content:\"\\EB74\"}.icon-triangle-left:before{content:\"\\EB75\"}.icon-triangle-right:before{content:\"\\EB76\"}.icon-triangle-up:before{content:\"\\EB77\"}.icon-tripadvisor:before{content:\"\\EB78\"}.icon-trophy:before{content:\"\\EB79\"}.icon-tumblr-with-circle:before{content:\"\\EB7A\"}.icon-tumblr:before{content:\"\\EB7B\"}.icon-tv:before{content:\"\\EB7C\"}.icon-twitter-with-circle:before{content:\"\\EB7D\"}.icon-twitter:before{content:\"\\EB7E\"}.icon-typing:before{content:\"\\EB7F\"}.icon-uninstall:before{content:\"\\EB80\"}.icon-unread:before{content:\"\\EB81\"}.icon-untag:before{content:\"\\EB82\"}.icon-upload-to-cloud:before{content:\"\\EB83\"}.icon-upload:before{content:\"\\EB84\"}.icon-user:before{content:\"\\EB85\"}.icon-users:before{content:\"\\EB86\"}.icon-v-card:before{content:\"\\EB87\"}.icon-video-camera:before{content:\"\\EB88\"}.icon-video:before{content:\"\\EB89\"}.icon-vimeo-with-circle:before{content:\"\\EB8A\"}.icon-vimeo:before{content:\"\\EB8B\"}.icon-vine-with-circle:before{content:\"\\EB8C\"}.icon-vine:before{content:\"\\EB8D\"}.icon-vinyl:before{content:\"\\EB8E\"}.icon-vk-alternitive:before{content:\"\\EB8F\"}.icon-vk-with-circle:before{content:\"\\EB90\"}.icon-vk:before{content:\"\\EB91\"}.icon-voicemail:before{content:\"\\EB92\"}.icon-wallet:before{content:\"\\EB93\"}.icon-warning:before{content:\"\\EB94\"}.icon-water:before{content:\"\\EB95\"}.icon-windows-store:before{content:\"\\EB96\"}.icon-xing-with-circle:before{content:\"\\EB97\"}.icon-xing:before{content:\"\\EB98\"}.icon-yelp:before{content:\"\\EB99\"}.icon-youko-with-circle:before{content:\"\\EB9A\"}.icon-youko:before{content:\"\\EB9B\"}.icon-youtube-with-circle:before{content:\"\\EB9C\"}.icon-youtube:before{content:\"\\EB9D\"}.flextable{dislay:table;width:100%}.flextable-item{display:table-cell;width:1%;white-space:nowrap;vertical-align:middle}.flextable-item .btn-group{margin-left:10px}.flextable-primary{width:99%}.text-inherit,.text-inherit:focus,.text-inherit:hover{color:inherit;text-decoration:inherit}.datepicker{padding:4px;border-radius:4px;color:#343a40;direction:ltr}.datepicker-inline{width:220px}.datepicker.datepicker-rtl{direction:rtl}.datepicker.datepicker-rtl table tr td span{float:right}.datepicker-dropdown{top:0;left:0}.datepicker-dropdown:before{content:'';display:inline-block;border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #ccc;border-top:0;border-bottom-color:rgba(0,0,0,.2);position:absolute}.datepicker-dropdown:after{content:'';display:inline-block;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #fff;border-top:0;position:absolute}.datepicker-dropdown.datepicker-orient-left:before{left:5px}.datepicker-dropdown.datepicker-orient-left:after{left:6px}.datepicker-dropdown.datepicker-orient-right:before{right:5px}.datepicker-dropdown.datepicker-orient-right:after{right:6px}.datepicker-dropdown.datepicker-orient-top:before{top:-6px}.datepicker-dropdown.datepicker-orient-top:after{top:-5px}.datepicker-dropdown.datepicker-orient-bottom:before{bottom:-7px;border-bottom:0;border-top:7px solid #999}.datepicker-dropdown.datepicker-orient-bottom:after{bottom:-6px;border-bottom:0;border-top:6px solid #fff}.datepicker>div{display:none}.datepicker.days .datepicker-days,.datepicker.months .datepicker-months,.datepicker.years .datepicker-years{display:block}.datepicker table{margin:5px 10px;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.datepicker table>tbody>tr>td,.datepicker table>tbody>tr>th,.datepicker table>thead>tr>td,.datepicker table>thead>tr>th{text-align:center;width:30px;height:30px;border-radius:4px;border:none}.table-striped .datepicker table tr td,.table-striped .datepicker table tr th{background-color:transparent}.datepicker table tr td.day.focused,.datepicker table tr td.day:hover{background:#f8f9fa;cursor:pointer}.datepicker table tr td.new,.datepicker table tr td.old{color:#868e96}.datepicker table tr td.disabled,.datepicker table tr td.disabled:hover{background:0 0;color:#868e96;cursor:default}.datepicker table tr td.today,.datepicker table tr td.today.disabled,.datepicker table tr td.today.disabled:hover,.datepicker table tr td.today:hover{color:#fff;background-color:#000;border-color:#ffdb99}.datepicker table tr td.today.disabled:hover,.datepicker table tr td.today.disabled:hover:hover,.datepicker table tr td.today:hover,.datepicker table tr td.today:hover:hover{color:#fff;background-color:#ffb733;border-color:#ffc966}.datepicker table tr td.today.disabled.focus,.datepicker table tr td.today.disabled:focus,.datepicker table tr td.today.disabled:hover.focus,.datepicker table tr td.today.disabled:hover:focus,.datepicker table tr td.today.focus,.datepicker table tr td.today:focus,.datepicker table tr td.today:hover.focus,.datepicker table tr td.today:hover:focus{-webkit-box-shadow:0 0 0 3px rgba(255,219,153,.5);box-shadow:0 0 0 3px rgba(255,219,153,.5)}.datepicker table tr td.today.disabled,.datepicker table tr td.today.disabled.disabled,.datepicker table tr td.today.disabled:disabled,.datepicker table tr td.today.disabled:hover.disabled,.datepicker table tr td.today.disabled:hover:disabled,.datepicker table tr td.today:disabled,.datepicker table tr td.today:hover.disabled,.datepicker table tr td.today:hover:disabled{background-color:#000;border-color:#ffdb99}.datepicker table tr td.today.active,.datepicker table tr td.today.disabled.active,.datepicker table tr td.today.disabled:active,.datepicker table tr td.today.disabled:hover.active,.datepicker table tr td.today.disabled:hover:active,.datepicker table tr td.today:active,.datepicker table tr td.today:hover.active,.datepicker table tr td.today:hover:active,.show>.datepicker table tr td.today.disabled.dropdown-toggle,.show>.datepicker table tr td.today.disabled:hover.dropdown-toggle,.show>.datepicker table tr td.today.dropdown-toggle,.show>.datepicker table tr td.today:hover.dropdown-toggle{background-color:#ffb733;background-image:none;border-color:#ffc966}.datepicker table tr td.today:hover:hover{color:#000}.datepicker table tr td.today.active:hover{color:#fff}.datepicker table tr td.range,.datepicker table tr td.range.disabled,.datepicker table tr td.range.disabled:hover,.datepicker table tr td.range:hover{background:#f8f9fa;border-radius:0}.datepicker table tr td.range.today,.datepicker table tr td.range.today.disabled,.datepicker table tr td.range.today.disabled:hover,.datepicker table tr td.range.today:hover{color:#fff;background-color:#000;border-color:#fccf7d;border-radius:0}.datepicker table tr td.range.today.disabled:hover,.datepicker table tr td.range.today.disabled:hover:hover,.datepicker table tr td.range.today:hover,.datepicker table tr td.range.today:hover:hover{color:#fff;background-color:#faaa19;border-color:#fbbd4b}.datepicker table tr td.range.today.disabled.focus,.datepicker table tr td.range.today.disabled:focus,.datepicker table tr td.range.today.disabled:hover.focus,.datepicker table tr td.range.today.disabled:hover:focus,.datepicker table tr td.range.today.focus,.datepicker table tr td.range.today:focus,.datepicker table tr td.range.today:hover.focus,.datepicker table tr td.range.today:hover:focus{-webkit-box-shadow:0 0 0 3px rgba(252,207,125,.5);box-shadow:0 0 0 3px rgba(252,207,125,.5)}.datepicker table tr td.range.today.disabled,.datepicker table tr td.range.today.disabled.disabled,.datepicker table tr td.range.today.disabled:disabled,.datepicker table tr td.range.today.disabled:hover.disabled,.datepicker table tr td.range.today.disabled:hover:disabled,.datepicker table tr td.range.today:disabled,.datepicker table tr td.range.today:hover.disabled,.datepicker table tr td.range.today:hover:disabled{background-color:#000;border-color:#fccf7d}.datepicker table tr td.range.today.active,.datepicker table tr td.range.today.disabled.active,.datepicker table tr td.range.today.disabled:active,.datepicker table tr td.range.today.disabled:hover.active,.datepicker table tr td.range.today.disabled:hover:active,.datepicker table tr td.range.today:active,.datepicker table tr td.range.today:hover.active,.datepicker table tr td.range.today:hover:active,.show>.datepicker table tr td.range.today.disabled.dropdown-toggle,.show>.datepicker table tr td.range.today.disabled:hover.dropdown-toggle,.show>.datepicker table tr td.range.today.dropdown-toggle,.show>.datepicker table tr td.range.today:hover.dropdown-toggle{background-color:#faaa19;background-image:none;border-color:#fbbd4b}.datepicker table tr td.selected,.datepicker table tr td.selected.disabled,.datepicker table tr td.selected.disabled:hover,.datepicker table tr td.selected:hover{color:#111;background-color:#fff;border-color:#dee2e6;text-shadow:0 -1px 0 rgba(0,0,0,.25)}.datepicker table tr td.selected.disabled:hover,.datepicker table tr td.selected.disabled:hover:hover,.datepicker table tr td.selected:hover,.datepicker table tr td.selected:hover:hover{color:#111;background-color:#adb5bd;border-color:#c1c9d0}.datepicker table tr td.selected.disabled.focus,.datepicker table tr td.selected.disabled:focus,.datepicker table tr td.selected.disabled:hover.focus,.datepicker table tr td.selected.disabled:hover:focus,.datepicker table tr td.selected.focus,.datepicker table tr td.selected:focus,.datepicker table tr td.selected:hover.focus,.datepicker table tr td.selected:hover:focus{-webkit-box-shadow:0 0 0 3px rgba(222,226,230,.5);box-shadow:0 0 0 3px rgba(222,226,230,.5)}.datepicker table tr td.selected.disabled,.datepicker table tr td.selected.disabled.disabled,.datepicker table tr td.selected.disabled:disabled,.datepicker table tr td.selected.disabled:hover.disabled,.datepicker table tr td.selected.disabled:hover:disabled,.datepicker table tr td.selected:disabled,.datepicker table tr td.selected:hover.disabled,.datepicker table tr td.selected:hover:disabled{background-color:#fff;border-color:#dee2e6}.datepicker table tr td.selected.active,.datepicker table tr td.selected.disabled.active,.datepicker table tr td.selected.disabled:active,.datepicker table tr td.selected.disabled:hover.active,.datepicker table tr td.selected.disabled:hover:active,.datepicker table tr td.selected:active,.datepicker table tr td.selected:hover.active,.datepicker table tr td.selected:hover:active,.show>.datepicker table tr td.selected.disabled.dropdown-toggle,.show>.datepicker table tr td.selected.disabled:hover.dropdown-toggle,.show>.datepicker table tr td.selected.dropdown-toggle,.show>.datepicker table tr td.selected:hover.dropdown-toggle{background-color:#adb5bd;background-image:none;border-color:#c1c9d0}.datepicker table tr td.active,.datepicker table tr td.active.disabled,.datepicker table tr td.active.disabled:hover,.datepicker table tr td.active:hover{color:#fff;background-color:#1997c6;border-color:#1997c6;text-shadow:0 -1px 0 rgba(0,0,0,.25)}.datepicker table tr td.active.disabled:hover,.datepicker table tr td.active.disabled:hover:hover,.datepicker table tr td.active:hover,.datepicker table tr td.active:hover:hover{color:#fff;background-color:#157da4;border-color:#137499}.datepicker table tr td.active.disabled.focus,.datepicker table tr td.active.disabled:focus,.datepicker table tr td.active.disabled:hover.focus,.datepicker table tr td.active.disabled:hover:focus,.datepicker table tr td.active.focus,.datepicker table tr td.active:focus,.datepicker table tr td.active:hover.focus,.datepicker table tr td.active:hover:focus{-webkit-box-shadow:0 0 0 3px rgba(25,151,198,.5);box-shadow:0 0 0 3px rgba(25,151,198,.5)}.datepicker table tr td.active.disabled,.datepicker table tr td.active.disabled.disabled,.datepicker table tr td.active.disabled:disabled,.datepicker table tr td.active.disabled:hover.disabled,.datepicker table tr td.active.disabled:hover:disabled,.datepicker table tr td.active:disabled,.datepicker table tr td.active:hover.disabled,.datepicker table tr td.active:hover:disabled{background-color:#1997c6;border-color:#1997c6}.datepicker table tr td.active.active,.datepicker table tr td.active.disabled.active,.datepicker table tr td.active.disabled:active,.datepicker table tr td.active.disabled:hover.active,.datepicker table tr td.active.disabled:hover:active,.datepicker table tr td.active:active,.datepicker table tr td.active:hover.active,.datepicker table tr td.active:hover:active,.show>.datepicker table tr td.active.disabled.dropdown-toggle,.show>.datepicker table tr td.active.disabled:hover.dropdown-toggle,.show>.datepicker table tr td.active.dropdown-toggle,.show>.datepicker table tr td.active:hover.dropdown-toggle{background-color:#157da4;background-image:none;border-color:#137499}.datepicker table tr td span{display:block;width:23%;height:54px;line-height:54px;float:left;margin:1%;cursor:pointer;border-radius:4px}.datepicker table tr td span:hover{background:#f8f9fa}.datepicker table tr td span.disabled,.datepicker table tr td span.disabled:hover{background:0 0;color:#868e96;cursor:default}.datepicker table tr td span.active,.datepicker table tr td span.active.disabled,.datepicker table tr td span.active.disabled:hover,.datepicker table tr td span.active:hover{color:#fff;background-color:#1997c6;border-color:#1997c6;text-shadow:0 -1px 0 rgba(0,0,0,.25)}.datepicker table tr td span.active.disabled:hover,.datepicker table tr td span.active.disabled:hover:hover,.datepicker table tr td span.active:hover,.datepicker table tr td span.active:hover:hover{color:#fff;background-color:#157da4;border-color:#137499}.datepicker table tr td span.active.disabled.focus,.datepicker table tr td span.active.disabled:focus,.datepicker table tr td span.active.disabled:hover.focus,.datepicker table tr td span.active.disabled:hover:focus,.datepicker table tr td span.active.focus,.datepicker table tr td span.active:focus,.datepicker table tr td span.active:hover.focus,.datepicker table tr td span.active:hover:focus{-webkit-box-shadow:0 0 0 3px rgba(25,151,198,.5);box-shadow:0 0 0 3px rgba(25,151,198,.5)}.datepicker table tr td span.active.disabled,.datepicker table tr td span.active.disabled.disabled,.datepicker table tr td span.active.disabled:disabled,.datepicker table tr td span.active.disabled:hover.disabled,.datepicker table tr td span.active.disabled:hover:disabled,.datepicker table tr td span.active:disabled,.datepicker table tr td span.active:hover.disabled,.datepicker table tr td span.active:hover:disabled{background-color:#1997c6;border-color:#1997c6}.datepicker table tr td span.active.active,.datepicker table tr td span.active.disabled.active,.datepicker table tr td span.active.disabled:active,.datepicker table tr td span.active.disabled:hover.active,.datepicker table tr td span.active.disabled:hover:active,.datepicker table tr td span.active:active,.datepicker table tr td span.active:hover.active,.datepicker table tr td span.active:hover:active,.show>.datepicker table tr td span.active.disabled.dropdown-toggle,.show>.datepicker table tr td span.active.disabled:hover.dropdown-toggle,.show>.datepicker table tr td span.active.dropdown-toggle,.show>.datepicker table tr td span.active:hover.dropdown-toggle{background-color:#157da4;background-image:none;border-color:#137499}.datepicker table tr td span.new,.datepicker table tr td span.old{color:#868e96}.datepicker .datepicker-switch{width:145px}.datepicker tfoot tr th,.datepicker thead tr:first-child th{cursor:pointer}.datepicker tfoot tr th:hover,.datepicker thead tr:first-child th:hover{background:#f8f9fa}.datepicker .cw{font-size:10px;width:12px;padding:0 2px 0 5px;vertical-align:middle}.datepicker thead tr:first-child .cw{cursor:default;background-color:transparent}.input-group.date .input-group-addon{cursor:pointer}.input-daterange{width:100%}.input-daterange input{text-align:center}.input-daterange input:first-child{border-radius:3px 0 0 3px}.input-daterange input:last-child{border-radius:0 3px 3px 0}.input-daterange .input-group-addon{width:auto;min-width:16px;padding:4px 5px;font-weight:400;line-height:1.5;text-align:center;text-shadow:0 1px 0 #fff;vertical-align:middle;background-color:#e9ecef;border:solid rgba(0,0,0,.15);border-width:1px 0;margin-left:-5px;margin-right:-5px}.table .header{padding-right:20px;font-weight:700}.table .header:hover{cursor:pointer}.headerSortDown,.headerSortUp{white-space:nowrap;cursor:pointer;font-weight:700!important;color:#1997c6!important;border-bottom-color:#1997c6!important}.headerSortDown:after,.headerSortUp:after{display:inline-block;width:0;height:0;content:\"\";margin-right:-10px;margin-bottom:2px;margin-left:5px;border-right:5px solid transparent;border-left:5px solid transparent}.headerSortUp:after{border-top:5px solid}.headerSortDown:after{border-bottom:5px solid}.nav-toggler{display:block;width:40px;padding:10px;font-size:16px;color:#495057;background:0 0;border:1px solid #e5e5e5;border-radius:.25rem}.nav-toggler:before{display:block;content:\"\";width:100%;padding-bottom:.125em;border-top:.375em double;border-bottom:.125em solid}.nav-toggler:focus,.nav-toggler:hover{color:#fff;background-color:#495057}@media (min-width:576px){.nav-toggler-sm{display:none}}@media (min-width:768px){.nav-toggler-md{display:none}}@media (min-width:992px){.nav-toggler-lg{display:none}}@media (min-width:1200px){.nav-toggler-xl{display:none}}.nav-toggleable-xs{display:block!important;height:auto!important}@media (min-width:576px){.nav-toggleable-sm{display:block!important;height:auto!important}}@media (min-width:768px){.nav-toggleable-md{display:block!important;height:auto!important}}.statlist{margin-bottom:20px;padding-left:0;list-style:none;border-bottom:1px solid #e5e5e5}.statlist-link{position:relative;display:block;padding:10px;color:inherit;border-top:1px solid #e5e5e5}.statlist-progress{position:absolute;top:0;bottom:0;left:0;z-index:-1;display:block;background-color:#f5f5f5}.statcard-number{margin-top:0;margin-bottom:0}.statcard-number .badge{font-size:45%;vertical-align:middle}.statcard-desc{font-size:85%;letter-spacing:.15em;color:#78838e;text-transform:uppercase}.delta-indicator{display:inline-block;padding:.4em;font-size:12px;vertical-align:middle}.delta-indicator:after{content:\"\";display:inline-block;width:0;height:0;margin-left:2px;margin-left:2px;vertical-align:middle;border-right:4px solid transparent;border-left:4px solid transparent}.delta-positive{color:#1bc98e}.delta-positive:after{border-top:0;border-bottom:4px solid}.delta-negative{color:#e64759}.delta-negative:after{border-bottom:0;border-top:4px solid}.statcard-danger,.statcard-info,.statcard-primary,.statcard-success,.statcard-warning{color:#fff;border-radius:3px}.statcard-danger .delta-negative,.statcard-danger .delta-positive,.statcard-danger .statcard-number,.statcard-info .delta-negative,.statcard-info .delta-positive,.statcard-info .statcard-number,.statcard-primary .delta-negative,.statcard-primary .delta-positive,.statcard-primary .statcard-number,.statcard-success .delta-negative,.statcard-success .delta-positive,.statcard-success .statcard-number,.statcard-warning .delta-negative,.statcard-warning .delta-positive,.statcard-warning .statcard-number{font-weight:400;color:inherit}.statcard-danger .statcard-desc,.statcard-info .statcard-desc,.statcard-primary .statcard-desc,.statcard-success .statcard-desc,.statcard-warning .statcard-desc{font-weight:400;color:rgba(255,255,255,.65)}.statcard-danger .statcard-hr,.statcard-info .statcard-hr,.statcard-primary .statcard-hr,.statcard-success .statcard-hr,.statcard-warning .statcard-hr{margin-left:-1rem;margin-right:-1rem;border-top-color:rgba(255,255,255,.2)}.statcard-primary{background-color:#1997c6}.statcard-success{background-color:#1bc98e}.statcard-info{background-color:#9f86ff}.statcard-warning{background-color:#e4d836}.statcard-danger{background-color:#e64759}canvas{display:block}.ex-graph{display:block;margin:0 auto 15px}.ex-line-graph{width:100%;height:273px}.hr-divider{position:relative;font-size:12px;line-height:20px;text-align:center;text-transform:uppercase}.hr-divider:before{position:absolute;top:50%;display:block;content:\"\";width:100%;height:1px;background-color:#eee}.hr-divider-content{position:relative;z-index:2;display:inline-block;padding-left:1em;padding-right:1em;color:#495057;vertical-align:middle;background-color:#fff}.hr-divider-content .nav-item{float:left}.hr-divider-heading{margin-top:0;margin-bottom:0;font-size:100%;color:inherit}.hr-divider-nav>li>a{padding-top:4px;padding-bottom:4px;font-size:100%}.hr-divider-nav>.active>a{font-weight:300;background:0 0}.input-with-icon{position:relative;display:inline-block;vertical-align:middle}.input-with-icon>.form-control{padding-left:30px}.input-with-icon>.icon{position:absolute;top:7px;left:10px;color:#ccc}.sidebar .nav-toggleable-md.in,.sidebar .nav-toggleable-sm.in{padding-bottom:20px}.sidebar-header{position:relative;padding-bottom:20px}.sidebar-header::after{display:block;clear:both;content:\"\"}.sidebar-toggler{position:absolute;top:2px;right:0;color:#ccc;border-color:#ccc}.sidebar-toggler:focus,.sidebar-toggler:hover{color:#fff;background-color:#ccc}.sidebar-brand{float:left;font-size:18px;line-height:1;color:#495057}.sidebar-brand>img{height:40px}@media (min-width:576px){.sidebar-brand>img{height:60px}}.sidebar-brand:hover{color:#343a40;text-decoration:none}.sidebar-brand-icon{font-size:40px}.sidebar-form{position:relative;margin-bottom:30px}.sidebar-form .form-control{padding-left:15px;padding-right:15px}.sidebar-form .btn-link{position:absolute;top:0;right:0;padding:9px 10px;color:#869099;border:0;line-height:0}.sidebar-form .btn-link .glyphicon{vertical-align:text-top}@media (min-width:992px){.sidebar-nav{margin-right:40px}}.iconav{margin-top:-20px;margin-bottom:30px}@media (min-width:768px){.iconav{position:fixed;top:0;bottom:0;left:0;width:70px;margin-top:0;margin-bottom:0;background-color:#eee;overflow-y:auto;-webkit-transform:translate3d(0,0,0)}}.iconav .tooltip{white-space:nowrap}@media (min-width:768px){.with-iconav>.container,.with-iconav>.container-fluid{padding-left:85px}}.iconav-brand{display:block;padding-top:10px;padding-bottom:10px;font-size:18px;line-height:1;color:#eee;text-align:center;border-bottom:0;background-color:#1997c6}@media (min-width:768px){.iconav-brand{padding-top:20px;padding-bottom:20px}}.iconav-brand:hover{color:inherit;text-decoration:none}.iconav-brand-icon{font-size:30px}.iconav-nav{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.iconav-nav .label{position:absolute;top:8px;right:12px;z-index:5;padding:.2em .4em;font-size:11px;line-height:1;border-radius:10px;border:2px solid #eee}.iconav-nav>.nav-item{float:none;display:inline-block}@media (min-width:768px){.iconav-nav>.nav-item{display:block}}.iconav-nav>.nav-item>.nav-link{position:relative;padding:10px 12px;font-size:18px;color:inherit;text-align:center;border-radius:0}@media (min-width:768px){.iconav-nav>.nav-item>.nav-link{padding:15px}}.iconav-nav>.nav-item+.nav-item{margin-left:-3px}.iconav-nav>.nav-item+.nav-item>.nav-link{border-left:1px solid #fff}.iconav-nav>.nav-item+.nav-item>.nav-link.active,.iconav-nav>.nav-item+.nav-item>.nav-link.active:active,.iconav-nav>.nav-item+.nav-item>.nav-link.active:focus,.iconav-nav>.nav-item+.nav-item>.nav-link.active:hover{color:#495057;background-color:#fff}.iconav-nav>.nav-item+.nav-item>.nav-link.active .label,.iconav-nav>.nav-item+.nav-item>.nav-link.active:active .label,.iconav-nav>.nav-item+.nav-item>.nav-link.active:focus .label,.iconav-nav>.nav-item+.nav-item>.nav-link.active:hover .label{border-color:#fff}@media (min-width:768px){.iconav-nav>.nav-item+.nav-item{margin-left:0}.iconav-nav>.nav-item+.nav-item>.nav-link{border-top:1px solid #fff;border-right:0}}.iconav-nav>.nav-item>.nav-link>img{width:26px;margin:0 auto}.iconav-nav-label{display:block;font-size:11px}@media (max-width:767px){.iconav-slider{overflow:auto;-webkit-overflow-scrolling:touch;white-space:nowrap}}.dashhead::after{display:block;clear:both;content:\"\"}@media (min-width:768px){.dashhead-titles{float:left}}.dashhead-title{margin-top:0}.dashhead-subtitle{margin-top:0;margin-bottom:5px;font-weight:400;font-size:85%;color:#a2a9b1;letter-spacing:1px;text-transform:uppercase}.dashhead-toolbar{margin-left:0}.dashhead-toolbar .input-with-icon{width:100%;margin-bottom:10px;margin-left:0}@media (min-width:768px){.dashhead-toolbar{float:right;margin-top:12px}.dashhead-toolbar .input-with-icon{width:180px;margin-bottom:0}}.dashhead-toolbar-divider{float:left;width:1px;height:34px;margin-left:10px;margin-right:10px;background-color:#eee}.dashhead-toolbar-item{float:left}@media (max-width:767px){.dashhead-toolbar-item.btn-group-halves{width:100%}.dashhead-toolbar-item.btn-group-halves .btn{width:50%;margin-left:0}.dashhead-toolbar-item.btn-group-thirds{width:100%}.dashhead-toolbar-item.btn-group-thirds .btn{width:33%;margin-left:0}.dashhead-toolbar-item.btn-group-thirds .btn:last-child{width:34%}.dashhead-toolbar-item.btn-group-fourths{width:100%}.dashhead-toolbar-item.btn-group-fourths .btn{width:25%;margin-left:0}}.btn-pill{padding-left:1.25em;padding-right:1.25em;border-radius:1000em}.btn-square{border-radius:0}\n", ""]);

// exports


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = function escape(url) {
    if (typeof url !== 'string') {
        return url
    }
    // If url is already wrapped in quotes, remove them
    if (/^['"].*['"]$/.test(url)) {
        url = url.slice(1, -1);
    }
    // Should url be wrapped?
    // See https://drafts.csswg.org/css-values-3/#urls
    if (/["'() \t\n]/.test(url)) {
        return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"'
    }

    return url
}


/***/ }),
/* 8 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(10);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 10 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"=="function"&&__webpack_require__(12)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});


/***/ }),
/* 12 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*
 Copyright (C) Federico Zivolo 2017
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */(function(e,t){ true?module.exports=t():'function'==typeof define&&define.amd?define(t):e.Popper=t()})(this,function(){'use strict';function e(e){return e&&'[object Function]'==={}.toString.call(e)}function t(e,t){if(1!==e.nodeType)return[];var o=window.getComputedStyle(e,null);return t?o[t]:o}function o(e){return'HTML'===e.nodeName?e:e.parentNode||e.host}function n(e){if(!e||-1!==['HTML','BODY','#document'].indexOf(e.nodeName))return window.document.body;var i=t(e),r=i.overflow,p=i.overflowX,s=i.overflowY;return /(auto|scroll)/.test(r+s+p)?e:n(o(e))}function r(e){var o=e&&e.offsetParent,i=o&&o.nodeName;return i&&'BODY'!==i&&'HTML'!==i?-1!==['TD','TABLE'].indexOf(o.nodeName)&&'static'===t(o,'position')?r(o):o:window.document.documentElement}function p(e){var t=e.nodeName;return'BODY'!==t&&('HTML'===t||r(e.firstElementChild)===e)}function s(e){return null===e.parentNode?e:s(e.parentNode)}function d(e,t){if(!e||!e.nodeType||!t||!t.nodeType)return window.document.documentElement;var o=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=o?e:t,n=o?t:e,a=document.createRange();a.setStart(i,0),a.setEnd(n,0);var f=a.commonAncestorContainer;if(e!==f&&t!==f||i.contains(n))return p(f)?f:r(f);var l=s(e);return l.host?d(l.host,t):d(e,s(t).host)}function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:'top',o='top'===t?'scrollTop':'scrollLeft',i=e.nodeName;if('BODY'===i||'HTML'===i){var n=window.document.documentElement,r=window.document.scrollingElement||n;return r[o]}return e[o]}function f(e,t){var o=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=a(t,'top'),n=a(t,'left'),r=o?-1:1;return e.top+=i*r,e.bottom+=i*r,e.left+=n*r,e.right+=n*r,e}function l(e,t){var o='x'===t?'Left':'Top',i='Left'==o?'Right':'Bottom';return+e['border'+o+'Width'].split('px')[0]+ +e['border'+i+'Width'].split('px')[0]}function m(e,t,o,i){return _(t['offset'+e],o['client'+e],o['offset'+e],ie()?o['offset'+e]+i['margin'+('Height'===e?'Top':'Left')]+i['margin'+('Height'===e?'Bottom':'Right')]:0)}function h(){var e=window.document.body,t=window.document.documentElement,o=ie()&&window.getComputedStyle(t);return{height:m('Height',e,t,o),width:m('Width',e,t,o)}}function c(e){return se({},e,{right:e.left+e.width,bottom:e.top+e.height})}function g(e){var o={};if(ie())try{o=e.getBoundingClientRect();var i=a(e,'top'),n=a(e,'left');o.top+=i,o.left+=n,o.bottom+=i,o.right+=n}catch(e){}else o=e.getBoundingClientRect();var r={left:o.left,top:o.top,width:o.right-o.left,height:o.bottom-o.top},p='HTML'===e.nodeName?h():{},s=p.width||e.clientWidth||r.right-r.left,d=p.height||e.clientHeight||r.bottom-r.top,f=e.offsetWidth-s,m=e.offsetHeight-d;if(f||m){var g=t(e);f-=l(g,'x'),m-=l(g,'y'),r.width-=f,r.height-=m}return c(r)}function u(e,o){var i=ie(),r='HTML'===o.nodeName,p=g(e),s=g(o),d=n(e),a=t(o),l=+a.borderTopWidth.split('px')[0],m=+a.borderLeftWidth.split('px')[0],h=c({top:p.top-s.top-l,left:p.left-s.left-m,width:p.width,height:p.height});if(h.marginTop=0,h.marginLeft=0,!i&&r){var u=+a.marginTop.split('px')[0],b=+a.marginLeft.split('px')[0];h.top-=l-u,h.bottom-=l-u,h.left-=m-b,h.right-=m-b,h.marginTop=u,h.marginLeft=b}return(i?o.contains(d):o===d&&'BODY'!==d.nodeName)&&(h=f(h,o)),h}function b(e){var t=window.document.documentElement,o=u(e,t),i=_(t.clientWidth,window.innerWidth||0),n=_(t.clientHeight,window.innerHeight||0),r=a(t),p=a(t,'left'),s={top:r-o.top+o.marginTop,left:p-o.left+o.marginLeft,width:i,height:n};return c(s)}function y(e){var i=e.nodeName;return'BODY'===i||'HTML'===i?!1:'fixed'===t(e,'position')||y(o(e))}function w(e,t,i,r){var p={top:0,left:0},s=d(e,t);if('viewport'===r)p=b(s);else{var a;'scrollParent'===r?(a=n(o(e)),'BODY'===a.nodeName&&(a=window.document.documentElement)):'window'===r?a=window.document.documentElement:a=r;var f=u(a,s);if('HTML'===a.nodeName&&!y(s)){var l=h(),m=l.height,c=l.width;p.top+=f.top-f.marginTop,p.bottom=m+f.top,p.left+=f.left-f.marginLeft,p.right=c+f.left}else p=f}return p.left+=i,p.top+=i,p.right-=i,p.bottom-=i,p}function v(e){var t=e.width,o=e.height;return t*o}function E(e,t,o,i,n){var r=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf('auto'))return e;var p=w(o,i,r,n),s={top:{width:p.width,height:t.top-p.top},right:{width:p.right-t.right,height:p.height},bottom:{width:p.width,height:p.bottom-t.bottom},left:{width:t.left-p.left,height:p.height}},d=Object.keys(s).map(function(e){return se({key:e},s[e],{area:v(s[e])})}).sort(function(e,t){return t.area-e.area}),a=d.filter(function(e){var t=e.width,i=e.height;return t>=o.clientWidth&&i>=o.clientHeight}),f=0<a.length?a[0].key:d[0].key,l=e.split('-')[1];return f+(l?'-'+l:'')}function x(e,t,o){var i=d(t,o);return u(o,i)}function O(e){var t=window.getComputedStyle(e),o=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight),n={width:e.offsetWidth+i,height:e.offsetHeight+o};return n}function L(e){var t={left:'right',right:'left',bottom:'top',top:'bottom'};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function S(e,t,o){o=o.split('-')[0];var i=O(e),n={width:i.width,height:i.height},r=-1!==['right','left'].indexOf(o),p=r?'top':'left',s=r?'left':'top',d=r?'height':'width',a=r?'width':'height';return n[p]=t[p]+t[d]/2-i[d]/2,n[s]=o===s?t[s]-i[a]:t[L(s)],n}function T(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function C(e,t,o){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===o});var i=T(e,function(e){return e[t]===o});return e.indexOf(i)}function N(t,o,i){var n=void 0===i?t:t.slice(0,C(t,'name',i));return n.forEach(function(t){t.function&&console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var i=t.function||t.fn;t.enabled&&e(i)&&(o.offsets.popper=c(o.offsets.popper),o.offsets.reference=c(o.offsets.reference),o=i(o,t))}),o}function k(){if(!this.state.isDestroyed){var e={instance:this,styles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=x(this.state,this.popper,this.reference),e.placement=E(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=S(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position='absolute',e=N(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function W(e,t){return e.some(function(e){var o=e.name,i=e.enabled;return i&&o===t})}function B(e){for(var t=[!1,'ms','Webkit','Moz','O'],o=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length-1;n++){var i=t[n],r=i?''+i+o:e;if('undefined'!=typeof window.document.body.style[r])return r}return null}function D(){return this.state.isDestroyed=!0,W(this.modifiers,'applyStyle')&&(this.popper.removeAttribute('x-placement'),this.popper.style.left='',this.popper.style.position='',this.popper.style.top='',this.popper.style[B('transform')]=''),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function H(e,t,o,i){var r='BODY'===e.nodeName,p=r?window:e;p.addEventListener(t,o,{passive:!0}),r||H(n(p.parentNode),t,o,i),i.push(p)}function P(e,t,o,i){o.updateBound=i,window.addEventListener('resize',o.updateBound,{passive:!0});var r=n(e);return H(r,'scroll',o.updateBound,o.scrollParents),o.scrollElement=r,o.eventsEnabled=!0,o}function A(){this.state.eventsEnabled||(this.state=P(this.reference,this.options,this.state,this.scheduleUpdate))}function M(e,t){return window.removeEventListener('resize',t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener('scroll',t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function I(){this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=M(this.reference,this.state))}function R(e){return''!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function U(e,t){Object.keys(t).forEach(function(o){var i='';-1!==['width','height','top','right','bottom','left'].indexOf(o)&&R(t[o])&&(i='px'),e.style[o]=t[o]+i})}function Y(e,t){Object.keys(t).forEach(function(o){var i=t[o];!1===i?e.removeAttribute(o):e.setAttribute(o,t[o])})}function F(e,t,o){var i=T(e,function(e){var o=e.name;return o===t}),n=!!i&&e.some(function(e){return e.name===o&&e.enabled&&e.order<i.order});if(!n){var r='`'+t+'`';console.warn('`'+o+'`'+' modifier is required by '+r+' modifier in order to work, be sure to include it before '+r+'!')}return n}function j(e){return'end'===e?'start':'start'===e?'end':e}function K(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],o=ae.indexOf(e),i=ae.slice(o+1).concat(ae.slice(0,o));return t?i.reverse():i}function q(e,t,o,i){var n=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+n[1],p=n[2];if(!r)return e;if(0===p.indexOf('%')){var s;switch(p){case'%p':s=o;break;case'%':case'%r':default:s=i;}var d=c(s);return d[t]/100*r}if('vh'===p||'vw'===p){var a;return a='vh'===p?_(document.documentElement.clientHeight,window.innerHeight||0):_(document.documentElement.clientWidth,window.innerWidth||0),a/100*r}return r}function G(e,t,o,i){var n=[0,0],r=-1!==['right','left'].indexOf(i),p=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=p.indexOf(T(p,function(e){return-1!==e.search(/,|\s/)}));p[s]&&-1===p[s].indexOf(',')&&console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var d=/\s*,\s*|\s+/,a=-1===s?[p]:[p.slice(0,s).concat([p[s].split(d)[0]]),[p[s].split(d)[1]].concat(p.slice(s+1))];return a=a.map(function(e,i){var n=(1===i?!r:r)?'height':'width',p=!1;return e.reduce(function(e,t){return''===e[e.length-1]&&-1!==['+','-'].indexOf(t)?(e[e.length-1]=t,p=!0,e):p?(e[e.length-1]+=t,p=!1,e):e.concat(t)},[]).map(function(e){return q(e,n,t,o)})}),a.forEach(function(e,t){e.forEach(function(o,i){R(o)&&(n[t]+=o*('-'===e[i-1]?-1:1))})}),n}for(var z=Math.min,V=Math.floor,_=Math.max,X=['native code','[object MutationObserverConstructor]'],Q=function(e){return X.some(function(t){return-1<(e||'').toString().indexOf(t)})},J='undefined'!=typeof window,Z=['Edge','Trident','Firefox'],$=0,ee=0;ee<Z.length;ee+=1)if(J&&0<=navigator.userAgent.indexOf(Z[ee])){$=1;break}var i,te=J&&Q(window.MutationObserver),oe=te?function(e){var t=!1,o=0,i=document.createElement('span'),n=new MutationObserver(function(){e(),t=!1});return n.observe(i,{attributes:!0}),function(){t||(t=!0,i.setAttribute('x-index',o),++o)}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},$))}},ie=function(){return void 0==i&&(i=-1!==navigator.appVersion.indexOf('MSIE 10')),i},ne=function(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')},re=function(){function e(e,t){for(var o,n=0;n<t.length;n++)o=t[n],o.enumerable=o.enumerable||!1,o.configurable=!0,'value'in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}(),pe=function(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e},se=Object.assign||function(e){for(var t,o=1;o<arguments.length;o++)for(var i in t=arguments[o],t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},de=['auto-start','auto','auto-end','top-start','top','top-end','right-start','right','right-end','bottom-end','bottom','bottom-start','left-end','left','left-start'],ae=de.slice(3),fe={FLIP:'flip',CLOCKWISE:'clockwise',COUNTERCLOCKWISE:'counterclockwise'},le=function(){function t(o,i){var n=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};ne(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=oe(this.update.bind(this)),this.options=se({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=o.jquery?o[0]:o,this.popper=i.jquery?i[0]:i,this.options.modifiers={},Object.keys(se({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){n.options.modifiers[e]=se({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return se({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(t){t.enabled&&e(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var p=this.options.eventsEnabled;p&&this.enableEventListeners(),this.state.eventsEnabled=p}return re(t,[{key:'update',value:function(){return k.call(this)}},{key:'destroy',value:function(){return D.call(this)}},{key:'enableEventListeners',value:function(){return A.call(this)}},{key:'disableEventListeners',value:function(){return I.call(this)}}]),t}();return le.Utils=('undefined'==typeof window?global:window).PopperUtils,le.placements=de,le.Defaults={placement:'bottom',eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,o=t.split('-')[0],i=t.split('-')[1];if(i){var n=e.offsets,r=n.reference,p=n.popper,s=-1!==['bottom','top'].indexOf(o),d=s?'left':'top',a=s?'width':'height',f={start:pe({},d,r[d]),end:pe({},d,r[d]+r[a]-p[a])};e.offsets.popper=se({},p,f[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var o,i=t.offset,n=e.placement,r=e.offsets,p=r.popper,s=r.reference,d=n.split('-')[0];return o=R(+i)?[+i,0]:G(i,p,s,d),'left'===d?(p.top+=o[0],p.left-=o[1]):'right'===d?(p.top+=o[0],p.left+=o[1]):'top'===d?(p.left+=o[0],p.top-=o[1]):'bottom'===d&&(p.left+=o[0],p.top+=o[1]),e.popper=p,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var o=t.boundariesElement||r(e.instance.popper);e.instance.reference===o&&(o=r(o));var i=w(e.instance.popper,e.instance.reference,t.padding,o);t.boundaries=i;var n=t.priority,p=e.offsets.popper,s={primary:function(e){var o=p[e];return p[e]<i[e]&&!t.escapeWithReference&&(o=_(p[e],i[e])),pe({},e,o)},secondary:function(e){var o='right'===e?'left':'top',n=p[o];return p[e]>i[e]&&!t.escapeWithReference&&(n=z(p[o],i[e]-('right'===e?p.width:p.height))),pe({},o,n)}};return n.forEach(function(e){var t=-1===['left','top'].indexOf(e)?'secondary':'primary';p=se({},p,s[t](e))}),e.offsets.popper=p,e},priority:['left','right','top','bottom'],padding:5,boundariesElement:'scrollParent'},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,o=t.popper,i=t.reference,n=e.placement.split('-')[0],r=V,p=-1!==['top','bottom'].indexOf(n),s=p?'right':'bottom',d=p?'left':'top',a=p?'width':'height';return o[s]<r(i[d])&&(e.offsets.popper[d]=r(i[d])-o[a]),o[d]>r(i[s])&&(e.offsets.popper[d]=r(i[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){if(!F(e.instance.modifiers,'arrow','keepTogether'))return e;var o=t.element;if('string'==typeof o){if(o=e.instance.popper.querySelector(o),!o)return e;}else if(!e.instance.popper.contains(o))return console.warn('WARNING: `arrow.element` must be child of its popper element!'),e;var i=e.placement.split('-')[0],n=e.offsets,r=n.popper,p=n.reference,s=-1!==['left','right'].indexOf(i),d=s?'height':'width',a=s?'top':'left',f=s?'left':'top',l=s?'bottom':'right',m=O(o)[d];p[l]-m<r[a]&&(e.offsets.popper[a]-=r[a]-(p[l]-m)),p[a]+m>r[l]&&(e.offsets.popper[a]+=p[a]+m-r[l]);var h=p[a]+p[d]/2-m/2,g=h-c(e.offsets.popper)[a];return g=_(z(r[d]-m,g),0),e.arrowElement=o,e.offsets.arrow={},e.offsets.arrow[a]=Math.round(g),e.offsets.arrow[f]='',e},element:'[x-arrow]'},flip:{order:600,enabled:!0,fn:function(e,t){if(W(e.instance.modifiers,'inner'))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var o=w(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split('-')[0],n=L(i),r=e.placement.split('-')[1]||'',p=[];switch(t.behavior){case fe.FLIP:p=[i,n];break;case fe.CLOCKWISE:p=K(i);break;case fe.COUNTERCLOCKWISE:p=K(i,!0);break;default:p=t.behavior;}return p.forEach(function(s,d){if(i!==s||p.length===d+1)return e;i=e.placement.split('-')[0],n=L(i);var a=e.offsets.popper,f=e.offsets.reference,l=V,m='left'===i&&l(a.right)>l(f.left)||'right'===i&&l(a.left)<l(f.right)||'top'===i&&l(a.bottom)>l(f.top)||'bottom'===i&&l(a.top)<l(f.bottom),h=l(a.left)<l(o.left),c=l(a.right)>l(o.right),g=l(a.top)<l(o.top),u=l(a.bottom)>l(o.bottom),b='left'===i&&h||'right'===i&&c||'top'===i&&g||'bottom'===i&&u,y=-1!==['top','bottom'].indexOf(i),w=!!t.flipVariations&&(y&&'start'===r&&h||y&&'end'===r&&c||!y&&'start'===r&&g||!y&&'end'===r&&u);(m||b||w)&&(e.flipped=!0,(m||b)&&(i=p[d+1]),w&&(r=j(r)),e.placement=i+(r?'-'+r:''),e.offsets.popper=se({},e.offsets.popper,S(e.instance.popper,e.offsets.reference,e.placement)),e=N(e.instance.modifiers,e,'flip'))}),e},behavior:'flip',padding:5,boundariesElement:'viewport'},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,o=t.split('-')[0],i=e.offsets,n=i.popper,r=i.reference,p=-1!==['left','right'].indexOf(o),s=-1===['top','left'].indexOf(o);return n[p?'left':'top']=r[t]-(s?n[p?'width':'height']:0),e.placement=L(t),e.offsets.popper=c(n),e}},hide:{order:800,enabled:!0,fn:function(e){if(!F(e.instance.modifiers,'hide','preventOverflow'))return e;var t=e.offsets.reference,o=T(e.instance.modifiers,function(e){return'preventOverflow'===e.name}).boundaries;if(t.bottom<o.top||t.left>o.right||t.top>o.bottom||t.right<o.left){if(!0===e.hide)return e;e.hide=!0,e.attributes['x-out-of-boundaries']=''}else{if(!1===e.hide)return e;e.hide=!1,e.attributes['x-out-of-boundaries']=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var o=t.x,i=t.y,n=e.offsets.popper,p=T(e.instance.modifiers,function(e){return'applyStyle'===e.name}).gpuAcceleration;void 0!==p&&console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var s,d,a=void 0===p?t.gpuAcceleration:p,f=r(e.instance.popper),l=g(f),m={position:n.position},h={left:V(n.left),top:V(n.top),bottom:V(n.bottom),right:V(n.right)},c='bottom'===o?'top':'bottom',u='right'===i?'left':'right',b=B('transform');if(d='bottom'==c?-l.height+h.bottom:h.top,s='right'==u?-l.width+h.right:h.left,a&&b)m[b]='translate3d('+s+'px, '+d+'px, 0)',m[c]=0,m[u]=0,m.willChange='transform';else{var y='bottom'==c?-1:1,w='right'==u?-1:1;m[c]=d*y,m[u]=s*w,m.willChange=c+', '+u}var v={"x-placement":e.placement};return e.attributes=se({},v,e.attributes),e.styles=se({},m,e.styles),e},gpuAcceleration:!0,x:'bottom',y:'right'},applyStyle:{order:900,enabled:!0,fn:function(e){return U(e.instance.popper,e.styles),Y(e.instance.popper,e.attributes),e.offsets.arrow&&U(e.arrowElement,e.offsets.arrow),e},onLoad:function(e,t,o,i,n){var r=x(n,t,e),p=E(o.placement,r,t,e,o.modifiers.flip.boundariesElement,o.modifiers.flip.padding);return t.setAttribute('x-placement',p),U(t,{position:'absolute'}),o},gpuAcceleration:void 0}}},le});
//# sourceMappingURL=popper.min.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 14 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 15 */
/***/ (function(module, exports) {

/*!
 * Bootstrap
 * Copyright 2011-2016
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.')
}

+function ($) {
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] >= 4)) {
    throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0')
  }
}(jQuery);


+function () {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Util = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

  var transition = false;

  var MAX_UID = 1000000;

  var TransitionEndEvent = {
    WebkitTransition: 'webkitTransitionEnd',
    MozTransition: 'transitionend',
    OTransition: 'oTransitionEnd otransitionend',
    transition: 'transitionend'

    // shoutout AngusCroll (https://goo.gl/pxwQGp)
  };function toType(obj) {
    return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  }

  function isElement(obj) {
    return (obj[0] || obj).nodeType;
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: transition.end,
      delegateType: transition.end,
      handle: function handle(event) {
        if ($(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }
        return undefined;
      }
    };
  }

  function transitionEndTest() {
    if (window.QUnit) {
      return false;
    }

    var el = document.createElement('bootstrap');

    for (var name in TransitionEndEvent) {
      if (el.style[name] !== undefined) {
        return {
          end: TransitionEndEvent[name]
        };
      }
    }

    return false;
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;

    $(this).one(Util.TRANSITION_END, function () {
      called = true;
    });

    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);

    return this;
  }

  function setTransitionEndSupport() {
    transition = transitionEndTest();

    $.fn.emulateTransitionEnd = transitionEndEmulator;

    if (Util.supportsTransitionEnd()) {
      $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */

  var Util = {

    TRANSITION_END: 'bsTransitionEnd',

    getUID: function getUID(prefix) {
      do {
        // eslint-disable-next-line no-bitwise
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));
      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');
      if (!selector || selector === '#') {
        selector = element.getAttribute('href') || '';
      }

      try {
        var $selector = $(selector);
        return $selector.length > 0 ? selector : null;
      } catch (error) {
        return null;
      }
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $(element).trigger(transition.end);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(transition);
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (configTypes.hasOwnProperty(property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ': ' + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'));
          }
        }
      }
    }
  };

  setTransitionEndSupport();

  return Util;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Alert = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 150;

  var Selector = {
    DISMISS: '[data-dismiss="alert"]'
  };

  var Event = {
    CLOSE: 'close' + EVENT_KEY,
    CLOSED: 'closed' + EVENT_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    ALERT: 'alert',
    FADE: 'fade',
    SHOW: 'show'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Alert = function () {
    function Alert(element) {
      _classCallCheck(this, Alert);

      this._element = element;
    }

    // getters

    // public

    Alert.prototype.close = function close(element) {
      element = element || this._element;

      var rootElement = this._getRootElement(element);
      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    Alert.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    };

    // private

    Alert.prototype._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = $(selector)[0];
      }

      if (!parent) {
        parent = $(element).closest('.' + ClassName.ALERT)[0];
      }

      return parent;
    };

    Alert.prototype._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $.Event(Event.CLOSE);

      $(element).trigger(closeEvent);
      return closeEvent;
    };

    Alert.prototype._removeElement = function _removeElement(element) {
      var _this2 = this;

      $(element).removeClass(ClassName.SHOW);

      if (!Util.supportsTransitionEnd() || !$(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);
        return;
      }

      $(element).one(Util.TRANSITION_END, function (event) {
        return _this2._destroyElement(element, event);
      }).emulateTransitionEnd(TRANSITION_DURATION);
    };

    Alert.prototype._destroyElement = function _destroyElement(element) {
      $(element).detach().trigger(Event.CLOSED).remove();
    };

    // static

    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }]);

    return Alert;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Alert._jQueryInterface;
  $.fn[NAME].Constructor = Alert;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  return Alert;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Button = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'button';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.button';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];

  var ClassName = {
    ACTIVE: 'active',
    BUTTON: 'btn',
    FOCUS: 'focus'
  };

  var Selector = {
    DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
    DATA_TOGGLE: '[data-toggle="buttons"]',
    INPUT: 'input',
    ACTIVE: '.active',
    BUTTON: '.btn'
  };

  var Event = {
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,
    FOCUS_BLUR_DATA_API: 'focus' + EVENT_KEY + DATA_API_KEY + ' ' + ('blur' + EVENT_KEY + DATA_API_KEY)

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Button = function () {
    function Button(element) {
      _classCallCheck(this, Button);

      this._element = element;
    }

    // getters

    // public

    Button.prototype.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $(this._element).closest(Selector.DATA_TOGGLE)[0];

      if (rootElement) {
        var input = $(this._element).find(Selector.INPUT)[0];

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && $(this._element).hasClass(ClassName.ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = $(rootElement).find(Selector.ACTIVE)[0];

              if (activeElement) {
                $(activeElement).removeClass(ClassName.ACTIVE);
              }
            }
          }

          if (triggerChangeEvent) {
            if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
              return;
            }
            input.checked = !$(this._element).hasClass(ClassName.ACTIVE);
            $(input).trigger('change');
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (addAriaPressed) {
        this._element.setAttribute('aria-pressed', !$(this._element).hasClass(ClassName.ACTIVE));
      }

      if (triggerChangeEvent) {
        $(this._element).toggleClass(ClassName.ACTIVE);
      }
    };

    Button.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    };

    // static

    Button._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);

        if (!data) {
          data = new Button(this);
          $(this).data(DATA_KEY, data);
        }

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }]);

    return Button;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    event.preventDefault();

    var button = event.target;

    if (!$(button).hasClass(ClassName.BUTTON)) {
      button = $(button).closest(Selector.BUTTON);
    }

    Button._jQueryInterface.call($(button), 'toggle');
  }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    var button = $(event.target).closest(Selector.BUTTON)[0];
    $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Button._jQueryInterface;
  $.fn[NAME].Constructor = Button;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Button._jQueryInterface;
  };

  return Button;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Carousel = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'carousel';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.carousel';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 600;
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key
  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key
  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true
  };

  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean'
  };

  var Direction = {
    NEXT: 'next',
    PREV: 'prev',
    LEFT: 'left',
    RIGHT: 'right'
  };

  var Event = {
    SLIDE: 'slide' + EVENT_KEY,
    SLID: 'slid' + EVENT_KEY,
    KEYDOWN: 'keydown' + EVENT_KEY,
    MOUSEENTER: 'mouseenter' + EVENT_KEY,
    MOUSELEAVE: 'mouseleave' + EVENT_KEY,
    TOUCHEND: 'touchend' + EVENT_KEY,
    LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    CAROUSEL: 'carousel',
    ACTIVE: 'active',
    SLIDE: 'slide',
    RIGHT: 'carousel-item-right',
    LEFT: 'carousel-item-left',
    NEXT: 'carousel-item-next',
    PREV: 'carousel-item-prev',
    ITEM: 'carousel-item'
  };

  var Selector = {
    ACTIVE: '.active',
    ACTIVE_ITEM: '.active.carousel-item',
    ITEM: '.carousel-item',
    NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
    INDICATORS: '.carousel-indicators',
    DATA_SLIDE: '[data-slide], [data-slide-to]',
    DATA_RIDE: '[data-ride="carousel"]'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Carousel = function () {
    function Carousel(element, config) {
      _classCallCheck(this, Carousel);

      this._items = null;
      this._interval = null;
      this._activeElement = null;

      this._isPaused = false;
      this._isSliding = false;

      this.touchTimeout = null;

      this._config = this._getConfig(config);
      this._element = $(element)[0];
      this._indicatorsElement = $(this._element).find(Selector.INDICATORS)[0];

      this._addEventListeners();
    }

    // getters

    // public

    Carousel.prototype.next = function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    };

    Carousel.prototype.nextWhenVisible = function nextWhenVisible() {
      // Don't call next when the page isn't visible
      if (!document.hidden) {
        this.next();
      }
    };

    Carousel.prototype.prev = function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    };

    Carousel.prototype.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if ($(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    Carousel.prototype.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    Carousel.prototype.to = function to(index) {
      var _this3 = this;

      this._activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $(this._element).one(Event.SLID, function () {
          return _this3.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    };

    Carousel.prototype.dispose = function dispose() {
      $(this._element).off(EVENT_KEY);
      $.removeData(this._element, DATA_KEY);

      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    };

    // private

    Carousel.prototype._getConfig = function _getConfig(config) {
      config = $.extend({}, Default, config);
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    Carousel.prototype._addEventListeners = function _addEventListeners() {
      var _this4 = this;

      if (this._config.keyboard) {
        $(this._element).on(Event.KEYDOWN, function (event) {
          return _this4._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $(this._element).on(Event.MOUSEENTER, function (event) {
          return _this4.pause(event);
        }).on(Event.MOUSELEAVE, function (event) {
          return _this4.cycle(event);
        });
        if ('ontouchstart' in document.documentElement) {
          // if it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          $(this._element).on(Event.TOUCHEND, function () {
            _this4.pause();
            if (_this4.touchTimeout) {
              clearTimeout(_this4.touchTimeout);
            }
            _this4.touchTimeout = setTimeout(function (event) {
              return _this4.cycle(event);
            }, TOUCHEVENT_COMPAT_WAIT + _this4._config.interval);
          });
        }
      }
    };

    Carousel.prototype._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;
        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;
        default:
          return;
      }
    };

    Carousel.prototype._getItemIndex = function _getItemIndex(element) {
      this._items = $.makeArray($(element).parent().find(Selector.ITEM));
      return this._items.indexOf(element);
    };

    Carousel.prototype._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;
      var activeIndex = this._getItemIndex(activeElement);
      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;

      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    Carousel.prototype._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);
      var fromIndex = this._getItemIndex($(this._element).find(Selector.ACTIVE_ITEM)[0]);
      var slideEvent = $.Event(Event.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });

      $(this._element).trigger(slideEvent);

      return slideEvent;
    };

    Carousel.prototype._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        $(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $(nextIndicator).addClass(ClassName.ACTIVE);
        }
      }
    };

    Carousel.prototype._slide = function _slide(direction, element) {
      var _this5 = this;

      var activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];
      var activeElementIndex = this._getItemIndex(activeElement);
      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
      var nextElementIndex = this._getItemIndex(nextElement);
      var isCycling = Boolean(this._interval);

      var directionalClassName = void 0;
      var orderClassName = void 0;
      var eventDirectionName = void 0;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName.LEFT;
        orderClassName = ClassName.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName.RIGHT;
        orderClassName = ClassName.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      var slidEvent = $.Event(Event.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.SLIDE)) {

        $(nextElement).addClass(orderClassName);

        Util.reflow(nextElement);

        $(activeElement).addClass(directionalClassName);
        $(nextElement).addClass(directionalClassName);

        $(activeElement).one(Util.TRANSITION_END, function () {
          $(nextElement).removeClass(directionalClassName + ' ' + orderClassName).addClass(ClassName.ACTIVE);

          $(activeElement).removeClass(ClassName.ACTIVE + ' ' + orderClassName + ' ' + directionalClassName);

          _this5._isSliding = false;

          setTimeout(function () {
            return $(_this5._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        $(activeElement).removeClass(ClassName.ACTIVE);
        $(nextElement).addClass(ClassName.ACTIVE);

        this._isSliding = false;
        $(this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    };

    // static

    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var _config = $.extend({}, Default, $(this).data());

        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
          $.extend(_config, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $(this).data(DATA_KEY, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (data[action] === undefined) {
            throw new Error('No method named "' + action + '"');
          }
          data[action]();
        } else if (_config.interval) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $(selector)[0];

      if (!target || !$(target).hasClass(ClassName.CAROUSEL)) {
        return;
      }

      var config = $.extend({}, $(target).data(), $(this).data());
      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($(target), config);

      if (slideIndex) {
        $(target).data(DATA_KEY).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }]);

    return Carousel;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);

  $(window).on(Event.LOAD_DATA_API, function () {
    $(Selector.DATA_RIDE).each(function () {
      var $carousel = $(this);
      Carousel._jQueryInterface.call($carousel, $carousel.data());
    });
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Carousel._jQueryInterface;
  $.fn[NAME].Constructor = Carousel;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Carousel._jQueryInterface;
  };

  return Carousel;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Collapse = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'collapse';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.collapse';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 600;

  var Default = {
    toggle: true,
    parent: ''
  };

  var DefaultType = {
    toggle: 'boolean',
    parent: 'string'
  };

  var Event = {
    SHOW: 'show' + EVENT_KEY,
    SHOWN: 'shown' + EVENT_KEY,
    HIDE: 'hide' + EVENT_KEY,
    HIDDEN: 'hidden' + EVENT_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    SHOW: 'show',
    COLLAPSE: 'collapse',
    COLLAPSING: 'collapsing',
    COLLAPSED: 'collapsed'
  };

  var Dimension = {
    WIDTH: 'width',
    HEIGHT: 'height'
  };

  var Selector = {
    ACTIVES: '.show, .collapsing',
    DATA_TOGGLE: '[data-toggle="collapse"]'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Collapse = function () {
    function Collapse(element, config) {
      _classCallCheck(this, Collapse);

      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = $.makeArray($('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')));
      var tabToggles = $(Selector.DATA_TOGGLE);
      for (var i = 0; i < tabToggles.length; i++) {
        var elem = tabToggles[i];
        var selector = Util.getSelectorFromElement(elem);
        if (selector !== null && $(selector).filter(element).length > 0) {
          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    }

    // getters

    // public

    Collapse.prototype.toggle = function toggle() {
      if ($(this._element).hasClass(ClassName.SHOW)) {
        this.hide();
      } else {
        this.show();
      }
    };

    Collapse.prototype.show = function show() {
      var _this6 = this;

      if (this._isTransitioning || $(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var actives = void 0;
      var activesData = void 0;

      if (this._parent) {
        actives = $.makeArray($(this._parent).children().children(Selector.ACTIVES));
        if (!actives.length) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $(actives).data(DATA_KEY);
        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $.Event(Event.SHOW);
      $(this._element).trigger(startEvent);
      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($(actives), 'hide');
        if (!activesData) {
          $(actives).data(DATA_KEY, null);
        }
      }

      var dimension = this._getDimension();

      $(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);

      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        $(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $(_this6._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);

        _this6._element.style[dimension] = '';

        _this6.setTransitioning(false);

        $(_this6._element).trigger(Event.SHOWN);
      };

      if (!Util.supportsTransitionEnd()) {
        complete();
        return;
      }

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = 'scroll' + capitalizedDimension;

      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);

      this._element.style[dimension] = this._element[scrollSize] + 'px';
    };

    Collapse.prototype.hide = function hide() {
      var _this7 = this;

      if (this._isTransitioning || !$(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var startEvent = $.Event(Event.HIDE);
      $(this._element).trigger(startEvent);
      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + 'px';

      Util.reflow(this._element);

      $(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

      if (this._triggerArray.length) {
        for (var i = 0; i < this._triggerArray.length; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);
          if (selector !== null) {
            var $elem = $(selector);
            if (!$elem.hasClass(ClassName.SHOW)) {
              $(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this7.setTransitioning(false);
        $(_this7._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
      };

      this._element.style[dimension] = '';

      if (!Util.supportsTransitionEnd()) {
        complete();
        return;
      }

      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
    };

    Collapse.prototype.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    Collapse.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);

      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    };

    // private

    Collapse.prototype._getConfig = function _getConfig(config) {
      config = $.extend({}, Default, config);
      config.toggle = Boolean(config.toggle); // coerce string values
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    Collapse.prototype._getDimension = function _getDimension() {
      var hasWidth = $(this._element).hasClass(Dimension.WIDTH);
      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
    };

    Collapse.prototype._getParent = function _getParent() {
      var _this8 = this;

      var parent = $(this._config.parent)[0];
      var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';

      $(parent).find(selector).each(function (i, element) {
        _this8._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });

      return parent;
    };

    Collapse.prototype._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      if (element) {
        var isOpen = $(element).hasClass(ClassName.SHOW);

        if (triggerArray.length) {
          $(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
        }
      }
    };

    // static

    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? $(selector)[0] : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_KEY);
        var _config = $.extend({}, Default, $this.data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config);

        if (!data && _config.toggle && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }]);

    return Collapse;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    if (!/input|textarea/i.test(event.target.tagName)) {
      event.preventDefault();
    }

    var $trigger = $(this);
    var selector = Util.getSelectorFromElement(this);
    $(selector).each(function () {
      var $target = $(this);
      var data = $target.data(DATA_KEY);
      var config = data ? 'toggle' : $trigger.data();
      Collapse._jQueryInterface.call($target, config);
    });
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Collapse._jQueryInterface;
  $.fn[NAME].Constructor = Collapse;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Collapse._jQueryInterface;
  };

  return Collapse;
}(jQuery);

/* global Popper */

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Dropdown = function ($) {

  /**
   * Check for Popper dependency
   * Popper - https://popper.js.org
   */
  if (typeof Popper === 'undefined') {
    throw new Error('Bootstrap dropdown require Popper.js (https://popper.js.org)');
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'dropdown';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.dropdown';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key
  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key
  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key
  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key
  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)
  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + '|' + ARROW_DOWN_KEYCODE + '|' + ESCAPE_KEYCODE);

  var Event = {
    HIDE: 'hide' + EVENT_KEY,
    HIDDEN: 'hidden' + EVENT_KEY,
    SHOW: 'show' + EVENT_KEY,
    SHOWN: 'shown' + EVENT_KEY,
    CLICK: 'click' + EVENT_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,
    KEYDOWN_DATA_API: 'keydown' + EVENT_KEY + DATA_API_KEY,
    KEYUP_DATA_API: 'keyup' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    DISABLED: 'disabled',
    SHOW: 'show',
    DROPUP: 'dropup',
    MENURIGHT: 'dropdown-menu-right',
    MENULEFT: 'dropdown-menu-left'
  };

  var Selector = {
    DATA_TOGGLE: '[data-toggle="dropdown"]',
    FORM_CHILD: '.dropdown form',
    MENU: '.dropdown-menu',
    NAVBAR_NAV: '.navbar-nav',
    VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled)'
  };

  var AttachmentMap = {
    TOP: 'top-start',
    TOPEND: 'top-end',
    BOTTOM: 'bottom-start',
    BOTTOMEND: 'bottom-end'
  };

  var Default = {
    placement: AttachmentMap.BOTTOM,
    offset: 0,
    flip: true
  };

  var DefaultType = {
    placement: 'string',
    offset: '(number|string)',
    flip: 'boolean'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Dropdown = function () {
    function Dropdown(element, config) {
      _classCallCheck(this, Dropdown);

      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    }

    // getters

    // public

    Dropdown.prototype.toggle = function toggle() {
      if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this._element);
      var isActive = $(this._menu).hasClass(ClassName.SHOW);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $.Event(Event.SHOW, relatedTarget);

      $(parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      }

      var element = this._element;
      // for dropup with alignment we use the parent as popper container
      if ($(parent).hasClass(ClassName.DROPUP)) {
        if ($(this._menu).hasClass(ClassName.MENULEFT) || $(this._menu).hasClass(ClassName.MENURIGHT)) {
          element = parent;
        }
      }
      this._popper = new Popper(element, this._menu, this._getPopperConfig());

      // if this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
      if ('ontouchstart' in document.documentElement && !$(parent).closest(Selector.NAVBAR_NAV).length) {
        $('body').children().on('mouseover', null, $.noop);
      }

      this._element.focus();
      this._element.setAttribute('aria-expanded', true);

      $(this._menu).toggleClass(ClassName.SHOW);
      $(parent).toggleClass(ClassName.SHOW).trigger($.Event(Event.SHOWN, relatedTarget));
    };

    Dropdown.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      $(this._element).off(EVENT_KEY);
      this._element = null;
      this._menu = null;
      if (this._popper !== null) {
        this._popper.destroy();
      }
      this._popper = null;
    };

    Dropdown.prototype.update = function update() {
      this._inNavbar = this._detectNavbar();
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    };

    // private

    Dropdown.prototype._addEventListeners = function _addEventListeners() {
      var _this9 = this;

      $(this._element).on(Event.CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();
        _this9.toggle();
      });
    };

    Dropdown.prototype._getConfig = function _getConfig(config) {
      var elementData = $(this._element).data();
      if (elementData.placement !== undefined) {
        elementData.placement = AttachmentMap[elementData.placement.toUpperCase()];
      }

      config = $.extend({}, this.constructor.Default, $(this._element).data(), config);

      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);

      return config;
    };

    Dropdown.prototype._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);
        this._menu = $(parent).find(Selector.MENU)[0];
      }
      return this._menu;
    };

    Dropdown.prototype._getPlacement = function _getPlacement() {
      var $parentDropdown = $(this._element).parent();
      var placement = this._config.placement;

      // Handle dropup
      if ($parentDropdown.hasClass(ClassName.DROPUP) || this._config.placement === AttachmentMap.TOP) {
        placement = AttachmentMap.TOP;
        if ($(this._menu).hasClass(ClassName.MENURIGHT)) {
          placement = AttachmentMap.TOPEND;
        }
      } else if ($(this._menu).hasClass(ClassName.MENURIGHT)) {
        placement = AttachmentMap.BOTTOMEND;
      }
      return placement;
    };

    Dropdown.prototype._detectNavbar = function _detectNavbar() {
      return $(this._element).closest('.navbar').length > 0;
    };

    Dropdown.prototype._getPopperConfig = function _getPopperConfig() {
      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: {
            offset: this._config.offset
          },
          flip: {
            enabled: this._config.flip
          }
        }

        // Disable Popper.js for Dropdown in Navbar
      };if (this._inNavbar) {
        popperConfig.modifiers.applyStyle = {
          enabled: !this._inNavbar
        };
      }
      return popperConfig;
    };

    // static

    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = $.makeArray($(Selector.DATA_TOGGLE));
      for (var i = 0; i < toggles.length; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);
        var context = $(toggles[i]).data(DATA_KEY);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;
        if (!$(parent).hasClass(ClassName.SHOW)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $.Event(Event.HIDE, relatedTarget);
        $(parent).trigger(hideEvent);
        if (hideEvent.isDefaultPrevented()) {
          continue;
        }

        // if this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) {
          $('body').children().off('mouseover', null, $.noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');

        $(dropdownMenu).removeClass(ClassName.SHOW);
        $(parent).removeClass(ClassName.SHOW).trigger($.Event(Event.HIDDEN, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent = void 0;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = $(selector)[0];
      }

      return parent || element.parentNode;
    };

    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      if (!REGEXP_KEYDOWN.test(event.which) || /button/i.test(event.target.tagName) && event.which === SPACE_KEYCODE || /input|textarea/i.test(event.target.tagName)) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);
      var isActive = $(parent).hasClass(ClassName.SHOW);

      if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {

        if (event.which === ESCAPE_KEYCODE) {
          var toggle = $(parent).find(Selector.DATA_TOGGLE)[0];
          $(toggle).trigger('focus');
        }

        $(this).trigger('click');
        return;
      }

      var items = $(parent).find(Selector.VISIBLE_ITEMS).get();

      if (!items.length) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }, {
      key: 'DefaultType',
      get: function get() {
        return DefaultType;
      }
    }]);

    return Dropdown;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + ' ' + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    event.preventDefault();
    event.stopPropagation();
    Dropdown._jQueryInterface.call($(this), 'toggle');
  }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
    e.stopPropagation();
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Dropdown._jQueryInterface;
  $.fn[NAME].Constructor = Dropdown;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Dropdown._jQueryInterface;
  };

  return Dropdown;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Modal = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'modal';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.modal';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 300;
  var BACKDROP_TRANSITION_DURATION = 150;
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };

  var DefaultType = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };

  var Event = {
    HIDE: 'hide' + EVENT_KEY,
    HIDDEN: 'hidden' + EVENT_KEY,
    SHOW: 'show' + EVENT_KEY,
    SHOWN: 'shown' + EVENT_KEY,
    FOCUSIN: 'focusin' + EVENT_KEY,
    RESIZE: 'resize' + EVENT_KEY,
    CLICK_DISMISS: 'click.dismiss' + EVENT_KEY,
    KEYDOWN_DISMISS: 'keydown.dismiss' + EVENT_KEY,
    MOUSEUP_DISMISS: 'mouseup.dismiss' + EVENT_KEY,
    MOUSEDOWN_DISMISS: 'mousedown.dismiss' + EVENT_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    SHOW: 'show'
  };

  var Selector = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    NAVBAR_TOGGLER: '.navbar-toggler'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Modal = function () {
    function Modal(element, config) {
      _classCallCheck(this, Modal);

      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = $(element).find(Selector.DIALOG)[0];
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._originalBodyPadding = 0;
      this._scrollbarWidth = 0;
    }

    // getters

    // public

    Modal.prototype.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    Modal.prototype.show = function show(relatedTarget) {
      var _this10 = this;

      if (this._isTransitioning) {
        return;
      }

      if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = $.Event(Event.SHOW, {
        relatedTarget: relatedTarget
      });

      $(this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();
      this._setScrollbar();

      $(document.body).addClass(ClassName.OPEN);

      this._setEscapeEvent();
      this._setResizeEvent();

      $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
        return _this10.hide(event);
      });

      $(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
        $(_this10._element).one(Event.MOUSEUP_DISMISS, function (event) {
          if ($(event.target).is(_this10._element)) {
            _this10._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this10._showElement(relatedTarget);
      });
    };

    Modal.prototype.hide = function hide(event) {
      var _this11 = this;

      if (event) {
        event.preventDefault();
      }

      if (this._isTransitioning || !this._isShown) {
        return;
      }

      var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      var hideEvent = $.Event(Event.HIDE);

      $(this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;

      this._setEscapeEvent();
      this._setResizeEvent();

      $(document).off(Event.FOCUSIN);

      $(this._element).removeClass(ClassName.SHOW);

      $(this._element).off(Event.CLICK_DISMISS);
      $(this._dialog).off(Event.MOUSEDOWN_DISMISS);

      if (transition) {

        $(this._element).one(Util.TRANSITION_END, function (event) {
          return _this11._hideModal(event);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        this._hideModal();
      }
    };

    Modal.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);

      $(window, document, this._element, this._backdrop).off(EVENT_KEY);

      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._scrollbarWidth = null;
    };

    Modal.prototype.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    };

    // private

    Modal.prototype._getConfig = function _getConfig(config) {
      config = $.extend({}, Default, config);
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    Modal.prototype._showElement = function _showElement(relatedTarget) {
      var _this12 = this;

      var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // don't move modals dom position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';
      this._element.removeAttribute('aria-hidden');
      this._element.scrollTop = 0;

      if (transition) {
        Util.reflow(this._element);
      }

      $(this._element).addClass(ClassName.SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $.Event(Event.SHOWN, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this12._config.focus) {
          _this12._element.focus();
        }
        _this12._isTransitioning = false;
        $(_this12._element).trigger(shownEvent);
      };

      if (transition) {
        $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        transitionComplete();
      }
    };

    Modal.prototype._enforceFocus = function _enforceFocus() {
      var _this13 = this;

      $(document).off(Event.FOCUSIN) // guard against infinite focus loop
      .on(Event.FOCUSIN, function (event) {
        if (document !== event.target && _this13._element !== event.target && !$(_this13._element).has(event.target).length) {
          _this13._element.focus();
        }
      });
    };

    Modal.prototype._setEscapeEvent = function _setEscapeEvent() {
      var _this14 = this;

      if (this._isShown && this._config.keyboard) {
        $(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
          if (event.which === ESCAPE_KEYCODE) {
            event.preventDefault();
            _this14.hide();
          }
        });
      } else if (!this._isShown) {
        $(this._element).off(Event.KEYDOWN_DISMISS);
      }
    };

    Modal.prototype._setResizeEvent = function _setResizeEvent() {
      var _this15 = this;

      if (this._isShown) {
        $(window).on(Event.RESIZE, function (event) {
          return _this15.handleUpdate(event);
        });
      } else {
        $(window).off(Event.RESIZE);
      }
    };

    Modal.prototype._hideModal = function _hideModal() {
      var _this16 = this;

      this._element.style.display = 'none';
      this._element.setAttribute('aria-hidden', true);
      this._isTransitioning = false;
      this._showBackdrop(function () {
        $(document.body).removeClass(ClassName.OPEN);
        _this16._resetAdjustments();
        _this16._resetScrollbar();
        $(_this16._element).trigger(Event.HIDDEN);
      });
    };

    Modal.prototype._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $(this._backdrop).remove();
        this._backdrop = null;
      }
    };

    Modal.prototype._showBackdrop = function _showBackdrop(callback) {
      var _this17 = this;

      var animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

      if (this._isShown && this._config.backdrop) {
        var doAnimate = Util.supportsTransitionEnd() && animate;

        this._backdrop = document.createElement('div');
        this._backdrop.className = ClassName.BACKDROP;

        if (animate) {
          $(this._backdrop).addClass(animate);
        }

        $(this._backdrop).appendTo(document.body);

        $(this._element).on(Event.CLICK_DISMISS, function (event) {
          if (_this17._ignoreBackdropClick) {
            _this17._ignoreBackdropClick = false;
            return;
          }
          if (event.target !== event.currentTarget) {
            return;
          }
          if (_this17._config.backdrop === 'static') {
            _this17._element.focus();
          } else {
            _this17.hide();
          }
        });

        if (doAnimate) {
          Util.reflow(this._backdrop);
        }

        $(this._backdrop).addClass(ClassName.SHOW);

        if (!callback) {
          return;
        }

        if (!doAnimate) {
          callback();
          return;
        }

        $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
      } else if (!this._isShown && this._backdrop) {
        $(this._backdrop).removeClass(ClassName.SHOW);

        var callbackRemove = function callbackRemove() {
          _this17._removeBackdrop();
          if (callback) {
            callback();
          }
        };

        if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {
          $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    };

    // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------

    Modal.prototype._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + 'px';
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + 'px';
      }
    };

    Modal.prototype._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    Modal.prototype._checkScrollbar = function _checkScrollbar() {
      this._isBodyOverflowing = document.body.clientWidth < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    Modal.prototype._setScrollbar = function _setScrollbar() {
      var _this18 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set

        // Adjust fixed content padding
        $(Selector.FIXED_CONTENT).each(function (index, element) {
          var actualPadding = $(element)[0].style.paddingRight;
          var calculatedPadding = $(element).css('padding-right');
          $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this18._scrollbarWidth + 'px');
        });

        // Adjust navbar-toggler margin
        $(Selector.NAVBAR_TOGGLER).each(function (index, element) {
          var actualMargin = $(element)[0].style.marginRight;
          var calculatedMargin = $(element).css('margin-right');
          $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this18._scrollbarWidth + 'px');
        });

        // Adjust body padding
        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $('body').css('padding-right');
        $('body').data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + 'px');
      }
    };

    Modal.prototype._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      $(Selector.FIXED_CONTENT).each(function (index, element) {
        var padding = $(element).data('padding-right');
        if (typeof padding !== 'undefined') {
          $(element).css('padding-right', padding).removeData('padding-right');
        }
      });

      // Restore navbar-toggler margin
      $(Selector.NAVBAR_TOGGLER).each(function (index, element) {
        var margin = $(element).data('margin-right');
        if (typeof margin !== 'undefined') {
          $(element).css('margin-right', margin).removeData('margin-right');
        }
      });

      // Restore body padding
      var padding = $('body').data('padding-right');
      if (typeof padding !== 'undefined') {
        $('body').css('padding-right', padding).removeData('padding-right');
      }
    };

    Modal.prototype._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    };

    // static

    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var _config = $.extend({}, Modal.Default, $(this).data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config);

        if (!data) {
          data = new Modal(this, _config);
          $(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }]);

    return Modal;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    var _this19 = this;

    var target = void 0;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = $(selector)[0];
    }

    var config = $(target).data(DATA_KEY) ? 'toggle' : $.extend({}, $(target).data(), $(this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $(target).one(Event.SHOW, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(Event.HIDDEN, function () {
        if ($(_this19).is(':visible')) {
          _this19.focus();
        }
      });
    });

    Modal._jQueryInterface.call($(target), config, this);
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Modal._jQueryInterface;
  $.fn[NAME].Constructor = Modal;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Modal._jQueryInterface;
  };

  return Modal;
}(jQuery);

/* global Popper */

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tooltip = function ($) {

  /**
   * Check for Popper dependency
   * Popper - https://popper.js.org
   */
  if (typeof Popper === 'undefined') {
    throw new Error('Bootstrap tooltips require Popper.js (https://popper.js.org)');
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'tooltip';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.tooltip';
  var EVENT_KEY = '.' + DATA_KEY;
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 150;
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp('(^|\\s)' + CLASS_PREFIX + '\\S+', 'g');

  var DefaultType = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)'
  };

  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };

  var Default = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip'
  };

  var HoverState = {
    SHOW: 'show',
    OUT: 'out'
  };

  var Event = {
    HIDE: 'hide' + EVENT_KEY,
    HIDDEN: 'hidden' + EVENT_KEY,
    SHOW: 'show' + EVENT_KEY,
    SHOWN: 'shown' + EVENT_KEY,
    INSERTED: 'inserted' + EVENT_KEY,
    CLICK: 'click' + EVENT_KEY,
    FOCUSIN: 'focusin' + EVENT_KEY,
    FOCUSOUT: 'focusout' + EVENT_KEY,
    MOUSEENTER: 'mouseenter' + EVENT_KEY,
    MOUSELEAVE: 'mouseleave' + EVENT_KEY
  };

  var ClassName = {
    FADE: 'fade',
    SHOW: 'show'
  };

  var Selector = {
    TOOLTIP: '.tooltip',
    TOOLTIP_INNER: '.tooltip-inner',
    ARROW: '.arrow'
  };

  var Trigger = {
    HOVER: 'hover',
    FOCUS: 'focus',
    CLICK: 'click',
    MANUAL: 'manual'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Tooltip = function () {
    function Tooltip(element, config) {
      _classCallCheck(this, Tooltip);

      // private
      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null;

      // protected
      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    }

    // getters

    // public

    Tooltip.prototype.enable = function enable() {
      this._isEnabled = true;
    };

    Tooltip.prototype.disable = function disable() {
      this._isEnabled = false;
    };

    Tooltip.prototype.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    Tooltip.prototype.toggle = function toggle(event) {
      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $(event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {

        if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {
          this._leave(null, this);
          return;
        }

        this._enter(null, this);
      }
    };

    Tooltip.prototype.dispose = function dispose() {
      clearTimeout(this._timeout);

      $.removeData(this.element, this.constructor.DATA_KEY);

      $(this.element).off(this.constructor.EVENT_KEY);
      $(this.element).closest('.modal').off('hide.bs.modal');

      if (this.tip) {
        $(this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;
      if (this._popper !== null) {
        this._popper.destroy();
      }
      this._popper = null;

      this.element = null;
      this.config = null;
      this.tip = null;
    };

    Tooltip.prototype.show = function show() {
      var _this20 = this;

      if ($(this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $.Event(this.constructor.Event.SHOW);
      if (this.isWithContent() && this._isEnabled) {
        $(this.element).trigger(showEvent);

        var isInTheDom = $.contains(this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);

        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);

        this.setContent();

        if (this.config.animation) {
          $(tip).addClass(ClassName.FADE);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);
        this.addAttachmentClass(attachment);

        var container = this.config.container === false ? document.body : $(this.config.container);

        $(tip).data(this.constructor.DATA_KEY, this);

        if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {
          $(tip).appendTo(container);
        }

        $(this.element).trigger(this.constructor.Event.INSERTED);

        this._popper = new Popper(this.element, tip, {
          placement: attachment,
          modifiers: {
            offset: {
              offset: this.config.offset
            },
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: Selector.ARROW
            }
          },
          onCreate: function onCreate(data) {
            if (data.originalPlacement !== data.placement) {
              _this20._handlePopperPlacementChange(data);
            }
          },
          onUpdate: function onUpdate(data) {
            _this20._handlePopperPlacementChange(data);
          }
        });

        $(tip).addClass(ClassName.SHOW);

        // if this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement) {
          $('body').children().on('mouseover', null, $.noop);
        }

        var complete = function complete() {
          if (_this20.config.animation) {
            _this20._fixTransition();
          }
          var prevHoverState = _this20._hoverState;
          _this20._hoverState = null;

          $(_this20.element).trigger(_this20.constructor.Event.SHOWN);

          if (prevHoverState === HoverState.OUT) {
            _this20._leave(null, _this20);
          }
        };

        if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {
          $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
        } else {
          complete();
        }
      }
    };

    Tooltip.prototype.hide = function hide(callback) {
      var _this21 = this;

      var tip = this.getTipElement();
      var hideEvent = $.Event(this.constructor.Event.HIDE);
      var complete = function complete() {
        if (_this21._hoverState !== HoverState.SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this21._cleanTipClass();
        _this21.element.removeAttribute('aria-describedby');
        $(_this21.element).trigger(_this21.constructor.Event.HIDDEN);
        if (_this21._popper !== null) {
          _this21._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $(this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $(tip).removeClass(ClassName.SHOW);

      // if this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        $('body').children().off('mouseover', null, $.noop);
      }

      this._activeTrigger[Trigger.CLICK] = false;
      this._activeTrigger[Trigger.FOCUS] = false;
      this._activeTrigger[Trigger.HOVER] = false;

      if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {

        $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    Tooltip.prototype.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    };

    // protected

    Tooltip.prototype.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    Tooltip.prototype.addAttachmentClass = function addAttachmentClass(attachment) {
      $(this.getTipElement()).addClass(CLASS_PREFIX + '-' + attachment);
    };

    Tooltip.prototype.getTipElement = function getTipElement() {
      return this.tip = this.tip || $(this.config.template)[0];
    };

    Tooltip.prototype.setContent = function setContent() {
      var $tip = $(this.getTipElement());
      this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
      $tip.removeClass(ClassName.FADE + ' ' + ClassName.SHOW);
    };

    Tooltip.prototype.setElementContent = function setElementContent($element, content) {
      var html = this.config.html;
      if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && (content.nodeType || content.jquery)) {
        // content is a DOM node or a jQuery
        if (html) {
          if (!$(content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($(content).text());
        }
      } else {
        $element[html ? 'html' : 'text'](content);
      }
    };

    Tooltip.prototype.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    };

    // private

    Tooltip.prototype._getAttachment = function _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    };

    Tooltip.prototype._setListeners = function _setListeners() {
      var _this22 = this;

      var triggers = this.config.trigger.split(' ');

      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $(_this22.element).on(_this22.constructor.Event.CLICK, _this22.config.selector, function (event) {
            return _this22.toggle(event);
          });
        } else if (trigger !== Trigger.MANUAL) {
          var eventIn = trigger === Trigger.HOVER ? _this22.constructor.Event.MOUSEENTER : _this22.constructor.Event.FOCUSIN;
          var eventOut = trigger === Trigger.HOVER ? _this22.constructor.Event.MOUSELEAVE : _this22.constructor.Event.FOCUSOUT;

          $(_this22.element).on(eventIn, _this22.config.selector, function (event) {
            return _this22._enter(event);
          }).on(eventOut, _this22.config.selector, function (event) {
            return _this22._leave(event);
          });
        }

        $(_this22.element).closest('.modal').on('hide.bs.modal', function () {
          return _this22.hide();
        });
      });

      if (this.config.selector) {
        this.config = $.extend({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    Tooltip.prototype._fixTitle = function _fixTitle() {
      var titleType = _typeof(this.element.getAttribute('data-original-title'));
      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    Tooltip.prototype._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;

      context = context || $(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
      }

      if ($(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
        context._hoverState = HoverState.SHOW;
        return;
      }

      clearTimeout(context._timeout);

      context._hoverState = HoverState.SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    Tooltip.prototype._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;

      context = context || $(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);

      context._hoverState = HoverState.OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    Tooltip.prototype._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    Tooltip.prototype._getConfig = function _getConfig(config) {
      config = $.extend({}, this.constructor.Default, $(this.element).data(), config);

      if (config.delay && typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (config.title && typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (config.content && typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);

      return config;
    };

    Tooltip.prototype._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    Tooltip.prototype._cleanTipClass = function _cleanTipClass() {
      var $tip = $(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    Tooltip.prototype._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
      this._cleanTipClass();
      this.addAttachmentClass(this._getAttachment(data.placement));
    };

    Tooltip.prototype._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;
      if (tip.getAttribute('x-placement') !== null) {
        return;
      }
      $(tip).removeClass(ClassName.FADE);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    };

    // static

    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }, {
      key: 'NAME',
      get: function get() {
        return NAME;
      }
    }, {
      key: 'DATA_KEY',
      get: function get() {
        return DATA_KEY;
      }
    }, {
      key: 'Event',
      get: function get() {
        return Event;
      }
    }, {
      key: 'EVENT_KEY',
      get: function get() {
        return EVENT_KEY;
      }
    }, {
      key: 'DefaultType',
      get: function get() {
        return DefaultType;
      }
    }]);

    return Tooltip;
  }();

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Tooltip._jQueryInterface;
  $.fn[NAME].Constructor = Tooltip;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Tooltip._jQueryInterface;
  };

  return Tooltip;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Popover = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'popover';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.popover';
  var EVENT_KEY = '.' + DATA_KEY;
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var CLASS_PREFIX = 'bs-popover';
  var BSCLS_PREFIX_REGEX = new RegExp('(^|\\s)' + CLASS_PREFIX + '\\S+', 'g');

  var Default = $.extend({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });

  var DefaultType = $.extend({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });

  var ClassName = {
    FADE: 'fade',
    SHOW: 'show'
  };

  var Selector = {
    TITLE: '.popover-header',
    CONTENT: '.popover-body'
  };

  var Event = {
    HIDE: 'hide' + EVENT_KEY,
    HIDDEN: 'hidden' + EVENT_KEY,
    SHOW: 'show' + EVENT_KEY,
    SHOWN: 'shown' + EVENT_KEY,
    INSERTED: 'inserted' + EVENT_KEY,
    CLICK: 'click' + EVENT_KEY,
    FOCUSIN: 'focusin' + EVENT_KEY,
    FOCUSOUT: 'focusout' + EVENT_KEY,
    MOUSEENTER: 'mouseenter' + EVENT_KEY,
    MOUSELEAVE: 'mouseleave' + EVENT_KEY

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Popover = function (_Tooltip) {
    _inherits(Popover, _Tooltip);

    function Popover() {
      _classCallCheck(this, Popover);

      return _possibleConstructorReturn(this, _Tooltip.apply(this, arguments));
    }

    // overrides

    Popover.prototype.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    Popover.prototype.addAttachmentClass = function addAttachmentClass(attachment) {
      $(this.getTipElement()).addClass(CLASS_PREFIX + '-' + attachment);
    };

    Popover.prototype.getTipElement = function getTipElement() {
      return this.tip = this.tip || $(this.config.template)[0];
    };

    Popover.prototype.setContent = function setContent() {
      var $tip = $(this.getTipElement());

      // we use append for html objects to maintain js events
      this.setElementContent($tip.find(Selector.TITLE), this.getTitle());
      this.setElementContent($tip.find(Selector.CONTENT), this._getContent());

      $tip.removeClass(ClassName.FADE + ' ' + ClassName.SHOW);
    };

    // private

    Popover.prototype._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || (typeof this.config.content === 'function' ? this.config.content.call(this.element) : this.config.content);
    };

    Popover.prototype._cleanTipClass = function _cleanTipClass() {
      var $tip = $(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    // static

    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' ? config : null;

        if (!data && /destroy|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: 'VERSION',


      // getters

      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }, {
      key: 'NAME',
      get: function get() {
        return NAME;
      }
    }, {
      key: 'DATA_KEY',
      get: function get() {
        return DATA_KEY;
      }
    }, {
      key: 'Event',
      get: function get() {
        return Event;
      }
    }, {
      key: 'EVENT_KEY',
      get: function get() {
        return EVENT_KEY;
      }
    }, {
      key: 'DefaultType',
      get: function get() {
        return DefaultType;
      }
    }]);

    return Popover;
  }(Tooltip);

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Popover._jQueryInterface;
  $.fn[NAME].Constructor = Popover;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Popover._jQueryInterface;
  };

  return Popover;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var ScrollSpy = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'scrollspy';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.scrollspy';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];

  var Default = {
    offset: 10,
    method: 'auto',
    target: ''
  };

  var DefaultType = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };

  var Event = {
    ACTIVATE: 'activate' + EVENT_KEY,
    SCROLL: 'scroll' + EVENT_KEY,
    LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    DROPDOWN_ITEM: 'dropdown-item',
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active'
  };

  var Selector = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: '.active',
    NAV_LIST_GROUP: '.nav, .list-group',
    NAV_LINKS: '.nav-link',
    LIST_ITEMS: '.list-group-item',
    DROPDOWN: '.dropdown',
    DROPDOWN_ITEMS: '.dropdown-item',
    DROPDOWN_TOGGLE: '.dropdown-toggle'
  };

  var OffsetMethod = {
    OFFSET: 'offset',
    POSITION: 'position'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var ScrollSpy = function () {
    function ScrollSpy(element, config) {
      var _this24 = this;

      _classCallCheck(this, ScrollSpy);

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + ' ' + Selector.NAV_LINKS + ',' + (this._config.target + ' ' + Selector.LIST_ITEMS + ',') + (this._config.target + ' ' + Selector.DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;

      $(this._scrollElement).on(Event.SCROLL, function (event) {
        return _this24._process(event);
      });

      this.refresh();
      this._process();
    }

    // getters

    // public

    ScrollSpy.prototype.refresh = function refresh() {
      var _this25 = this;

      var autoMethod = this._scrollElement !== this._scrollElement.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;

      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;

      var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;

      this._offsets = [];
      this._targets = [];

      this._scrollHeight = this._getScrollHeight();

      var targets = $.makeArray($(this._selector));

      targets.map(function (element) {
        var target = void 0;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = $(targetSelector)[0];
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();
          if (targetBCR.width || targetBCR.height) {
            // todo (fat): remove sketch reliance on jQuery position/offset
            return [$(target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }
        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this25._offsets.push(item[0]);
        _this25._targets.push(item[1]);
      });
    };

    ScrollSpy.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      $(this._scrollElement).off(EVENT_KEY);

      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    };

    // private

    ScrollSpy.prototype._getConfig = function _getConfig(config) {
      config = $.extend({}, Default, config);

      if (typeof config.target !== 'string') {
        var id = $(config.target).attr('id');
        if (!id) {
          id = Util.getUID(NAME);
          $(config.target).attr('id', id);
        }
        config.target = '#' + id;
      }

      Util.typeCheckConfig(NAME, config, DefaultType);

      return config;
    };

    ScrollSpy.prototype._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    ScrollSpy.prototype._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    ScrollSpy.prototype._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    ScrollSpy.prototype._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;
      var scrollHeight = this._getScrollHeight();
      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }
        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;
        this._clear();
        return;
      }

      for (var i = this._offsets.length; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (this._offsets[i + 1] === undefined || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    ScrollSpy.prototype._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(',');
      queries = queries.map(function (selector) {
        return selector + '[data-target="' + target + '"],' + (selector + '[href="' + target + '"]');
      });

      var $link = $(queries.join(','));

      if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
        $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        $link.addClass(ClassName.ACTIVE);
      } else {
        // Set triggered link as active
        $link.addClass(ClassName.ACTIVE);
        // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ', ' + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE);
      }

      $(this._scrollElement).trigger(Event.ACTIVATE, {
        relatedTarget: target
      });
    };

    ScrollSpy.prototype._clear = function _clear() {
      $(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
    };

    // static

    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }, {
      key: 'Default',
      get: function get() {
        return Default;
      }
    }]);

    return ScrollSpy;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(window).on(Event.LOAD_DATA_API, function () {
    var scrollSpys = $.makeArray($(Selector.DATA_SPY));

    for (var i = scrollSpys.length; i--;) {
      var $spy = $(scrollSpys[i]);
      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = ScrollSpy._jQueryInterface;
  $.fn[NAME].Constructor = ScrollSpy;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return ScrollSpy._jQueryInterface;
  };

  return ScrollSpy;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tab = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'tab';
  var VERSION = '4.0.0-beta';
  var DATA_KEY = 'bs.tab';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 150;

  var Event = {
    HIDE: 'hide' + EVENT_KEY,
    HIDDEN: 'hidden' + EVENT_KEY,
    SHOW: 'show' + EVENT_KEY,
    SHOWN: 'shown' + EVENT_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    FADE: 'fade',
    SHOW: 'show'
  };

  var Selector = {
    DROPDOWN: '.dropdown',
    NAV_LIST_GROUP: '.nav, .list-group',
    ACTIVE: '.active',
    DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
    DROPDOWN_TOGGLE: '.dropdown-toggle',
    DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'

    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };
  var Tab = function () {
    function Tab(element) {
      _classCallCheck(this, Tab);

      this._element = element;
    }

    // getters

    // public

    Tab.prototype.show = function show() {
      var _this26 = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName.ACTIVE) || $(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var target = void 0;
      var previous = void 0;
      var listElement = $(this._element).closest(Selector.NAV_LIST_GROUP)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        previous = $.makeArray($(listElement).find(Selector.ACTIVE));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $.Event(Event.HIDE, {
        relatedTarget: this._element
      });

      var showEvent = $.Event(Event.SHOW, {
        relatedTarget: previous
      });

      if (previous) {
        $(previous).trigger(hideEvent);
      }

      $(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = $(selector)[0];
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $.Event(Event.HIDDEN, {
          relatedTarget: _this26._element
        });

        var shownEvent = $.Event(Event.SHOWN, {
          relatedTarget: previous
        });

        $(previous).trigger(hiddenEvent);
        $(_this26._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    Tab.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    };

    // private

    Tab.prototype._activate = function _activate(element, container, callback) {
      var _this27 = this;

      var active = $(container).find(Selector.ACTIVE)[0];
      var isTransitioning = callback && Util.supportsTransitionEnd() && active && $(active).hasClass(ClassName.FADE);

      var complete = function complete() {
        return _this27._transitionComplete(element, active, isTransitioning, callback);
      };

      if (active && isTransitioning) {
        $(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }

      if (active) {
        $(active).removeClass(ClassName.SHOW);
      }
    };

    Tab.prototype._transitionComplete = function _transitionComplete(element, active, isTransitioning, callback) {
      if (active) {
        $(active).removeClass(ClassName.ACTIVE);

        var dropdownChild = $(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $(dropdownChild).removeClass(ClassName.ACTIVE);
        }

        active.setAttribute('aria-expanded', false);
      }

      $(element).addClass(ClassName.ACTIVE);
      element.setAttribute('aria-expanded', true);

      if (isTransitioning) {
        Util.reflow(element);
        $(element).addClass(ClassName.SHOW);
      } else {
        $(element).removeClass(ClassName.FADE);
      }

      if (element.parentNode && $(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {

        var dropdownElement = $(element).closest(Selector.DROPDOWN)[0];
        if (dropdownElement) {
          $(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    };

    // static

    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_KEY);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }]);

    return Tab;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    event.preventDefault();
    Tab._jQueryInterface.call($(this), 'show');
  });

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Tab._jQueryInterface;
  $.fn[NAME].Constructor = Tab;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Tab._jQueryInterface;
  };

  return Tab;
}(jQuery)

/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+ function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function Affix(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);

    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

    this.$element = $(element);
    this.affixed = null;
    this.unpin = null;
    this.pinnedOffset = null;

    this.checkPosition();
  };

  Affix.VERSION = '3.3.6';

  Affix.RESET = 'affix affix-top affix-bottom';

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
    }

    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;

    if (offsetTop != null && scrollTop <= offsetTop) return 'top';
    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';

    return false;
  };

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return;

    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = Math.max($(document).height(), $(document.body).height());

    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '');

      var affixType = 'affix' + (affix ? '-' + affix : '');
      var e = $.Event(affixType + '.bs.affix');

      this.$element.trigger(e);

      if (e.isDefaultPrevented()) return;

      this.affixed = affix;
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      });
    }
  };

  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.affix;

  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;

  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };

  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();

      data.offset = data.offset || {};

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null) data.offset.top = data.offsetTop;

      Plugin.call($spy, data);
    });
  });
}(jQuery);

/* =========================================================
 * bootstrap-datepicker.js
 * Repo: https://github.com/eternicode/bootstrap-datepicker/
 * Demo: http://eternicode.github.io/bootstrap-datepicker/
 * Docs: http://bootstrap-datepicker.readthedocs.org/
 * Forked from http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Started by Stefan Petre; improvements by Andrew Rowls + contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function ($, undefined) {

  function UTCDate() {
    return new Date(Date.UTC.apply(Date, arguments));
  }
  function UTCToday() {
    var today = new Date();
    return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
  }
  function isUTCEquals(date1, date2) {
    return date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate();
  }
  function alias(method) {
    return function () {
      return this[method].apply(this, arguments);
    };
  }

  var DateArray = function () {
    var extras = {
      get: function get(i) {
        return this.slice(i)[0];
      },
      contains: function contains(d) {
        // Array.indexOf is not cross-browser;
        // $.inArray doesn't work with Dates
        var val = d && d.valueOf();
        for (var i = 0, l = this.length; i < l; i++) {
          if (this[i].valueOf() === val) return i;
        }return -1;
      },
      remove: function remove(i) {
        this.splice(i, 1);
      },
      replace: function replace(new_array) {
        if (!new_array) return;
        if (!$.isArray(new_array)) new_array = [new_array];
        this.clear();
        this.push.apply(this, new_array);
      },
      clear: function clear() {
        this.length = 0;
      },
      copy: function copy() {
        var a = new DateArray();
        a.replace(this);
        return a;
      }
    };

    return function () {
      var a = [];
      a.push.apply(a, arguments);
      $.extend(a, extras);
      return a;
    };
  }();

  // Picker object

  var Datepicker = function Datepicker(element, options) {
    this._process_options(options);

    this.dates = new DateArray();
    this.viewDate = this.o.defaultViewDate;
    this.focusDate = null;

    this.element = $(element);
    this.isInline = false;
    this.isInput = this.element.is('input');
    this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;
    this.hasInput = this.component && this.element.find('input').length;
    if (this.component && this.component.length === 0) this.component = false;

    this.picker = $(DPGlobal.template);
    this._buildEvents();
    this._attachEvents();

    if (this.isInline) {
      this.picker.addClass('datepicker-inline').appendTo(this.element);
    } else {
      this.picker.addClass('datepicker-dropdown dropdown-menu');
    }

    if (this.o.rtl) {
      this.picker.addClass('datepicker-rtl');
    }

    this.viewMode = this.o.startView;

    if (this.o.calendarWeeks) this.picker.find('tfoot .today, tfoot .clear').attr('colspan', function (i, val) {
      return parseInt(val) + 1;
    });

    this._allow_update = false;

    this.setStartDate(this._o.startDate);
    this.setEndDate(this._o.endDate);
    this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);
    this.setDatesDisabled(this.o.datesDisabled);

    this.fillDow();
    this.fillMonths();

    this._allow_update = true;

    this.update();
    this.showMode();

    if (this.isInline) {
      this.show();
    }
  };

  Datepicker.prototype = {
    constructor: Datepicker,

    _process_options: function _process_options(opts) {
      // Store raw options for reference
      this._o = $.extend({}, this._o, opts);
      // Processed options
      var o = this.o = $.extend({}, this._o);

      // Check if "de-DE" style date is available, if not language should
      // fallback to 2 letter code eg "de"
      var lang = o.language;
      if (!dates[lang]) {
        lang = lang.split('-')[0];
        if (!dates[lang]) lang = defaults.language;
      }
      o.language = lang;

      switch (o.startView) {
        case 2:
        case 'decade':
          o.startView = 2;
          break;
        case 1:
        case 'year':
          o.startView = 1;
          break;
        default:
          o.startView = 0;
      }

      switch (o.minViewMode) {
        case 1:
        case 'months':
          o.minViewMode = 1;
          break;
        case 2:
        case 'years':
          o.minViewMode = 2;
          break;
        default:
          o.minViewMode = 0;
      }

      o.startView = Math.max(o.startView, o.minViewMode);

      // true, false, or Number > 0
      if (o.multidate !== true) {
        o.multidate = Number(o.multidate) || false;
        if (o.multidate !== false) o.multidate = Math.max(0, o.multidate);
      }
      o.multidateSeparator = String(o.multidateSeparator);

      o.weekStart %= 7;
      o.weekEnd = (o.weekStart + 6) % 7;

      var format = DPGlobal.parseFormat(o.format);
      if (o.startDate !== -Infinity) {
        if (!!o.startDate) {
          if (o.startDate instanceof Date) o.startDate = this._local_to_utc(this._zero_time(o.startDate));else o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);
        } else {
          o.startDate = -Infinity;
        }
      }
      if (o.endDate !== Infinity) {
        if (!!o.endDate) {
          if (o.endDate instanceof Date) o.endDate = this._local_to_utc(this._zero_time(o.endDate));else o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);
        } else {
          o.endDate = Infinity;
        }
      }

      o.daysOfWeekDisabled = o.daysOfWeekDisabled || [];
      if (!$.isArray(o.daysOfWeekDisabled)) o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
      o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {
        return parseInt(d, 10);
      });

      o.datesDisabled = o.datesDisabled || [];
      if (!$.isArray(o.datesDisabled)) {
        var datesDisabled = [];
        datesDisabled.push(DPGlobal.parseDate(o.datesDisabled, format, o.language));
        o.datesDisabled = datesDisabled;
      }
      o.datesDisabled = $.map(o.datesDisabled, function (d) {
        return DPGlobal.parseDate(d, format, o.language);
      });

      var plc = String(o.orientation).toLowerCase().split(/\s+/g),
          _plc = o.orientation.toLowerCase();
      plc = $.grep(plc, function (word) {
        return (/^auto|left|right|top|bottom$/.test(word)
        );
      });
      o.orientation = { x: 'auto', y: 'auto' };
      if (!_plc || _plc === 'auto') ; // no action
      else if (plc.length === 1) {
          switch (plc[0]) {
            case 'top':
            case 'bottom':
              o.orientation.y = plc[0];
              break;
            case 'left':
            case 'right':
              o.orientation.x = plc[0];
              break;
          }
        } else {
          _plc = $.grep(plc, function (word) {
            return (/^left|right$/.test(word)
            );
          });
          o.orientation.x = _plc[0] || 'auto';

          _plc = $.grep(plc, function (word) {
            return (/^top|bottom$/.test(word)
            );
          });
          o.orientation.y = _plc[0] || 'auto';
        }
      if (o.defaultViewDate) {
        var year = o.defaultViewDate.year || new Date().getFullYear();
        var month = o.defaultViewDate.month || 0;
        var day = o.defaultViewDate.day || 1;
        o.defaultViewDate = UTCDate(year, month, day);
      } else {
        o.defaultViewDate = UTCToday();
      }
      o.showOnFocus = o.showOnFocus !== undefined ? o.showOnFocus : true;
    },
    _events: [],
    _secondaryEvents: [],
    _applyEvents: function _applyEvents(evs) {
      for (var i = 0, el, ch, ev; i < evs.length; i++) {
        el = evs[i][0];
        if (evs[i].length === 2) {
          ch = undefined;
          ev = evs[i][1];
        } else if (evs[i].length === 3) {
          ch = evs[i][1];
          ev = evs[i][2];
        }
        el.on(ev, ch);
      }
    },
    _unapplyEvents: function _unapplyEvents(evs) {
      for (var i = 0, el, ev, ch; i < evs.length; i++) {
        el = evs[i][0];
        if (evs[i].length === 2) {
          ch = undefined;
          ev = evs[i][1];
        } else if (evs[i].length === 3) {
          ch = evs[i][1];
          ev = evs[i][2];
        }
        el.off(ev, ch);
      }
    },
    _buildEvents: function _buildEvents() {
      var events = {
        keyup: $.proxy(function (e) {
          if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1) this.update();
        }, this),
        keydown: $.proxy(this.keydown, this)
      };

      if (this.o.showOnFocus === true) {
        events.focus = $.proxy(this.show, this);
      }

      if (this.isInput) {
        // single input
        this._events = [[this.element, events]];
      } else if (this.component && this.hasInput) {
        // component: input + button
        this._events = [
        // For components that are not readonly, allow keyboard nav
        [this.element.find('input'), events], [this.component, {
          click: $.proxy(this.show, this)
        }]];
      } else if (this.element.is('div')) {
        // inline datepicker
        this.isInline = true;
      } else {
        this._events = [[this.element, {
          click: $.proxy(this.show, this)
        }]];
      }
      this._events.push(
      // Component: listen for blur on element descendants
      [this.element, '*', {
        blur: $.proxy(function (e) {
          this._focused_from = e.target;
        }, this)
      }],
      // Input: listen for blur on element
      [this.element, {
        blur: $.proxy(function (e) {
          this._focused_from = e.target;
        }, this)
      }]);

      this._secondaryEvents = [[this.picker, {
        click: $.proxy(this.click, this)
      }], [$(window), {
        resize: $.proxy(this.place, this)
      }], [$(document), {
        'mousedown touchstart': $.proxy(function (e) {
          // Clicked outside the datepicker, hide it
          if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length)) {
            this.hide();
          }
        }, this)
      }]];
    },
    _attachEvents: function _attachEvents() {
      this._detachEvents();
      this._applyEvents(this._events);
    },
    _detachEvents: function _detachEvents() {
      this._unapplyEvents(this._events);
    },
    _attachSecondaryEvents: function _attachSecondaryEvents() {
      this._detachSecondaryEvents();
      this._applyEvents(this._secondaryEvents);
    },
    _detachSecondaryEvents: function _detachSecondaryEvents() {
      this._unapplyEvents(this._secondaryEvents);
    },
    _trigger: function _trigger(event, altdate) {
      var date = altdate || this.dates.get(-1),
          local_date = this._utc_to_local(date);

      this.element.trigger({
        type: event,
        date: local_date,
        dates: $.map(this.dates, this._utc_to_local),
        format: $.proxy(function (ix, format) {
          if (arguments.length === 0) {
            ix = this.dates.length - 1;
            format = this.o.format;
          } else if (typeof ix === 'string') {
            format = ix;
            ix = this.dates.length - 1;
          }
          format = format || this.o.format;
          var date = this.dates.get(ix);
          return DPGlobal.formatDate(date, format, this.o.language);
        }, this)
      });
    },

    show: function show() {
      if (this.element.attr('readonly')) return;
      if (!this.isInline) this.picker.appendTo(this.o.container);
      this.place();
      this.picker.show();
      this._attachSecondaryEvents();
      this._trigger('show');
      if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) {
        $(this.element).blur();
      }
      return this;
    },

    hide: function hide() {
      if (this.isInline) return this;
      if (!this.picker.is(':visible')) return this;
      this.focusDate = null;
      this.picker.hide().detach();
      this._detachSecondaryEvents();
      this.viewMode = this.o.startView;
      this.showMode();

      if (this.o.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find('input').val())) this.setValue();
      this._trigger('hide');
      return this;
    },

    remove: function remove() {
      this.hide();
      this._detachEvents();
      this._detachSecondaryEvents();
      this.picker.remove();
      delete this.element.data().datepicker;
      if (!this.isInput) {
        delete this.element.data().date;
      }
      return this;
    },

    _utc_to_local: function _utc_to_local(utc) {
      return utc && new Date(utc.getTime() + utc.getTimezoneOffset() * 60000);
    },
    _local_to_utc: function _local_to_utc(local) {
      return local && new Date(local.getTime() - local.getTimezoneOffset() * 60000);
    },
    _zero_time: function _zero_time(local) {
      return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
    },
    _zero_utc_time: function _zero_utc_time(utc) {
      return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
    },

    getDates: function getDates() {
      return $.map(this.dates, this._utc_to_local);
    },

    getUTCDates: function getUTCDates() {
      return $.map(this.dates, function (d) {
        return new Date(d);
      });
    },

    getDate: function getDate() {
      return this._utc_to_local(this.getUTCDate());
    },

    getUTCDate: function getUTCDate() {
      var selected_date = this.dates.get(-1);
      if (typeof selected_date !== 'undefined') {
        return new Date(selected_date);
      } else {
        return null;
      }
    },

    clearDates: function clearDates() {
      var element;
      if (this.isInput) {
        element = this.element;
      } else if (this.component) {
        element = this.element.find('input');
      }

      if (element) {
        element.val('').change();
      }

      this.update();
      this._trigger('changeDate');

      if (this.o.autoclose) {
        this.hide();
      }
    },
    setDates: function setDates() {
      var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
      this.update.apply(this, args);
      this._trigger('changeDate');
      this.setValue();
      return this;
    },

    setUTCDates: function setUTCDates() {
      var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
      this.update.apply(this, $.map(args, this._utc_to_local));
      this._trigger('changeDate');
      this.setValue();
      return this;
    },

    setDate: alias('setDates'),
    setUTCDate: alias('setUTCDates'),

    setValue: function setValue() {
      var formatted = this.getFormattedDate();
      if (!this.isInput) {
        if (this.component) {
          this.element.find('input').val(formatted).change();
        }
      } else {
        this.element.val(formatted).change();
      }
      return this;
    },

    getFormattedDate: function getFormattedDate(format) {
      if (format === undefined) format = this.o.format;

      var lang = this.o.language;
      return $.map(this.dates, function (d) {
        return DPGlobal.formatDate(d, format, lang);
      }).join(this.o.multidateSeparator);
    },

    setStartDate: function setStartDate(startDate) {
      this._process_options({ startDate: startDate });
      this.update();
      this.updateNavArrows();
      return this;
    },

    setEndDate: function setEndDate(endDate) {
      this._process_options({ endDate: endDate });
      this.update();
      this.updateNavArrows();
      return this;
    },

    setDaysOfWeekDisabled: function setDaysOfWeekDisabled(daysOfWeekDisabled) {
      this._process_options({ daysOfWeekDisabled: daysOfWeekDisabled });
      this.update();
      this.updateNavArrows();
      return this;
    },

    setDatesDisabled: function setDatesDisabled(datesDisabled) {
      this._process_options({ datesDisabled: datesDisabled });
      this.update();
      this.updateNavArrows();
    },

    place: function place() {
      if (this.isInline) return this;
      var calendarWidth = this.picker.outerWidth(),
          calendarHeight = this.picker.outerHeight(),
          visualPadding = 10,
          windowWidth = $(this.o.container).width(),
          windowHeight = $(this.o.container).height(),
          scrollTop = $(this.o.container).scrollTop(),
          appendOffset = $(this.o.container).offset();

      var parentsZindex = [];
      this.element.parents().each(function () {
        var itemZIndex = $(this).css('z-index');
        if (itemZIndex !== 'auto' && itemZIndex !== 0) parentsZindex.push(parseInt(itemZIndex));
      });
      var zIndex = Math.max.apply(Math, parentsZindex) + 10;
      var offset = this.component ? this.component.parent().offset() : this.element.offset();
      var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
      var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
      var left = offset.left - appendOffset.left,
          top = offset.top - appendOffset.top;

      this.picker.removeClass('datepicker-orient-top datepicker-orient-bottom ' + 'datepicker-orient-right datepicker-orient-left');

      if (this.o.orientation.x !== 'auto') {
        this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
        if (this.o.orientation.x === 'right') left -= calendarWidth - width;
      }
      // auto x orientation is best-placement: if it crosses a window
      // edge, fudge it sideways
      else {
          if (offset.left < 0) {
            // component is outside the window on the left side. Move it into visible range
            this.picker.addClass('datepicker-orient-left');
            left -= offset.left - visualPadding;
          } else if (left + calendarWidth > windowWidth) {
            // the calendar passes the widow right edge. Align it to component right side
            this.picker.addClass('datepicker-orient-right');
            left = offset.left + width - calendarWidth;
          } else {
            // Default to left
            this.picker.addClass('datepicker-orient-left');
          }
        }

      // auto y orientation is best-situation: top or bottom, no fudging,
      // decision based on which shows more of the calendar
      var yorient = this.o.orientation.y,
          top_overflow,
          bottom_overflow;
      if (yorient === 'auto') {
        top_overflow = -scrollTop + top - calendarHeight;
        bottom_overflow = scrollTop + windowHeight - (top + height + calendarHeight);
        if (Math.max(top_overflow, bottom_overflow) === bottom_overflow) yorient = 'top';else yorient = 'bottom';
      }
      this.picker.addClass('datepicker-orient-' + yorient);
      if (yorient === 'top') top += height;else top -= calendarHeight + parseInt(this.picker.css('padding-top'));

      if (this.o.rtl) {
        var right = windowWidth - (left + width);
        this.picker.css({
          top: top,
          right: right,
          zIndex: zIndex
        });
      } else {
        this.picker.css({
          top: top,
          left: left,
          zIndex: zIndex
        });
      }
      return this;
    },

    _allow_update: true,
    update: function update() {
      if (!this._allow_update) return this;

      var oldDates = this.dates.copy(),
          dates = [],
          fromArgs = false;
      if (arguments.length) {
        $.each(arguments, $.proxy(function (i, date) {
          if (date instanceof Date) date = this._local_to_utc(date);
          dates.push(date);
        }, this));
        fromArgs = true;
      } else {
        dates = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
        if (dates && this.o.multidate) dates = dates.split(this.o.multidateSeparator);else dates = [dates];
        delete this.element.data().date;
      }

      dates = $.map(dates, $.proxy(function (date) {
        return DPGlobal.parseDate(date, this.o.format, this.o.language);
      }, this));
      dates = $.grep(dates, $.proxy(function (date) {
        return date < this.o.startDate || date > this.o.endDate || !date;
      }, this), true);
      this.dates.replace(dates);

      if (this.dates.length) this.viewDate = new Date(this.dates.get(-1));else if (this.viewDate < this.o.startDate) this.viewDate = new Date(this.o.startDate);else if (this.viewDate > this.o.endDate) this.viewDate = new Date(this.o.endDate);

      if (fromArgs) {
        // setting date by clicking
        this.setValue();
      } else if (dates.length) {
        // setting date by typing
        if (String(oldDates) !== String(this.dates)) this._trigger('changeDate');
      }
      if (!this.dates.length && oldDates.length) this._trigger('clearDate');

      this.fill();
      return this;
    },

    fillDow: function fillDow() {
      var dowCnt = this.o.weekStart,
          html = '<tr>';
      if (this.o.calendarWeeks) {
        this.picker.find('.datepicker-days thead tr:first-child .datepicker-switch').attr('colspan', function (i, val) {
          return parseInt(val) + 1;
        });
        var cell = '<th class="cw">&#160;</th>';
        html += cell;
      }
      while (dowCnt < this.o.weekStart + 7) {
        html += '<th class="dow">' + dates[this.o.language].daysMin[dowCnt++ % 7] + '</th>';
      }
      html += '</tr>';
      this.picker.find('.datepicker-days thead').append(html);
    },

    fillMonths: function fillMonths() {
      var html = '',
          i = 0;
      while (i < 12) {
        html += '<span class="month">' + dates[this.o.language].monthsShort[i++] + '</span>';
      }
      this.picker.find('.datepicker-months td').html(html);
    },

    setRange: function setRange(range) {
      if (!range || !range.length) delete this.range;else this.range = $.map(range, function (d) {
        return d.valueOf();
      });
      this.fill();
    },

    getClassNames: function getClassNames(date) {
      var cls = [],
          year = this.viewDate.getUTCFullYear(),
          month = this.viewDate.getUTCMonth(),
          today = new Date();
      if (date.getUTCFullYear() < year || date.getUTCFullYear() === year && date.getUTCMonth() < month) {
        cls.push('old');
      } else if (date.getUTCFullYear() > year || date.getUTCFullYear() === year && date.getUTCMonth() > month) {
        cls.push('new');
      }
      if (this.focusDate && date.valueOf() === this.focusDate.valueOf()) cls.push('focused');
      // Compare internal UTC date with local today, not UTC today
      if (this.o.todayHighlight && date.getUTCFullYear() === today.getFullYear() && date.getUTCMonth() === today.getMonth() && date.getUTCDate() === today.getDate()) {
        cls.push('today');
      }
      if (this.dates.contains(date) !== -1) cls.push('active');
      if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate || $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {
        cls.push('disabled');
      }
      if (this.o.datesDisabled.length > 0 && $.grep(this.o.datesDisabled, function (d) {
        return isUTCEquals(date, d);
      }).length > 0) {
        cls.push('disabled', 'disabled-date');
      }

      if (this.range) {
        if (date > this.range[0] && date < this.range[this.range.length - 1]) {
          cls.push('range');
        }
        if ($.inArray(date.valueOf(), this.range) !== -1) {
          cls.push('selected');
        }
      }
      return cls;
    },

    fill: function fill() {
      var d = new Date(this.viewDate),
          year = d.getUTCFullYear(),
          month = d.getUTCMonth(),
          startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
          startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
          endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
          endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
          todaytxt = dates[this.o.language].today || dates['en'].today || '',
          cleartxt = dates[this.o.language].clear || dates['en'].clear || '',
          tooltip;
      if (isNaN(year) || isNaN(month)) return;
      this.picker.find('.datepicker-days thead .datepicker-switch').text(dates[this.o.language].months[month] + ' ' + year);
      this.picker.find('tfoot .today').text(todaytxt).toggle(this.o.todayBtn !== false);
      this.picker.find('tfoot .clear').text(cleartxt).toggle(this.o.clearBtn !== false);
      this.updateNavArrows();
      this.fillMonths();
      var prevMonth = UTCDate(year, month - 1, 28),
          day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
      prevMonth.setUTCDate(day);
      prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);
      var nextMonth = new Date(prevMonth);
      nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
      nextMonth = nextMonth.valueOf();
      var html = [];
      var clsName;
      while (prevMonth.valueOf() < nextMonth) {
        if (prevMonth.getUTCDay() === this.o.weekStart) {
          html.push('<tr>');
          if (this.o.calendarWeeks) {
            // ISO 8601: First week contains first thursday.
            // ISO also states week starts on Monday, but we can be more abstract here.
            var
            // Start of current week: based on weekstart/current date
            ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),

            // Thursday of this week
            th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),

            // First Thursday of year, year from thursday
            yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5),

            // Calendar week: ms between thursdays, div ms per day, div 7 days
            calWeek = (th - yth) / 864e5 / 7 + 1;
            html.push('<td class="cw">' + calWeek + '</td>');
          }
        }
        clsName = this.getClassNames(prevMonth);
        clsName.push('day');

        if (this.o.beforeShowDay !== $.noop) {
          var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
          if (before === undefined) before = {};else if (typeof before === 'boolean') before = { enabled: before };else if (typeof before === 'string') before = { classes: before };
          if (before.enabled === false) clsName.push('disabled');
          if (before.classes) clsName = clsName.concat(before.classes.split(/\s+/));
          if (before.tooltip) tooltip = before.tooltip;
        }

        clsName = $.unique(clsName);
        html.push('<td class="' + clsName.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + prevMonth.getUTCDate() + '</td>');
        tooltip = null;
        if (prevMonth.getUTCDay() === this.o.weekEnd) {
          html.push('</tr>');
        }
        prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
      }
      this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

      var months = this.picker.find('.datepicker-months').find('th:eq(1)').text(year).end().find('span').removeClass('active');

      $.each(this.dates, function (i, d) {
        if (d.getUTCFullYear() === year) months.eq(d.getUTCMonth()).addClass('active');
      });

      if (year < startYear || year > endYear) {
        months.addClass('disabled');
      }
      if (year === startYear) {
        months.slice(0, startMonth).addClass('disabled');
      }
      if (year === endYear) {
        months.slice(endMonth + 1).addClass('disabled');
      }

      if (this.o.beforeShowMonth !== $.noop) {
        var that = this;
        $.each(months, function (i, month) {
          if (!$(month).hasClass('disabled')) {
            var moDate = new Date(year, i, 1);
            var before = that.o.beforeShowMonth(moDate);
            if (before === false) $(month).addClass('disabled');
          }
        });
      }

      html = '';
      year = parseInt(year / 10, 10) * 10;
      var yearCont = this.picker.find('.datepicker-years').find('th:eq(1)').text(year + '-' + (year + 9)).end().find('td');
      year -= 1;
      var years = $.map(this.dates, function (d) {
        return d.getUTCFullYear();
      }),
          classes;
      for (var i = -1; i < 11; i++) {
        classes = ['year'];
        if (i === -1) classes.push('old');else if (i === 10) classes.push('new');
        if ($.inArray(year, years) !== -1) classes.push('active');
        if (year < startYear || year > endYear) classes.push('disabled');
        html += '<span class="' + classes.join(' ') + '">' + year + '</span>';
        year += 1;
      }
      yearCont.html(html);
    },

    updateNavArrows: function updateNavArrows() {
      if (!this._allow_update) return;

      var d = new Date(this.viewDate),
          year = d.getUTCFullYear(),
          month = d.getUTCMonth();
      switch (this.viewMode) {
        case 0:
          if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {
            this.picker.find('.prev').css({ visibility: 'hidden' });
          } else {
            this.picker.find('.prev').css({ visibility: 'visible' });
          }
          if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {
            this.picker.find('.next').css({ visibility: 'hidden' });
          } else {
            this.picker.find('.next').css({ visibility: 'visible' });
          }
          break;
        case 1:
        case 2:
          if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {
            this.picker.find('.prev').css({ visibility: 'hidden' });
          } else {
            this.picker.find('.prev').css({ visibility: 'visible' });
          }
          if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {
            this.picker.find('.next').css({ visibility: 'hidden' });
          } else {
            this.picker.find('.next').css({ visibility: 'visible' });
          }
          break;
      }
    },

    click: function click(e) {
      e.preventDefault();
      var target = $(e.target).closest('span, td, th'),
          year,
          month,
          day;
      if (target.length === 1) {
        switch (target[0].nodeName.toLowerCase()) {
          case 'th':
            switch (target[0].className) {
              case 'datepicker-switch':
                this.showMode(1);
                break;
              case 'prev':
              case 'next':
                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);
                switch (this.viewMode) {
                  case 0:
                    this.viewDate = this.moveMonth(this.viewDate, dir);
                    this._trigger('changeMonth', this.viewDate);
                    break;
                  case 1:
                  case 2:
                    this.viewDate = this.moveYear(this.viewDate, dir);
                    if (this.viewMode === 1) this._trigger('changeYear', this.viewDate);
                    break;
                }
                this.fill();
                break;
              case 'today':
                var date = new Date();
                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

                this.showMode(-2);
                var which = this.o.todayBtn === 'linked' ? null : 'view';
                this._setDate(date, which);
                break;
              case 'clear':
                this.clearDates();
                break;
            }
            break;
          case 'span':
            if (!target.hasClass('disabled')) {
              this.viewDate.setUTCDate(1);
              if (target.hasClass('month')) {
                day = 1;
                month = target.parent().find('span').index(target);
                year = this.viewDate.getUTCFullYear();
                this.viewDate.setUTCMonth(month);
                this._trigger('changeMonth', this.viewDate);
                if (this.o.minViewMode === 1) {
                  this._setDate(UTCDate(year, month, day));
                }
              } else {
                day = 1;
                month = 0;
                year = parseInt(target.text(), 10) || 0;
                this.viewDate.setUTCFullYear(year);
                this._trigger('changeYear', this.viewDate);
                if (this.o.minViewMode === 2) {
                  this._setDate(UTCDate(year, month, day));
                }
              }
              this.showMode(-1);
              this.fill();
            }
            break;
          case 'td':
            if (target.hasClass('day') && !target.hasClass('disabled')) {
              day = parseInt(target.text(), 10) || 1;
              year = this.viewDate.getUTCFullYear();
              month = this.viewDate.getUTCMonth();
              if (target.hasClass('old')) {
                if (month === 0) {
                  month = 11;
                  year -= 1;
                } else {
                  month -= 1;
                }
              } else if (target.hasClass('new')) {
                if (month === 11) {
                  month = 0;
                  year += 1;
                } else {
                  month += 1;
                }
              }
              this._setDate(UTCDate(year, month, day));
            }
            break;
        }
      }
      if (this.picker.is(':visible') && this._focused_from) {
        $(this._focused_from).focus();
      }
      delete this._focused_from;
    },

    _toggle_multidate: function _toggle_multidate(date) {
      var ix = this.dates.contains(date);
      if (!date) {
        this.dates.clear();
      }

      if (ix !== -1) {
        if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive) {
          this.dates.remove(ix);
        }
      } else if (this.o.multidate === false) {
        this.dates.clear();
        this.dates.push(date);
      } else {
        this.dates.push(date);
      }

      if (typeof this.o.multidate === 'number') while (this.dates.length > this.o.multidate) {
        this.dates.remove(0);
      }
    },

    _setDate: function _setDate(date, which) {
      if (!which || which === 'date') this._toggle_multidate(date && new Date(date));
      if (!which || which === 'view') this.viewDate = date && new Date(date);

      this.fill();
      this.setValue();
      if (!which || which !== 'view') {
        this._trigger('changeDate');
      }
      var element;
      if (this.isInput) {
        element = this.element;
      } else if (this.component) {
        element = this.element.find('input');
      }
      if (element) {
        element.change();
      }
      if (this.o.autoclose && (!which || which === 'date')) {
        this.hide();
      }
    },

    moveMonth: function moveMonth(date, dir) {
      if (!date) return undefined;
      if (!dir) return date;
      var new_date = new Date(date.valueOf()),
          day = new_date.getUTCDate(),
          month = new_date.getUTCMonth(),
          mag = Math.abs(dir),
          new_month,
          test;
      dir = dir > 0 ? 1 : -1;
      if (mag === 1) {
        test = dir === -1
        // If going back one month, make sure month is not current month
        // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
        ? function () {
          return new_date.getUTCMonth() === month;
        }
        // If going forward one month, make sure month is as expected
        // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
        : function () {
          return new_date.getUTCMonth() !== new_month;
        };
        new_month = month + dir;
        new_date.setUTCMonth(new_month);
        // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
        if (new_month < 0 || new_month > 11) new_month = (new_month + 12) % 12;
      } else {
        // For magnitudes >1, move one month at a time...
        for (var i = 0; i < mag; i++) {
          // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
          new_date = this.moveMonth(new_date, dir);
        } // ...then reset the day, keeping it in the new month
        new_month = new_date.getUTCMonth();
        new_date.setUTCDate(day);
        test = function test() {
          return new_month !== new_date.getUTCMonth();
        };
      }
      // Common date-resetting loop -- if date is beyond end of month, make it
      // end of month
      while (test()) {
        new_date.setUTCDate(--day);
        new_date.setUTCMonth(new_month);
      }
      return new_date;
    },

    moveYear: function moveYear(date, dir) {
      return this.moveMonth(date, dir * 12);
    },

    dateWithinRange: function dateWithinRange(date) {
      return date >= this.o.startDate && date <= this.o.endDate;
    },

    keydown: function keydown(e) {
      if (!this.picker.is(':visible')) {
        if (e.keyCode === 27) // allow escape to hide and re-show picker
          this.show();
        return;
      }
      var dateChanged = false,
          dir,
          newDate,
          newViewDate,
          focusDate = this.focusDate || this.viewDate;
      switch (e.keyCode) {
        case 27:
          // escape
          if (this.focusDate) {
            this.focusDate = null;
            this.viewDate = this.dates.get(-1) || this.viewDate;
            this.fill();
          } else this.hide();
          e.preventDefault();
          break;
        case 37: // left
        case 39:
          // right
          if (!this.o.keyboardNavigation) break;
          dir = e.keyCode === 37 ? -1 : 1;
          if (e.ctrlKey) {
            newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);
            newViewDate = this.moveYear(focusDate, dir);
            this._trigger('changeYear', this.viewDate);
          } else if (e.shiftKey) {
            newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);
            newViewDate = this.moveMonth(focusDate, dir);
            this._trigger('changeMonth', this.viewDate);
          } else {
            newDate = new Date(this.dates.get(-1) || UTCToday());
            newDate.setUTCDate(newDate.getUTCDate() + dir);
            newViewDate = new Date(focusDate);
            newViewDate.setUTCDate(focusDate.getUTCDate() + dir);
          }
          if (this.dateWithinRange(newViewDate)) {
            this.focusDate = this.viewDate = newViewDate;
            this.setValue();
            this.fill();
            e.preventDefault();
          }
          break;
        case 38: // up
        case 40:
          // down
          if (!this.o.keyboardNavigation) break;
          dir = e.keyCode === 38 ? -1 : 1;
          if (e.ctrlKey) {
            newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);
            newViewDate = this.moveYear(focusDate, dir);
            this._trigger('changeYear', this.viewDate);
          } else if (e.shiftKey) {
            newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);
            newViewDate = this.moveMonth(focusDate, dir);
            this._trigger('changeMonth', this.viewDate);
          } else {
            newDate = new Date(this.dates.get(-1) || UTCToday());
            newDate.setUTCDate(newDate.getUTCDate() + dir * 7);
            newViewDate = new Date(focusDate);
            newViewDate.setUTCDate(focusDate.getUTCDate() + dir * 7);
          }
          if (this.dateWithinRange(newViewDate)) {
            this.focusDate = this.viewDate = newViewDate;
            this.setValue();
            this.fill();
            e.preventDefault();
          }
          break;
        case 32:
          // spacebar
          // Spacebar is used in manually typing dates in some formats.
          // As such, its behavior should not be hijacked.
          break;
        case 13:
          // enter
          focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
          if (this.o.keyboardNavigation) {
            this._toggle_multidate(focusDate);
            dateChanged = true;
          }
          this.focusDate = null;
          this.viewDate = this.dates.get(-1) || this.viewDate;
          this.setValue();
          this.fill();
          if (this.picker.is(':visible')) {
            e.preventDefault();
            if (typeof e.stopPropagation === 'function') {
              e.stopPropagation(); // All modern browsers, IE9+
            } else {
              e.cancelBubble = true; // IE6,7,8 ignore "stopPropagation"
            }
            if (this.o.autoclose) this.hide();
          }
          break;
        case 9:
          // tab
          this.focusDate = null;
          this.viewDate = this.dates.get(-1) || this.viewDate;
          this.fill();
          this.hide();
          break;
      }
      if (dateChanged) {
        if (this.dates.length) this._trigger('changeDate');else this._trigger('clearDate');
        var element;
        if (this.isInput) {
          element = this.element;
        } else if (this.component) {
          element = this.element.find('input');
        }
        if (element) {
          element.change();
        }
      }
    },

    showMode: function showMode(dir) {
      if (dir) {
        this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));
      }
      this.picker.children('div').hide().filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
      this.updateNavArrows();
    }
  };

  var DateRangePicker = function DateRangePicker(element, options) {
    this.element = $(element);
    this.inputs = $.map(options.inputs, function (i) {
      return i.jquery ? i[0] : i;
    });
    delete options.inputs;

    datepickerPlugin.call($(this.inputs), options).bind('changeDate', $.proxy(this.dateUpdated, this));

    this.pickers = $.map(this.inputs, function (i) {
      return $(i).data('datepicker');
    });
    this.updateDates();
  };
  DateRangePicker.prototype = {
    updateDates: function updateDates() {
      this.dates = $.map(this.pickers, function (i) {
        return i.getUTCDate();
      });
      this.updateRanges();
    },
    updateRanges: function updateRanges() {
      var range = $.map(this.dates, function (d) {
        return d.valueOf();
      });
      $.each(this.pickers, function (i, p) {
        p.setRange(range);
      });
    },
    dateUpdated: function dateUpdated(e) {
      // `this.updating` is a workaround for preventing infinite recursion
      // between `changeDate` triggering and `setUTCDate` calling.  Until
      // there is a better mechanism.
      if (this.updating) return;
      this.updating = true;

      var dp = $(e.target).data('datepicker'),
          new_date = dp.getUTCDate(),
          i = $.inArray(e.target, this.inputs),
          j = i - 1,
          k = i + 1,
          l = this.inputs.length;
      if (i === -1) return;

      $.each(this.pickers, function (i, p) {
        if (!p.getUTCDate()) p.setUTCDate(new_date);
      });

      if (new_date < this.dates[j]) {
        // Date being moved earlier/left
        while (j >= 0 && new_date < this.dates[j]) {
          this.pickers[j--].setUTCDate(new_date);
        }
      } else if (new_date > this.dates[k]) {
        // Date being moved later/right
        while (k < l && new_date > this.dates[k]) {
          this.pickers[k++].setUTCDate(new_date);
        }
      }
      this.updateDates();

      delete this.updating;
    },
    remove: function remove() {
      $.map(this.pickers, function (p) {
        p.remove();
      });
      delete this.element.data().datepicker;
    }
  };

  function opts_from_el(el, prefix) {
    // Derive options from element data-attrs
    var data = $(el).data(),
        out = {},
        inkey,
        replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');
    prefix = new RegExp('^' + prefix.toLowerCase());
    function re_lower(_, a) {
      return a.toLowerCase();
    }
    for (var key in data) {
      if (prefix.test(key)) {
        inkey = key.replace(replace, re_lower);
        out[inkey] = data[key];
      }
    }return out;
  }

  function opts_from_locale(lang) {
    // Derive options from locale plugins
    var out = {};
    // Check if "de-DE" style date is available, if not language should
    // fallback to 2 letter code eg "de"
    if (!dates[lang]) {
      lang = lang.split('-')[0];
      if (!dates[lang]) return;
    }
    var d = dates[lang];
    $.each(locale_opts, function (i, k) {
      if (k in d) out[k] = d[k];
    });
    return out;
  }

  var old = $.fn.datepicker;
  var datepickerPlugin = function datepickerPlugin(option) {
    var args = Array.apply(null, arguments);
    args.shift();
    var internal_return;
    this.each(function () {
      var $this = $(this),
          data = $this.data('datepicker'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option;
      if (!data) {
        var elopts = opts_from_el(this, 'date'),

        // Preliminary otions
        xopts = $.extend({}, defaults, elopts, options),
            locopts = opts_from_locale(xopts.language),

        // Options priority: js args, data-attrs, locales, defaults
        opts = $.extend({}, defaults, locopts, elopts, options);
        if ($this.hasClass('input-daterange') || opts.inputs) {
          var ropts = {
            inputs: opts.inputs || $this.find('input').toArray()
          };
          $this.data('datepicker', data = new DateRangePicker(this, $.extend(opts, ropts)));
        } else {
          $this.data('datepicker', data = new Datepicker(this, opts));
        }
      }
      if (typeof option === 'string' && typeof data[option] === 'function') {
        internal_return = data[option].apply(data, args);
        if (internal_return !== undefined) return false;
      }
    });
    if (internal_return !== undefined) return internal_return;else return this;
  };
  $.fn.datepicker = datepickerPlugin;

  var defaults = $.fn.datepicker.defaults = {
    autoclose: false,
    beforeShowDay: $.noop,
    beforeShowMonth: $.noop,
    calendarWeeks: false,
    clearBtn: false,
    toggleActive: false,
    daysOfWeekDisabled: [],
    datesDisabled: [],
    endDate: Infinity,
    forceParse: true,
    format: 'mm/dd/yyyy',
    keyboardNavigation: true,
    language: 'en',
    minViewMode: 0,
    multidate: false,
    multidateSeparator: ',',
    orientation: "auto",
    rtl: false,
    startDate: -Infinity,
    startView: 0,
    todayBtn: false,
    todayHighlight: false,
    weekStart: 0,
    disableTouchKeyboard: false,
    container: 'body'
  };
  var locale_opts = $.fn.datepicker.locale_opts = ['format', 'rtl', 'weekStart'];
  $.fn.datepicker.Constructor = Datepicker;
  var dates = $.fn.datepicker.dates = {
    en: {
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
      daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      today: "Today",
      clear: "Clear"
    }
  };

  var DPGlobal = {
    modes: [{
      clsName: 'days',
      navFnc: 'Month',
      navStep: 1
    }, {
      clsName: 'months',
      navFnc: 'FullYear',
      navStep: 1
    }, {
      clsName: 'years',
      navFnc: 'FullYear',
      navStep: 10
    }],
    isLeapYear: function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    },
    getDaysInMonth: function getDaysInMonth(year, month) {
      return [31, DPGlobal.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    },
    validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
    nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
    parseFormat: function parseFormat(format) {
      // IE treats \0 as a string end in inputs (truncating the value),
      // so it's a bad format delimiter, anyway
      var separators = format.replace(this.validParts, '\0').split('\0'),
          parts = format.match(this.validParts);
      if (!separators || !separators.length || !parts || parts.length === 0) {
        throw new Error("Invalid date format.");
      }
      return { separators: separators, parts: parts };
    },
    parseDate: function parseDate(date, format, language) {
      if (!date) return undefined;
      if (date instanceof Date) return date;
      if (typeof format === 'string') format = DPGlobal.parseFormat(format);
      var part_re = /([\-+]\d+)([dmwy])/,
          parts = date.match(/([\-+]\d+)([dmwy])/g),
          part,
          dir,
          i;
      if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) {
        date = new Date();
        for (i = 0; i < parts.length; i++) {
          part = part_re.exec(parts[i]);
          dir = parseInt(part[1]);
          switch (part[2]) {
            case 'd':
              date.setUTCDate(date.getUTCDate() + dir);
              break;
            case 'm':
              date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
              break;
            case 'w':
              date.setUTCDate(date.getUTCDate() + dir * 7);
              break;
            case 'y':
              date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);
              break;
          }
        }
        return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);
      }
      parts = date && date.match(this.nonpunctuation) || [];
      date = new Date();
      var parsed = {},
          setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
          setters_map = {
        yyyy: function yyyy(d, v) {
          return d.setUTCFullYear(v);
        },
        yy: function yy(d, v) {
          return d.setUTCFullYear(2000 + v);
        },
        m: function m(d, v) {
          if (isNaN(d)) return d;
          v -= 1;
          while (v < 0) {
            v += 12;
          }v %= 12;
          d.setUTCMonth(v);
          while (d.getUTCMonth() !== v) {
            d.setUTCDate(d.getUTCDate() - 1);
          }return d;
        },
        d: function d(_d, v) {
          return _d.setUTCDate(v);
        }
      },
          val,
          filtered;
      setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
      setters_map['dd'] = setters_map['d'];
      date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
      var fparts = format.parts.slice();
      // Remove noop parts
      if (parts.length !== fparts.length) {
        fparts = $(fparts).filter(function (i, p) {
          return $.inArray(p, setters_order) !== -1;
        }).toArray();
      }
      // Process remainder
      function match_part() {
        var m = this.slice(0, parts[i].length),
            p = parts[i].slice(0, m.length);
        return m.toLowerCase() === p.toLowerCase();
      }
      if (parts.length === fparts.length) {
        var cnt;
        for (i = 0, cnt = fparts.length; i < cnt; i++) {
          val = parseInt(parts[i], 10);
          part = fparts[i];
          if (isNaN(val)) {
            switch (part) {
              case 'MM':
                filtered = $(dates[language].months).filter(match_part);
                val = $.inArray(filtered[0], dates[language].months) + 1;
                break;
              case 'M':
                filtered = $(dates[language].monthsShort).filter(match_part);
                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                break;
            }
          }
          parsed[part] = val;
        }
        var _date, s;
        for (i = 0; i < setters_order.length; i++) {
          s = setters_order[i];
          if (s in parsed && !isNaN(parsed[s])) {
            _date = new Date(date);
            setters_map[s](_date, parsed[s]);
            if (!isNaN(_date)) date = _date;
          }
        }
      }
      return date;
    },
    formatDate: function formatDate(date, format, language) {
      if (!date) return '';
      if (typeof format === 'string') format = DPGlobal.parseFormat(format);
      var val = {
        d: date.getUTCDate(),
        D: dates[language].daysShort[date.getUTCDay()],
        DD: dates[language].days[date.getUTCDay()],
        m: date.getUTCMonth() + 1,
        M: dates[language].monthsShort[date.getUTCMonth()],
        MM: dates[language].months[date.getUTCMonth()],
        yy: date.getUTCFullYear().toString().substring(2),
        yyyy: date.getUTCFullYear()
      };
      val.dd = (val.d < 10 ? '0' : '') + val.d;
      val.mm = (val.m < 10 ? '0' : '') + val.m;
      date = [];
      var seps = $.extend([], format.separators);
      for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {
        if (seps.length) date.push(seps.shift());
        date.push(val[format.parts[i]]);
      }
      return date.join('');
    },
    headTemplate: '<thead>' + '<tr>' + '<th class="prev">&#171;</th>' + '<th colspan="5" class="datepicker-switch"></th>' + '<th class="next">&#187;</th>' + '</tr>' + '</thead>',
    contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
    footTemplate: '<tfoot>' + '<tr>' + '<th colspan="7" class="today"></th>' + '</tr>' + '<tr>' + '<th colspan="7" class="clear"></th>' + '</tr>' + '</tfoot>'
  };
  DPGlobal.template = '<div class="datepicker">' + '<div class="datepicker-days">' + '<table class=" table-condensed">' + DPGlobal.headTemplate + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-months">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-years">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>';

  $.fn.datepicker.DPGlobal = DPGlobal;

  /* DATEPICKER NO CONFLICT
  * =================== */

  $.fn.datepicker.noConflict = function () {
    $.fn.datepicker = old;
    return this;
  };

  /* DATEPICKER DATA-API
  * ================== */

  $(document).on('focus.datepicker.data-api click.datepicker.data-api', '[data-provide="datepicker"]', function (e) {
    var $this = $(this);
    if ($this.data('datepicker')) return;
    e.preventDefault();
    // component click requires us to explicitly show it
    datepickerPlugin.call($this, 'show');
  });
  $(function () {
    datepickerPlugin.call($('[data-provide="datepicker-inline"]'));
  });
})(window.jQuery);
}();


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.THREE = {})));
}(this, (function (exports) { 'use strict';

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	if ( Number.isInteger === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

		Number.isInteger = function ( value ) {

			return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

		};

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( 'name' in Function.prototype === false ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		( function () {

			Object.assign = function ( target ) {

				if ( target === undefined || target === null ) {

					throw new TypeError( 'Cannot convert undefined or null to object' );

				}

				var output = Object( target );

				for ( var index = 1; index < arguments.length; index ++ ) {

					var source = arguments[ index ];

					if ( source !== undefined && source !== null ) {

						for ( var nextKey in source ) {

							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

								output[ nextKey ] = source[ nextKey ];

							}

						}

					}

				}

				return output;

			};

		} )();

	}

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = listenerArray.slice( 0 );

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	var REVISION = '89';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var NearestFilter = 1003;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipMapLinearFilter = 1008;
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RGB_S3TC_DXT1_Format = 2001;
	var RGBA_S3TC_DXT1_Format = 2002;
	var RGBA_S3TC_DXT3_Format = 2003;
	var RGBA_S3TC_DXT5_Format = 2004;
	var RGB_PVRTC_4BPPV1_Format = 2100;
	var RGB_PVRTC_2BPPV1_Format = 2101;
	var RGBA_PVRTC_4BPPV1_Format = 2102;
	var RGBA_PVRTC_2BPPV1_Format = 2103;
	var RGB_ETC1_Format = 2151;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: ( function () {

			// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

			var lut = [];

			for ( var i = 0; i < 256; i ++ ) {

				lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 ).toUpperCase();

			}

			return function () {

				var d0 = Math.random() * 0xffffffff | 0;
				var d1 = Math.random() * 0xffffffff | 0;
				var d2 = Math.random() * 0xffffffff | 0;
				var d3 = Math.random() * 0xffffffff | 0;
				return lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
					lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
					lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
					lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];

			};

		} )(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		ceilPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

		},

		floorPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Object.defineProperties( Vector2.prototype, {

		"width": {

			get: function () {

				return this.x;

			},

			set: function ( value ) {

				this.x = value;

			}

		},

		"height": {

			get: function () {

				return this.y;

			},

			set: function ( value ) {

				this.y = value;

			}

		}

	} );

	Object.assign( Vector2.prototype, {

		isVector2: true,

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min = new Vector2();
			var max = new Vector2();

			return function clampScalar( minVal, maxVal ) {

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix4.prototype, {

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		},

		extractRotation: function () {

			var v1 = new Vector3();

			return function extractRotation( m ) {

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q._x, y = q._y, z = q._z, w = q._w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x = new Vector3();
			var y = new Vector3();
			var z = new Vector3();

			return function lookAt( eye, target, up ) {

				var te = this.elements;

				z.subVectors( eye, target );

				if ( z.lengthSq() === 0 ) {

					// eye and target are in the same position

					z.z = 1;

				}

				z.normalize();
				x.crossVectors( up, z );

				if ( x.lengthSq() === 0 ) {

					// up and z are parallel

					if ( Math.abs( up.z ) === 1 ) {

						z.x += 0.0001;

					} else {

						z.z += 0.0001;

					}

					z.normalize();
					x.crossVectors( up, z );

				}

				x.normalize();
				y.crossVectors( z, x );

				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToBufferAttribute: function () {

			var v1 = new Vector3();

			return function applyToBufferAttribute( attribute ) {

				for ( var i = 0, l = attribute.count; i < l; i ++ ) {

					v1.x = attribute.getX( i );
					v1.y = attribute.getY( i );
					v1.z = attribute.getZ( i );

					v1.applyMatrix4( this );

					attribute.setXYZ( i, v1.x, v1.y, v1.z );

				}

				return attribute;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeShear: function ( x, y, z ) {

			this.set(

				1, y, z, 0,
				x, 1, z, 0,
				x, y, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector = new Vector3();
			var matrix = new Matrix4();

			return function decompose( position, quaternion, scale ) {

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) sx = - sx;

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part
				matrix.copy( this );

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makePerspective: function ( left, right, top, bottom, near, far ) {

			if ( far === undefined ) {

				console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

			}

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for ( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Object.assign( Quaternion, {

		slerp: function ( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	Object.defineProperties( Quaternion.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this.onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this.onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this.onChangeCallback();

			}

		},

		w: {

			get: function () {

				return this._w;

			},

			set: function ( value ) {

				this._w = value;
				this.onChangeCallback();

			}

		}

	} );

	Object.assign( Quaternion.prototype, {

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( ! ( euler && euler.isEuler ) ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var cos = Math.cos;
			var sin = Math.sin;

			var c1 = cos( x / 2 );
			var c2 = cos( y / 2 );
			var c3 = cos( z / 2 );

			var s1 = sin( x / 2 );
			var s2 = sin( y / 2 );
			var s3 = sin( z / 2 );

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// assumes direction vectors vFrom and vTo are normalized

			var v1 = new Vector3();
			var r;

			var EPS = 0.000001;

			return function setFromUnitVectors( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				return this.normalize();

			};

		}(),

		inverse: function () {

			return this.conjugate().normalize();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Object.assign( Vector3.prototype, {

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion = new Quaternion();

			return function applyEuler( euler ) {

				if ( ! ( euler && euler.isEuler ) ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				return this.applyQuaternion( quaternion.setFromEuler( euler ) );

			};

		}(),

		applyAxisAngle: function () {

			var quaternion = new Quaternion();

			return function applyAxisAngle( axis, angle ) {

				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix = new Matrix4();

			return function project( camera ) {

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyMatrix4( matrix );

			};

		}(),

		unproject: function () {

			var matrix = new Matrix4();

			return function unproject( camera ) {

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyMatrix4( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min = new Vector3();
			var max = new Vector3();

			return function clampScalar( minVal, maxVal ) {

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		// TODO lengthSquared?

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			return this.crossVectors( this, v );

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( vector ) {

			var scalar = vector.dot( this ) / vector.lengthSq();

			return this.copy( vector ).multiplyScalar( scalar );

		},

		projectOnPlane: function () {

			var v1 = new Vector3();

			return function projectOnPlane( planeNormal ) {

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1 = new Vector3();

			return function reflect( normal ) {

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			};

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function ( s ) {

			var sinPhiRadius = Math.sin( s.phi ) * s.radius;

			this.x = sinPhiRadius * Math.sin( s.theta );
			this.y = Math.cos( s.phi ) * s.radius;
			this.z = sinPhiRadius * Math.cos( s.theta );

			return this;

		},

		setFromCylindrical: function ( c ) {

			this.x = c.radius * Math.sin( c.theta );
			this.y = c.y;
			this.z = c.radius * Math.cos( c.theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			var e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	function Matrix3() {

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix3.prototype, {

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		},

		setFromMatrix4: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToBufferAttribute: function () {

			var v1 = new Vector3();

			return function applyToBufferAttribute( attribute ) {

				for ( var i = 0, l = attribute.count; i < l; i ++ ) {

					v1.x = attribute.getX( i );
					v1.y = attribute.getY( i );
					v1.z = attribute.getZ( i );

					v1.applyMatrix3( this );

					attribute.setXYZ( i, v1.x, v1.y, v1.z );

				}

				return attribute;

			};

		}(),

		multiply: function ( m ) {

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( matrix && matrix.isMatrix4 ) {

				console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

			var c = Math.cos( rotation );
			var s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

		},

		scale: function ( sx, sy ) {

			var te = this.elements;

			te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
			te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

			return this;

		},

		rotate: function ( theta ) {

			var c = Math.cos( theta );
			var s = Math.sin( theta );

			var te = this.elements;

			var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
			var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

			te[ 0 ] = c * a11 + s * a21;
			te[ 3 ] = c * a12 + s * a22;
			te[ 6 ] = c * a13 + s * a23;

			te[ 1 ] = - s * a11 + c * a21;
			te[ 4 ] = - s * a12 + c * a22;
			te[ 7 ] = - s * a13 + c * a23;

			return this;

		},

		translate: function ( tx, ty ) {

			var te = this.elements;

			te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
			te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for ( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var textureId = 0;

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: textureId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding : LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Texture,

		isTexture: true,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image instanceof HTMLCanvasElement ) {

					canvas = image;

				} else {

					canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					var context = canvas.getContext( '2d' );

					if ( image instanceof ImageData ) {

						context.putImageData( image, 0, 0 );

					} else {

						context.drawImage( image, 0, 0, image.width, image.height );

					}

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,

				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			if ( ! isRootObject ) {

				meta.textures[ this.uuid ] = output;

			}

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping ) return;

			uv.applyMatrix3( this.matrix );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	} );

	Object.defineProperty( Texture.prototype, "needsUpdate", {

		set: function ( value ) {

			if ( value === true ) this.version ++;

		}

	} );

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Object.assign( Vector4.prototype, {

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector4();
					max = new Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		}

	} );

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.uuid = _Math.generateUUID();

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: WebGLRenderTarget,

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
		this.activeMipMapLevel = 0;

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author tschw
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyCubeTexture = new CubeTexture();

	// --- Base for inner nodes (including the root) ---

	function UniformContainer() {

		this.seq = [];
		this.map = {};

	}

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Float32Array caches used for uploading Matrix uniforms

	var mat4array = new Float32Array( 16 );
	var mat3array = new Float32Array( 9 );

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	// Texture unit allocation

	function allocTexUnits( renderer, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			r[ i ] = renderer.allocTextureUnit();

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValue1f( gl, v ) {

		gl.uniform1f( this.addr, v );

	}

	function setValue1i( gl, v ) {

		gl.uniform1i( this.addr, v );

	}

	// Single float vector (from flat array or THREE.VectorN)

	function setValue2fv( gl, v ) {

		if ( v.x === undefined ) {

			gl.uniform2fv( this.addr, v );

		} else {

			gl.uniform2f( this.addr, v.x, v.y );

		}

	}

	function setValue3fv( gl, v ) {

		if ( v.x !== undefined ) {

			gl.uniform3f( this.addr, v.x, v.y, v.z );

		} else if ( v.r !== undefined ) {

			gl.uniform3f( this.addr, v.r, v.g, v.b );

		} else {

			gl.uniform3fv( this.addr, v );

		}

	}

	function setValue4fv( gl, v ) {

		if ( v.x === undefined ) {

			gl.uniform4fv( this.addr, v );

		} else {

			 gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

		}

	}

	// Single matrix (from flat array or MatrixN)

	function setValue2fm( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, v.elements || v );

	}

	function setValue3fm( gl, v ) {

		if ( v.elements === undefined ) {

			gl.uniformMatrix3fv( this.addr, false, v );

		} else {

			mat3array.set( v.elements );
			gl.uniformMatrix3fv( this.addr, false, mat3array );

		}

	}

	function setValue4fm( gl, v ) {

		if ( v.elements === undefined ) {

			gl.uniformMatrix4fv( this.addr, false, v );

		} else {

			mat4array.set( v.elements );
			gl.uniformMatrix4fv( this.addr, false, mat4array );

		}

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTexture2D( v || emptyTexture, unit );

	}

	function setValueT6( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValue2iv( gl, v ) {

		gl.uniform2iv( this.addr, v );

	}

	function setValue3iv( gl, v ) {

		gl.uniform3iv( this.addr, v );

	}

	function setValue4iv( gl, v ) {

		gl.uniform4iv( this.addr, v );

	}

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1f; // FLOAT
			case 0x8b50: return setValue2fv; // _VEC2
			case 0x8b51: return setValue3fv; // _VEC3
			case 0x8b52: return setValue4fv; // _VEC4

			case 0x8b5a: return setValue2fm; // _MAT2
			case 0x8b5b: return setValue3fm; // _MAT3
			case 0x8b5c: return setValue4fm; // _MAT4

			case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
			case 0x8b60: return setValueT6; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// Array of scalars

	function setValue1fv( gl, v ) {

		gl.uniform1fv( this.addr, v );

	}
	function setValue1iv( gl, v ) {

		gl.uniform1iv( this.addr, v );

	}

	// Array of vectors (flat or from THREE classes)

	function setValueV2a( gl, v ) {

		gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

	}

	function setValueV3a( gl, v ) {

		gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

	}

	function setValueV4a( gl, v ) {

		gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2a( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

	}

	function setValueM3a( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

	}

	function setValueM4a( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

	}

	// Array of textures (2D / Cube)

	function setValueT1a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1fv; // FLOAT
			case 0x8b50: return setValueV2a; // _VEC2
			case 0x8b51: return setValueV3a; // _VEC3
			case 0x8b52: return setValueV4a; // _VEC4

			case 0x8b5a: return setValueM2a; // _MAT2
			case 0x8b5b: return setValueM3a; // _MAT3
			case 0x8b5c: return setValueM4a; // _MAT4

			case 0x8b5e: return setValueT1a; // SAMPLER_2D
			case 0x8b60: return setValueT6a; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function StructuredUniform( id ) {

		this.id = id;

		UniformContainer.call( this ); // mix-in

	}

	StructuredUniform.prototype.setValue = function ( gl, value ) {

		// Note: Don't need an extra 'renderer' parameter, since samplers
		// are not allowed in structured uniforms.

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ] );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		for ( ; ; ) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {

				// step into inner node / create it in case it doesn't exist

				var map = container.map, next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program, renderer ) {

		UniformContainer.call( this );

		this.renderer = renderer;

		var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

		for ( var i = 0; i < n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				path = info.name,
				addr = gl.getUniformLocation( program, path );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, value, this.renderer );

	};

	WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) this.setValue( gl, name, v );

	};


	// Static interface

	WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {

				// note: always updating when .needsUpdate is undefined
				u.setValue( gl, v.value, renderer );

			}

		}

	};

	WebGLUniforms.seqWithValue = function ( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) r.push( u );

		}

		return r;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	Object.assign( Color.prototype, {

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value && value.isColor ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function setHSL( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = _Math.euclideanModulo( h, 1 );
				s = _Math.clamp( s, 0, 1 );
				l = _Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function ( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	} );

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			uvTransform: { value: new Matrix3() },

			alphaMap: { value: null },

		},

		specularmap: {

			specularMap: { value: null },

		},

		envmap: {

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		gradientmap: {

			gradientMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },

			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			uvTransform: { value: new Matrix3() }

		}

	};

	/**
	 * Uniform Utilities
	 */

	var UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src && ( parameter_src.isColor ||
						parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
						parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
						parameter_src.isTexture ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "\nvec3 transformed = vec3( position );\n";

	var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

	var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

	var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

	var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

	var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

	var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

	var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

	var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

	var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

	var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

	var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

	var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";

	var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

	var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";

	var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";

	var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

	var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

	var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

	var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";

	var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars: lights_pars,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_template: lights_template,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment: normal_fragment,
		normalmap_pars_fragment: normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert
	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					specular: { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0.5 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		points: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.points,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		equirect: {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		},

		shadow: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: new Color( 0x00000 ) },
					opacity: { value: 1.0 }
				},
			] ),

			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag

		}

	};

	ShaderLib.physical = {

		uniforms: UniformsUtils.merge( [
			ShaderLib.standard.uniforms,
			{
				clearCoat: { value: 0 },
				clearCoatRoughness: { value: 0 }
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Object.assign( Box2.prototype, {

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector2();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 4 splitting planes to rule out intersections

			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector2();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {

		var vertexBuffer, elementBuffer;
		var shader, program, attributes, uniforms;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1, 0, 0,
				  1, - 1, 1, 0,
				  1, 1, 1, 1,
				- 1, 1, 0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			shader = {

				vertexShader: [

					'uniform lowp int renderType;',

					'uniform vec3 screenPosition;',
					'uniform vec2 scale;',
					'uniform float rotation;',

					'uniform sampler2D occlusionMap;',

					'attribute vec2 position;',
					'attribute vec2 uv;',

					'varying vec2 vUV;',
					'varying float vVisibility;',

					'void main() {',

					'	vUV = uv;',

					'	vec2 pos = position;',

					'	if ( renderType == 2 ) {',

					'		vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',
					'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',

					'		vVisibility =        visibility.r / 9.0;',
					'		vVisibility *= 1.0 - visibility.g / 9.0;',
					'		vVisibility *=       visibility.b / 9.0;',
					'		vVisibility *= 1.0 - visibility.a / 9.0;',

					'		pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',
					'		pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',

					'	}',

					'	gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',

					'}'

				].join( '\n' ),

				fragmentShader: [

					'uniform lowp int renderType;',

					'uniform sampler2D map;',
					'uniform float opacity;',
					'uniform vec3 color;',

					'varying vec2 vUV;',
					'varying float vVisibility;',

					'void main() {',

					// pink square

					'	if ( renderType == 0 ) {',

					'		gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',

					// restore

					'	} else if ( renderType == 1 ) {',

					'		gl_FragColor = texture2D( map, vUV );',

					// flare

					'	} else {',

					'		vec4 texture = texture2D( map, vUV );',
					'		texture.a *= opacity * vVisibility;',
					'		gl_FragColor = texture;',
					'		gl_FragColor.rgb *= color;',

					'	}',

					'}'

				].join( '\n' )

			};

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation( program, 'position' ),
				uv: gl.getAttribLocation( program, 'uv' )
			};

			uniforms = {
				renderType: gl.getUniformLocation( program, 'renderType' ),
				map: gl.getUniformLocation( program, 'map' ),
				occlusionMap: gl.getUniformLocation( program, 'occlusionMap' ),
				opacity: gl.getUniformLocation( program, 'opacity' ),
				color: gl.getUniformLocation( program, 'color' ),
				scale: gl.getUniformLocation( program, 'scale' ),
				rotation: gl.getUniformLocation( program, 'rotation' ),
				screenPosition: gl.getUniformLocation( program, 'screenPosition' )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( flares, scene, camera, viewport ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new Vector3();

			var invAspect = viewport.w / viewport.z,
				halfViewportWidth = viewport.z * 0.5,
				halfViewportHeight = viewport.w * 0.5;

			var size = 16 / viewport.w,
				scale = new Vector2( size * invAspect, size );

			var screenPosition = new Vector3( 1, 1, 0 ),
				screenPositionPixels = new Vector2( 1, 1 );

			var validArea = new Box2();

			validArea.min.set( viewport.x, viewport.y );
			validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

			if ( program === undefined ) {

				init();

			}

			state.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			state.buffers.depth.setMask( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewport.w;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyMatrix4( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				// horizontal and vertical coordinate of the lower left corner of the pixels to copy

				screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
				screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

				// screen cull

				if ( validArea.containsPoint( screenPositionPixels ) === true ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewport.w;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );

							textures.setTexture2D( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			state.buffers.depth.setMask( true );

			state.reset();

		};

		function createProgram( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = 'precision ' + capabilities.precision + ' float;\n';

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new Vector3();
		var spriteRotation = new Quaternion();
		var spriteScale = new Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5, 0, 0,
				  0.5, - 0.5, 1, 0,
				  0.5, 0.5, 1, 1,
				- 0.5, 0.5, 0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position: gl.getAttribLocation( program, 'position' ),
				uv: gl.getAttribLocation( program, 'uv' )
			};

			uniforms = {
				uvOffset: gl.getUniformLocation( program, 'uvOffset' ),
				uvScale: gl.getUniformLocation( program, 'uvScale' ),

				rotation: gl.getUniformLocation( program, 'rotation' ),
				scale: gl.getUniformLocation( program, 'scale' ),

				color: gl.getUniformLocation( program, 'color' ),
				map: gl.getUniformLocation( program, 'map' ),
				opacity: gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType: gl.getUniformLocation( program, 'fogType' ),
				fogDensity: gl.getUniformLocation( program, 'fogDensity' ),
				fogNear: gl.getUniformLocation( program, 'fogNear' ),
				fogFar: gl.getUniformLocation( program, 'fogFar' ),
				fogColor: gl.getUniformLocation( program, 'fogColor' ),
				fogDepth: gl.getUniformLocation( program, 'fogDepth' ),

				alphaTest: gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new CanvasTexture( canvas );

		}

		this.render = function ( sprites, scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			state.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( fog.isFog ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( fog.isFogExp2 ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				if ( material.visible === false ) continue;

				sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
				state.buffers.depth.setTest( material.depthTest );
				state.buffers.depth.setMask( material.depthWrite );
				state.buffers.color.setMask( material.colorWrite );

				textures.setTexture2D( material.map || texture, 0 );

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

				sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			state.reset();

		};

		function createProgram() {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + capabilities.precision + ' float;',

				'#define SHADER_NAME ' + 'SpriteMaterial',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',
				'varying float fogDepth;',

				'void main() {',

				'	vUV = uvOffset + uv * uvScale;',

				'	vec2 alignedPosition = position * scale;',

				'	vec2 rotatedPosition;',
				'	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
				'	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

				'	vec4 mvPosition;',

				'	mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
				'	mvPosition.xy += rotatedPosition;',

				'	gl_Position = projectionMatrix * mvPosition;',

				'	fogDepth = - mvPosition.z;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + capabilities.precision + ' float;',

				'#define SHADER_NAME ' + 'SpriteMaterial',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',
				'varying float fogDepth;',

				'void main() {',

				'	vec4 texture = texture2D( map, vUV );',

				'	gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

				'	if ( gl_FragColor.a < alphaTest ) discard;',

				'	if ( fogType > 0 ) {',

				'		float fogFactor = 0.0;',

				'		if ( fogType == 1 ) {',

				'			fogFactor = smoothstep( fogNear, fogFar, fogDepth );',

				'		} else {',

				'			const float LOG2 = 1.442695;',
				'			fogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',
				'			fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

				'		}',

				'		gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',

				'	}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var materialId = 0;

	function Material() {

		Object.defineProperty( this, 'id', { value: materialId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;
		this.lights = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.flatShading = false;
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this.userData = {};

		this.needsUpdate = true;

	}

	Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Material,

		isMaterial: true,

		onBeforeCompile: function () {},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				// for backward compatability if shading is set in the constructor
				if ( key === 'shading' ) {

					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( newValue === FlatShading ) ? true : false;
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue && currentValue.isColor ) {

					currentValue.set( newValue );

				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = ( meta === undefined || typeof meta === 'string' );

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( this.color && this.color.isColor ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
			if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

			if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;
			if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
			if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

			if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( this.bumpMap && this.bumpMap.isTexture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( this.normalMap && this.normalMap.isTexture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( this.displacementMap && this.displacementMap.isTexture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( this.envMap && this.envMap.isTexture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.gradientMap && this.gradientMap.isTexture ) {

				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.flatShading === true ) data.flatShading = this.flatShading;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			// rotation (SpriteMaterial)
			if ( this.rotation !== 0 ) data.rotation = this.rotation;

			if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
			if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
			if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
			if ( this.scale !== undefined ) data.scale = this.scale;

			if ( this.dithering === true ) data.dithering = true;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			if ( this.morphTargets === true ) data.morphTargets = true;
			if ( this.skinning === true ) data.skinning = true;

			if ( this.visible === false ) data.visible = false;
			if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;
			this.lights = source.lights;

			this.blending = source.blending;
			this.side = source.side;
			this.flatShading = source.flatShading;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.dithering = source.dithering;

			this.alphaTest = source.alphaTest;
			this.premultipliedAlpha = source.premultipliedAlpha;

			this.overdraw = source.overdraw;

			this.visible = source.visible;
			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			this.clipShadows = source.clipShadows;
			this.clipIntersection = source.clipIntersection;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

			this.clippingPlanes = dstPlanes;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  referencePosition: <float>,
	 *  nearDistance: <float>,
	 *  farDistance: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>
	 *
	 * }
	 */

	function MeshDistanceMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDistanceMaterial';

		this.referencePosition = new Vector3();
		this.nearDistance = 1;
		this.farDistance = 1000;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDistanceMaterial.prototype = Object.create( Material.prototype );
	MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

	MeshDistanceMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.referencePosition.copy( source.referencePosition );
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}

	Object.assign( Box3.prototype, {

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromBufferAttribute: function ( attribute ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				var x = attribute.getX( i );
				var y = attribute.getY( i );
				var z = attribute.getZ( i );

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector3();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function ( object ) {

			this.makeEmpty();

			return this.expandByObject( object );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		expandByObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var scope, i, l;

			var v1 = new Vector3();

			function traverse( node ) {

				var geometry = node.geometry;

				if ( geometry !== undefined ) {

					if ( geometry.isGeometry ) {

						var vertices = geometry.vertices;

						for ( i = 0, l = vertices.length; i < l; i ++ ) {

							v1.copy( vertices[ i ] );
							v1.applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					} else if ( geometry.isBufferGeometry ) {

						var attribute = geometry.attributes.position;

						if ( attribute !== undefined ) {

							for ( i = 0, l = attribute.count; i < l; i ++ ) {

								v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						}

					}

				}

			}

			return function expandByObject( object ) {

				scope = this;

				object.updateMatrixWorld( true );

				object.traverse( traverse );

				return this;

			};

		}(),

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

		},

		intersectsSphere: ( function () {

			var closestPoint = new Vector3();

			return function intersectsSphere( sphere ) {

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector3();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new Vector3();

			return function getBoundingSphere( optionalTarget ) {

				var result = optionalTarget || new Sphere();

				this.getCenter( result.center );

				result.radius = this.getSize( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if ( this.isEmpty() ) this.makeEmpty();

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3()
			];

			return function applyMatrix4( matrix ) {

				// transform of empty box is an empty box.
				if ( this.isEmpty() ) return this;

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Object.assign( Sphere.prototype, {

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new Box3();

			return function setFromPoints( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).getCenter( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	function Plane( normal, constant ) {

		// normal is assumed to be normalized

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Object.assign( Plane.prototype, {

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function setFromCoplanarPoints( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

		},

		intersectLine: function () {

			var v1 = new Vector3();

			return function intersectLine( line, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new Vector3();
			var m1 = new Matrix3();

			return function applyMatrix4( matrix, optionalNormalMatrix ) {

				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );

				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

				this.constant = - referencePoint.dot( normal );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Object.assign( Frustum.prototype, {

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new Sphere();

			return function intersectsObject( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSprite: function () {

			var sphere = new Sphere();

			return function intersectsSprite( sprite ) {

				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new Vector3(),
				p2 = new Vector3();

			return function intersectsBox( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),

		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

		var _frustum = new Frustum(),
			_projScreenMatrix = new Matrix4(),

			_shadowMapSize = new Vector2(),
			_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),

			_lookTarget = new Vector3(),
			_lightPositionWorld = new Vector3(),

			_MorphingFlag = 1,
			_SkinningFlag = 2,

			_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

			_depthMaterials = new Array( _NumberOfMaterialVariants ),
			_distanceMaterials = new Array( _NumberOfMaterialVariants ),

			_materialCache = {};

		var cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new Vector4(), new Vector4(), new Vector4(),
			new Vector4(), new Vector4(), new Vector4()
		];

		// init

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = new MeshDepthMaterial( {

				depthPacking: RGBADepthPacking,

				morphTargets: useMorphing,
				skinning: useSkinning

			} );

			_depthMaterials[ i ] = depthMaterial;

			//

			var distanceMaterial = new MeshDistanceMaterial( {

				morphTargets: useMorphing,
				skinning: useSkinning

			} );

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.renderReverseSided = true;
		this.renderSingleSided = true;

		this.render = function ( lights, scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( lights.length === 0 ) return;

			// TODO Clean up (needed in case of contextlost)
			var _gl = _renderer.context;
			var _state = _renderer.state;

			// Set GL state for depth map.
			_state.disable( _gl.BLEND );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );

			// render depth map

			var faceCount;

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];
				var shadow = light.shadow;
				var isPointLight = light && light.isPointLight;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				var shadowCamera = shadow.camera;

				_shadowMapSize.copy( shadow.mapSize );
				_shadowMapSize.min( _maxShadowMapSize );

				if ( isPointLight ) {

					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";

					shadowCamera.updateProjectionMatrix();

				}

				if ( shadow.isSpotLightShadow ) {

					shadow.update( light );

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				if ( isPointLight ) {

					faceCount = 6;

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position

					shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

				} else {

					faceCount = 1;

					_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

				}

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );
						shadowCamera.updateMatrixWorld();

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					}

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					renderObject( scene, camera, shadowCamera, isPointLight );

				}

			}

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {

			var geometry = object.geometry;

			var result = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = false;

				if ( material.morphTargets ) {

					if ( geometry && geometry.isBufferGeometry ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( geometry && geometry.isGeometry ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				if ( object.isSkinnedMesh && material.skinning === false ) {

					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

				}

				var useSkinning = object.isSkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				result = materialVariants[ variantIndex ];

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
					material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			var side = material.side;

			if ( scope.renderSingleSided && side == DoubleSide ) {

				side = FrontSide;

			}

			if ( scope.renderReverseSided ) {

				if ( side === FrontSide ) side = BackSide;
				else if ( side === BackSide ) side = FrontSide;

			}

			result.side = side;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( isPointLight && result.isMeshDistanceMaterial ) {

				result.referencePosition.copy( lightPositionWorld );
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;

			}

			return result;

		}

		function renderObject( object, camera, shadowCamera, isPointLight ) {

			if ( object.visible === false ) return;

			var visible = object.layers.test( camera.layers );

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					var geometry = _objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

							var group = groups[ k ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

							}

						}

					} else if ( material.visible ) {

						var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				renderObject( children[ i ], camera, shadowCamera, isPointLight );

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAttributes( gl ) {

		var buffers = {};

		function createBuffer( attribute, bufferType ) {

			var array = attribute.array;
			var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			var buffer = gl.createBuffer();

			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );

			attribute.onUploadCallback();

			var type = gl.FLOAT;

			if ( array instanceof Float32Array ) {

				type = gl.FLOAT;

			} else if ( array instanceof Float64Array ) {

				console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

			} else if ( array instanceof Uint16Array ) {

				type = gl.UNSIGNED_SHORT;

			} else if ( array instanceof Int16Array ) {

				type = gl.SHORT;

			} else if ( array instanceof Uint32Array ) {

				type = gl.UNSIGNED_INT;

			} else if ( array instanceof Int32Array ) {

				type = gl.INT;

			} else if ( array instanceof Int8Array ) {

				type = gl.BYTE;

			} else if ( array instanceof Uint8Array ) {

				type = gl.UNSIGNED_BYTE;

			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};

		}

		function updateBuffer( buffer, attribute, bufferType ) {

			var array = attribute.array;
			var updateRange = attribute.updateRange;

			gl.bindBuffer( bufferType, buffer );

			if ( attribute.dynamic === false ) {

				gl.bufferData( bufferType, array, gl.STATIC_DRAW );

			} else if ( updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, array );

			} else if ( updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

				updateRange.count = - 1; // reset range

			}

		}

		//

		function get( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			return buffers[ attribute.uuid ];

		}

		function remove( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			var data = buffers[ attribute.uuid ];

			if ( data ) {

				gl.deleteBuffer( data.buffer );

				delete buffers[ attribute.uuid ];

			}

		}

		function update( attribute, bufferType ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			var data = buffers[ attribute.uuid ];

			if ( data === undefined ) {

				buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );

			} else if ( data.version < attribute.version ) {

				updateBuffer( data.buffer, attribute, bufferType );

				data.version = attribute.version;

			}

		}

		return {

			get: get,
			remove: remove,
			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Object.defineProperties( Euler.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this.onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this.onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this.onChangeCallback();

			}

		},

		order: {

			get: function () {

				return this._order;

			},

			set: function ( value ) {

				this._order = value;
				this.onChangeCallback();

			}

		}

	} );

	Object.assign( Euler.prototype, {

		isEuler: true,

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix = new Matrix4();

			return function setFromQuaternion( q, order, update ) {

				matrix.makeRotationFromQuaternion( q );

				return this.setFromRotationMatrix( matrix, order, update );

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new Quaternion();

			return function reorder( newOrder ) {

				q.setFromEuler( this );

				return this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1 | 0;

	}

	Object.assign( Layers.prototype, {

		set: function ( channel ) {

			this.mask = 1 << channel | 0;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel | 0;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel | 0;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel | 0 );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	var object3DId = 0;

	function Object3D() {

		Object.defineProperty( this, 'id', { value: object3DId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Object3D,

		isObject3D: true,

		onBeforeRender: function () {},
		onAfterRender: function () {},

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		applyQuaternion: function ( q ) {

			this.quaternion.premultiply( q );

			return this;

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new Quaternion();

			return function rotateOnAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateOnWorldAxis: function () {

			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent

			var q1 = new Quaternion();

			return function rotateOnWorldAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.premultiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function rotateX( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function rotateY( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function rotateZ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new Vector3();

			return function translateOnAxis( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function translateX( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function translateY( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function translateZ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new Matrix4();

			return function worldToLocal( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This method does not support objects with rotated and/or translated parent(s)

			var m1 = new Matrix4();
			var vector = new Vector3();

			return function lookAt( x, y, z ) {

				if ( x.isVector3 ) {

					vector.copy( x );

				} else {

					vector.set( x, y, z );

				}

				if ( this.isCamera ) {

					m1.lookAt( this.position, vector, this.up );

				} else {

					m1.lookAt( vector, this.position, this.up );

				}

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( ( object && object.isObject3D ) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

				return this;

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

			return this;

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new Vector3();
			var scale = new Vector3();

			return function getWorldQuaternion( optionalTarget ) {

				var result = optionalTarget || new Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new Quaternion();

			return function getWorldRotation( optionalTarget ) {

				var result = optionalTarget || new Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new Vector3();
			var quaternion = new Quaternion();

			return function getWorldScale( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate || force ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			// meta is a string when called from JSON.stringify
			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {}
				};

				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

			object.matrix = this.matrix.toArray();

			//

			function serialize( library, element ) {

				if ( library[ element.uuid ] === undefined ) {

					library[ element.uuid ] = element.toJSON( meta );

				}

				return element.uuid;

			}

			if ( this.geometry !== undefined ) {

				object.geometry = serialize( meta.geometries, this.geometry );

				var parameters = this.geometry.parameters;

				if ( parameters !== undefined && parameters.shapes !== undefined ) {

					var shapes = parameters.shapes;

					if ( Array.isArray( shapes ) ) {

						for ( var i = 0, l = shapes.length; i < l; i ++ ) {

							var shape = shapes[ i ];

							serialize( meta.shapes, shape );

						}

					} else {

						serialize( meta.shapes, shapes );

					}

				}

			}

			if ( this.material !== undefined ) {

				if ( Array.isArray( this.material ) ) {

					var uuids = [];

					for ( var i = 0, l = this.material.length; i < l; i ++ ) {

						uuids.push( serialize( meta.materials, this.material[ i ] ) );

					}

					object.material = uuids;

				} else {

					object.material = serialize( meta.materials, this.material );

				}

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
				var shapes = extractFromCache( meta.shapes );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;
				if ( shapes.length > 0 ) output.shapes = shapes;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.layers.mask = source.layers.mask;
			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();
		this.projectionMatrix = new Matrix4();

	}

	Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Camera,

		isCamera: true,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );
			this.projectionMatrix.copy( source.projectionMatrix );

			return this;

		},

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			};

		}(),

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			this.matrixWorldInverse.getInverse( this.matrixWorld );

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null && this.view.enabled ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = ( color && color.isColor ) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Object.assign( Face3.prototype, {

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	var geometryId = 0; // Geometry uses even numbers as Id

	function Geometry() {

		Object.defineProperty( this, 'id', { value: geometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Geometry,

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1 = new Matrix4();

			return function rotateX( angle ) {

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1 = new Matrix4();

			return function rotateY( angle ) {

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1 = new Matrix4();

			return function rotateZ( angle ) {

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1 = new Matrix4();

			return function translate( x, y, z ) {

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1 = new Matrix4();

			return function scale( x, y, z ) {

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj = new Object3D();

			return function lookAt( vector ) {

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			var groups = geometry.groups;

			if ( groups.length > 0 ) {

				for ( var i = 0; i < groups.length; i ++ ) {

					var group = groups[ i ];

					var start = group.start;
					var count = group.count;

					for ( var j = start, jl = start + count; j < jl; j += 3 ) {

						if ( indices !== undefined ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

						} else {

							addFace( j, j + 1, j + 2, group.materialIndex );

						}

					}

				}

			} else {

				if ( indices !== undefined ) {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				} else {

					for ( var i = 0; i < positions.length / 3; i += 3 ) {

						addFace( i, i + 1, i + 2 );

					}

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( ! ( geometry && geometry.isGeometry ) ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				uvs1 = this.faceVertexUvs[ 0 ],
				uvs2 = geometry.faceVertexUvs[ 0 ],
				colors1 = this.colors,
				colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( ! ( mesh && mesh.isMesh ) ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		setFromPoints: function ( points ) {

			this.vertices = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return this;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			var i, il, j, jl, k, kl;

			// reset

			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
			this.morphTargets = [];
			this.morphNormals = [];
			this.skinWeights = [];
			this.skinIndices = [];
			this.lineDistances = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// vertices

			var vertices = source.vertices;

			for ( i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			// colors

			var colors = source.colors;

			for ( i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			// faces

			var faces = source.faces;

			for ( i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			// face vertex uvs

			for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			// morph targets

			var morphTargets = source.morphTargets;

			for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = {};
				morphTarget.name = morphTargets[ i ].name;

				// vertices

				if ( morphTargets[ i ].vertices !== undefined ) {

					morphTarget.vertices = [];

					for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

						morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

					}

				}

				// normals

				if ( morphTargets[ i ].normals !== undefined ) {

					morphTarget.normals = [];

					for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

						morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

					}

				}

				this.morphTargets.push( morphTarget );

			}

			// morph normals

			var morphNormals = source.morphNormals;

			for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

				var morphNormal = {};

				// vertex normals

				if ( morphNormals[ i ].vertexNormals !== undefined ) {

					morphNormal.vertexNormals = [];

					for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

						var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
						var destVertexNormal = {};

						destVertexNormal.a = srcVertexNormal.a.clone();
						destVertexNormal.b = srcVertexNormal.b.clone();
						destVertexNormal.c = srcVertexNormal.c.clone();

						morphNormal.vertexNormals.push( destVertexNormal );

					}

				}

				// face normals

				if ( morphNormals[ i ].faceNormals !== undefined ) {

					morphNormal.faceNormals = [];

					for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

						morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

					}

				}

				this.morphNormals.push( morphNormal );

			}

			// skin weights

			var skinWeights = source.skinWeights;

			for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

				this.skinWeights.push( skinWeights[ i ].clone() );

			}

			// skin indices

			var skinIndices = source.skinIndices;

			for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

				this.skinIndices.push( skinIndices[ i ].clone() );

			}

			// line distances

			var lineDistances = source.lineDistances;

			for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

				this.lineDistances.push( lineDistances[ i ] );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// update flags

			this.elementsNeedUpdate = source.elementsNeedUpdate;
			this.verticesNeedUpdate = source.verticesNeedUpdate;
			this.uvsNeedUpdate = source.uvsNeedUpdate;
			this.normalsNeedUpdate = source.normalsNeedUpdate;
			this.colorsNeedUpdate = source.colorsNeedUpdate;
			this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
			this.groupsNeedUpdate = source.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.uuid = _Math.generateUUID();
		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.onUploadCallback = function () {};

		this.version = 0;

	}

	Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) this.version ++;

		}

	} );

	Object.assign( BufferAttribute.prototype, {

		isBufferAttribute: true,

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.itemSize : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		},

		clone: function () {

			return new this.constructor( this.array, this.itemSize ).copy( this );

		}

	} );

	//

	function Int8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

	}

	Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


	function Uint8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

	}

	Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


	function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

	}

	Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


	function Int16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

	}

	Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


	function Uint16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

	}

	Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


	function Int32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

	}

	Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


	function Uint32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

	}

	Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


	function Float32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

	}

	Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


	function Float64BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

	}

	Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, {

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex = undefined;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function arrayMax( array ) {

		if ( array.length === 0 ) return - Infinity;

		var max = array[ 0 ];

		for ( var i = 1, l = array.length; i < l; ++ i ) {

			if ( array[ i ] > max ) max = array[ i ];

		}

		return max;

	}

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	}

	BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: BufferGeometry,

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			if ( Array.isArray( index ) ) {

				this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

			} else {

				this.index = index;

			}

		},

		addAttribute: function ( name, attribute ) {

			if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToBufferAttribute( position );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToBufferAttribute( normal );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1 = new Matrix4();

			return function rotateX( angle ) {

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1 = new Matrix4();

			return function rotateY( angle ) {

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1 = new Matrix4();

			return function rotateZ( angle ) {

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1 = new Matrix4();

			return function translate( x, y, z ) {

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1 = new Matrix4();

			return function scale( x, y, z ) {

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj = new Object3D();

			return function lookAt( vector ) {

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object.isPoints || object.isLine ) {

				var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object.isMesh ) {

				if ( geometry && geometry.isGeometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		setFromPoints: function ( points ) {

			var position = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );

			}

			this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object.isMesh ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var position = this.attributes.position;

			if ( position !== undefined ) {

				this.boundingBox.setFromBufferAttribute( position );

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			var box = new Box3();
			var vector = new Vector3();

			return function computeBoundingSphere() {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new Sphere();

				}

				var position = this.attributes.position;

				if ( position ) {

					var center = this.boundingSphere.center;

					box.setFromBufferAttribute( position );
					box.getCenter( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = position.count; i < il; i ++ ) {

						vector.x = position.getX( i );
						vector.y = position.getY( i );
						vector.z = position.getZ( i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC;
				var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				var cb = new Vector3(), ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( ! ( geometry && geometry.isBufferGeometry ) ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var vector = new Vector3();

			return function normalizeNormals() {

				var normals = this.attributes.normal;

				for ( var i = 0, il = normals.count; i < il; i ++ ) {

					vector.x = normals.getX( i );
					vector.y = normals.getY( i );
					vector.z = normals.getZ( i );

					vector.normalize();

					normals.setXYZ( i, vector.x, vector.y, vector.z );

				}

			};

		}(),

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array,
					normalized: attribute.normalized
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var name, i, l;

			// reset

			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// index

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			// attributes

			var attributes = source.attributes;

			for ( name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			// morph attributes

			var morphAttributes = source.morphAttributes;

			for ( name in morphAttributes ) {

				var array = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

					array.push( morphAttribute[ i ].clone() );

				}

				this.morphAttributes[ name ] = array;

			}

			// groups

			var groups = source.groups;

			for ( i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// draw range

			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// BoxGeometry

	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();

	}

	BoxGeometry.prototype = Object.create( Geometry.prototype );
	BoxGeometry.prototype.constructor = BoxGeometry;

	// BoxBufferGeometry

	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		BufferGeometry.call( this );

		this.type = 'BoxBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		var scope = this;

		width = width || 1;
		height = height || 1;
		depth = depth || 1;

		// segments

		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var numberOfVertices = 0;
		var groupStart = 0;

		// build each side of the box geometry

		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			var segmentWidth = width / gridX;
			var segmentHeight = height / gridY;

			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var vertexCounter = 0;
			var groupCount = 0;

			var ix, iy;

			var vector = new Vector3();

			// generate vertices, normals and uvs

			for ( iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segmentHeight - heightHalf;

				for ( ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segmentWidth - widthHalf;

					// set values to correct vector component

					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer

					vertices.push( vector.x, vector.y, vector.z );

					// set values to correct vector component

					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer

					normals.push( vector.x, vector.y, vector.z );

					// uvs

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

					// counters

					vertexCounter += 1;

				}

			}

			// indices

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// increase counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups

			groupStart += groupCount;

			// update total number of vertices

			numberOfVertices += vertexCounter;

		}

	}

	BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PlaneGeometry

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
		this.mergeVertices();

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	// PlaneBufferGeometry

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		width = width || 1;
		height = height || 1;

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var ix, iy;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices.push( x, - y, 0 );

				normals.push( 0, 0, 1 );

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

			}

		}

		// indices

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = UniformsUtils.clone( source.uniforms );

		this.defines = source.defines;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3();

	}

	Object.assign( Ray.prototype, {

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function () {

			var v1 = new Vector3();

			return function recast( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new Vector3();

			return function distanceSqToPoint( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new Vector3();
			var segDir = new Vector3();
			var diff = new Vector3();

			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new Vector3();

			return function intersectSphere( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t : null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},

		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new Vector3();

			return function intersectsBox( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new Vector3();
			var edge1 = new Vector3();
			var edge2 = new Vector3();
			var normal = new Vector3();

			return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Object.assign( Line3.prototype, {

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new Vector3();
			var startEnd = new Vector3();

			return function closestPointToPointParameter( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = _Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Object.assign( Triangle, {

		normal: function () {

			var v0 = new Vector3();

			return function normal( a, b, c, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				result.subVectors( c, b );
				v0.subVectors( a, b );
				result.cross( v0 );

				var resultLengthSq = result.lengthSq();
				if ( resultLengthSq > 0 ) {

					return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

				}

				return result.set( 0, 0, 0 );

			};

		}(),

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		barycoordFromPoint: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();
			var v2 = new Vector3();

			return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

				v0.subVectors( c, a );
				v1.subVectors( b, a );
				v2.subVectors( point, a );

				var dot00 = v0.dot( v0 );
				var dot01 = v0.dot( v1 );
				var dot02 = v0.dot( v2 );
				var dot11 = v1.dot( v1 );
				var dot12 = v1.dot( v2 );

				var denom = ( dot00 * dot11 - dot01 * dot01 );

				var result = optionalTarget || new Vector3();

				// collinear or singular triangle
				if ( denom === 0 ) {

					// arbitrary location outside of triangle?
					// not sure if this is the best idea, maybe should be returning undefined
					return result.set( - 2, - 1, - 1 );

				}

				var invDenom = 1 / denom;
				var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
				var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

				// barycentric coordinates must always sum to 1
				return result.set( 1 - u - v, v, u );

			};

		}(),

		containsPoint: function () {

			var v1 = new Vector3();

			return function containsPoint( point, a, b, c ) {

				var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

				return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

			};

		}()

	} );

	Object.assign( Triangle.prototype, {

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();

			return function area() {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		closestPointToPoint: function () {

			var plane = new Plane();
			var edgeList = [ new Line3(), new Line3(), new Line3() ];
			var projectedPoint = new Vector3();
			var closestPoint = new Vector3();

			return function closestPointToPoint( point, optionalTarget ) {

				var result = optionalTarget || new Vector3();
				var minDistance = Infinity;

				// project the point onto the plane of the triangle

				plane.setFromCoplanarPoints( this.a, this.b, this.c );
				plane.projectPoint( point, projectedPoint );

				// check if the projection lies within the triangle

				if ( this.containsPoint( projectedPoint ) === true ) {

					// if so, this is the closest point

					result.copy( projectedPoint );

				} else {

					// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

					edgeList[ 0 ].set( this.a, this.b );
					edgeList[ 1 ].set( this.b, this.c );
					edgeList[ 2 ].set( this.c, this.a );

					for ( var i = 0; i < edgeList.length; i ++ ) {

						edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

						var distance = projectedPoint.distanceToSquared( closestPoint );

						if ( distance < minDistance ) {

							minDistance = distance;

							result.copy( closestPoint );

						}

					}

				}

				return result;

			};

		}(),

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			if ( source.morphTargetInfluences !== undefined ) {

				this.morphTargetInfluences = source.morphTargetInfluences.slice();

			}

			if ( source.morphTargetDictionary !== undefined ) {

				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

			}

			return this;

		},

		updateMorphTargets: function () {

			var geometry = this.geometry;
			var m, ml, name;

			if ( geometry.isBufferGeometry ) {

				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );

				if ( keys.length > 0 ) {

					var morphAttribute = morphAttributes[ keys[ 0 ] ];

					if ( morphAttribute !== undefined ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

							name = morphAttribute[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			} else {

				var morphTargets = geometry.morphTargets;

				if ( morphTargets !== undefined && morphTargets.length > 0 ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

						name = morphTargets[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		},

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();

			var tempA = new Vector3();
			var tempB = new Vector3();
			var tempC = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			var barycoord = new Vector3();

			var intersectionPoint = new Vector3();
			var intersectionPointWorld = new Vector3();

			function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

				Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

				uv1.multiplyScalar( barycoord.x );
				uv2.multiplyScalar( barycoord.y );
				uv3.multiplyScalar( barycoord.z );

				uv1.add( uv2 ).add( uv3 );

				return uv1.clone();

			}

			function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

				var intersect;

				if ( material.side === BackSide ) {

					intersect = ray.intersectTriangle( pC, pB, pA, true, point );

				} else {

					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

				}

				if ( intersect === null ) return null;

				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

				if ( distance < raycaster.near || distance > raycaster.far ) return null;

				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};

			}

			function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {

				vA.fromBufferAttribute( position, a );
				vB.fromBufferAttribute( position, b );
				vC.fromBufferAttribute( position, c );

				var intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );

				if ( intersection ) {

					if ( uv ) {

						uvA.fromBufferAttribute( uv, a );
						uvB.fromBufferAttribute( uv, b );
						uvC.fromBufferAttribute( uv, c );

						intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

					}

					intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
					intersection.faceIndex = a;

				}

				return intersection;

			}

			return function raycast( raycaster, intersects ) {

				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;

				if ( material === undefined ) return;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				// Check boundingBox before continuing

				if ( geometry.boundingBox !== null ) {

					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

				}

				var intersection;

				if ( geometry.isBufferGeometry ) {

					var a, b, c;
					var index = geometry.index;
					var position = geometry.attributes.position;
					var uv = geometry.attributes.uv;
					var i, l;

					if ( index !== null ) {

						// indexed buffer geometry

						for ( i = 0, l = index.count; i < l; i += 3 ) {

							a = index.getX( i );
							b = index.getX( i + 1 );
							c = index.getX( i + 2 );

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
								intersects.push( intersection );

							}

						}

					} else if ( position !== undefined ) {

						// non-indexed buffer geometry

						for ( i = 0, l = position.count; i < l; i += 3 ) {

							a = i;
							b = i + 1;
							c = i + 2;

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

							if ( intersection ) {

								intersection.index = a; // triangle number in positions buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( geometry.isGeometry ) {

					var fvA, fvB, fvC;
					var isMultiMaterial = Array.isArray( material );

					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var uvs;

					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

						var face = faces[ f ];
						var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

						if ( faceMaterial === undefined ) continue;

						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];

						if ( faceMaterial.morphTargets === true ) {

							var morphTargets = geometry.morphTargets;
							var morphInfluences = this.morphTargetInfluences;

							vA.set( 0, 0, 0 );
							vB.set( 0, 0, 0 );
							vC.set( 0, 0, 0 );

							for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

								var influence = morphInfluences[ t ];

								if ( influence === 0 ) continue;

								var targets = morphTargets[ t ].vertices;

								vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
								vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
								vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

							}

							vA.add( fvA );
							vB.add( fvB );
							vC.add( fvC );

							fvA = vA;
							fvB = vB;
							fvC = vC;

						}

						intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

						if ( intersection ) {

							if ( uvs && uvs[ f ] ) {

								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );

								intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

							}

							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );

						}

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {

		var clearColor = new Color( 0x000000 );
		var clearAlpha = 0;

		var planeCamera, planeMesh;
		var boxMesh;

		function render( renderList, scene, camera, forceClear ) {

			var background = scene.background;

			if ( background === null ) {

				setClear( clearColor, clearAlpha );

			} else if ( background && background.isColor ) {

				setClear( background, 1 );
				forceClear = true;

			}

			if ( renderer.autoClear || forceClear ) {

				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

			}

			if ( background && background.isCubeTexture ) {

				if ( boxMesh === undefined ) {

					boxMesh = new Mesh(
						new BoxBufferGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							uniforms: ShaderLib.cube.uniforms,
							vertexShader: ShaderLib.cube.vertexShader,
							fragmentShader: ShaderLib.cube.fragmentShader,
							side: BackSide,
							depthTest: true,
							depthWrite: false,
							fog: false
						} )
					);

					boxMesh.geometry.removeAttribute( 'normal' );
					boxMesh.geometry.removeAttribute( 'uv' );

					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

						this.matrixWorld.copyPosition( camera.matrixWorld );

					};

					geometries.update( boxMesh.geometry );

				}

				boxMesh.material.uniforms.tCube.value = background;

				renderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );

			} else if ( background && background.isTexture ) {

				if ( planeCamera === undefined ) {

					planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

					planeMesh = new Mesh(
						new PlaneBufferGeometry( 2, 2 ),
						new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
					);

					geometries.update( planeMesh.geometry );

				}

				planeMesh.material.map = background;

				// TODO Push this to renderList

				renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

			}

		}

		function setClear( color, alpha ) {

			state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

		}

		return {

			getClearColor: function () {

				return clearColor;

			},
			setClearColor: function ( color, alpha ) {

				clearColor.set( color );
				clearAlpha = alpha !== undefined ? alpha : 1;
				setClear( clearColor, clearAlpha );

			},
			getClearAlpha: function () {

				return clearAlpha;

			},
			setClearAlpha: function ( alpha ) {

				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			render: render

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function painterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.program && b.program && a.program !== b.program ) {

			return a.program.id - b.program.id;

		} else if ( a.material.id !== b.material.id ) {

			return a.material.id - b.material.id;

		} else if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}

	function WebGLRenderList() {

		var renderItems = [];
		var renderItemsIndex = 0;

		var opaque = [];
		var transparent = [];

		function init() {

			renderItemsIndex = 0;

			opaque.length = 0;
			transparent.length = 0;

		}

		function push( object, geometry, material, z, group ) {

			var renderItem = renderItems[ renderItemsIndex ];

			if ( renderItem === undefined ) {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					program: material.program,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};

				renderItems[ renderItemsIndex ] = renderItem;

			} else {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.program = material.program;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;

			}

			( material.transparent === true ? transparent : opaque ).push( renderItem );

			renderItemsIndex ++;

		}

		function sort() {

			if ( opaque.length > 1 ) opaque.sort( painterSortStable );
			if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );

		}

		return {
			opaque: opaque,
			transparent: transparent,

			init: init,
			push: push,

			sort: sort
		};

	}

	function WebGLRenderLists() {

		var lists = {};

		function get( scene, camera ) {

			var hash = scene.id + ',' + camera.id;
			var list = lists[ hash ];

			if ( list === undefined ) {

				// console.log( 'THREE.WebGLRenderLists:', hash );

				list = new WebGLRenderList();
				lists[ hash ] = list;

			}

			return list;

		}

		function dispose() {

			lists = {};

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

	}

	function WebGLMorphtargets( gl ) {

		var influencesList = {};
		var morphInfluences = new Float32Array( 8 );

		function update( object, geometry, material, program ) {

			var objectInfluences = object.morphTargetInfluences;

			var length = objectInfluences.length;

			var influences = influencesList[ geometry.id ];

			if ( influences === undefined ) {

				// initialise list

				influences = [];

				for ( var i = 0; i < length; i ++ ) {

					influences[ i ] = [ i, 0 ];

				}

				influencesList[ geometry.id ] = influences;

			}

			var morphTargets = material.morphTargets && geometry.morphAttributes.position;
			var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

			// Remove current morphAttributes

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				if ( influence[ 1 ] !== 0 ) {

					if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
					if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );

				}

			}

			// Collect influences

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];

			}

			influences.sort( absNumericalSort );

			// Add morphAttributes

			for ( var i = 0; i < 8; i ++ ) {

				var influence = influences[ i ];

				if ( influence ) {

					var index = influence[ 0 ];
					var value = influence[ 1 ];

					if ( value ) {

						if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
						if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );

						morphInfluences[ i ] = value;
						continue;

					}

				}

				morphInfluences[ i ] = 0;

			}

			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

		}

		return {

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, bytesPerElement;

		function setIndex( value ) {

			type = value.type;
			bytesPerElement = value.bytesPerElement;

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * bytesPerElement );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
			else if ( mode === gl.POINTS ) infoRender.points += count;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
			else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

		}

		//

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
			else if ( mode === gl.POINTS ) infoRender.points += count;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			if ( position.isInterleavedBufferAttribute ) {

				count = position.data.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			} else {

				extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );

			}

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
			else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

		}

		//

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, attributes, infoMemory ) {

		var geometries = {};
		var wireframeAttributes = {};

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				attributes.remove( buffergeometry.index );

			}

			for ( var name in buffergeometry.attributes ) {

				attributes.remove( buffergeometry.attributes[ name ] );

			}

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			// TODO Remove duplicate code

			var attribute = wireframeAttributes[ geometry.id ];

			if ( attribute ) {

				attributes.remove( attribute );
				delete wireframeAttributes[ geometry.id ];

			}

			attribute = wireframeAttributes[ buffergeometry.id ];

			if ( attribute ) {

				attributes.remove( attribute );
				delete wireframeAttributes[ buffergeometry.id ];

			}

			//

			infoMemory.geometries --;

		}

		function get( object, geometry ) {

			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry ) return buffergeometry;

			geometry.addEventListener( 'dispose', onGeometryDispose );

			if ( geometry.isBufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry.isGeometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries[ geometry.id ] = buffergeometry;

			infoMemory.geometries ++;

			return buffergeometry;

		}

		function update( geometry ) {

			var index = geometry.index;
			var geometryAttributes = geometry.attributes;

			if ( index !== null ) {

				attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in geometryAttributes ) {

				attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					attributes.update( array[ i ], gl.ARRAY_BUFFER );

				}

			}

		}

		function getWireframeAttribute( geometry ) {

			var attribute = wireframeAttributes[ geometry.id ];

			if ( attribute ) return attribute;

			var indices = [];

			var geometryIndex = geometry.index;
			var geometryAttributes = geometry.attributes;

			// console.time( 'wireframe' );

			if ( geometryIndex !== null ) {

				var array = geometryIndex.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = geometryAttributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

			attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

			wireframeAttributes[ geometry.id ] = attribute;

			return attribute;

		}

		return {

			get: get,
			update: update,

			getWireframeAttribute: getWireframeAttribute

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function UniformsCache() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
							// TODO (abelnation): set RectAreaLight shadow uniforms
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	function WebGLLights() {

		var cache = new UniformsCache();

		var state = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: []

		};

		var vector3 = new Vector3();
		var matrix4 = new Matrix4();
		var matrix42 = new Matrix4();

		function setup( lights, shadows, camera ) {

			var r = 0, g = 0, b = 0;

			var directionalLength = 0;
			var pointLength = 0;
			var spotLength = 0;
			var rectAreaLength = 0;
			var hemiLength = 0;

			var viewMatrix = camera.matrixWorldInverse;

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				var color = light.color;
				var intensity = light.intensity;
				var distance = light.distance;

				var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isDirectionalLight ) {

					var uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

					}

					state.directionalShadowMap[ directionalLength ] = shadowMap;
					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					state.directional[ directionalLength ] = uniforms;

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

					}

					state.spotShadowMap[ spotLength ] = shadowMap;
					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					state.spot[ spotLength ] = uniforms;

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					var uniforms = cache.get( light );

					// (a) intensity controls irradiance of entire light
					uniforms.color
						.copy( color )
						.multiplyScalar( intensity / ( light.width * light.height ) );

					// (b) intensity controls the radiance per light area
					// uniforms.color.copy( color ).multiplyScalar( intensity );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					// extract local rotation of light to derive width/height half vectors
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );

					// TODO (abelnation): RectAreaLight distance?
					// uniforms.distance = distance;

					state.rectArea[ rectAreaLength ] = uniforms;

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
						uniforms.shadowCameraNear = shadow.camera.near;
						uniforms.shadowCameraFar = shadow.camera.far;

					}

					state.pointShadowMap[ pointLength ] = shadowMap;
					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
					state.point[ pointLength ] = uniforms;

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					var uniforms = cache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					state.hemi[ hemiLength ] = uniforms;

					hemiLength ++;

				}

			}

			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;

			state.directional.length = directionalLength;
			state.spot.length = spotLength;
			state.rectArea.length = rectAreaLength;
			state.point.length = pointLength;
			state.hemi.length = hemiLength;

			// TODO (sam-g-steel) why aren't we using join
			state.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;

		}

		return {
			setup: setup,
			state: state
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( geometries, infoRender ) {

		var updateList = {};

		function update( object ) {

			var frame = infoRender.frame;

			var geometry = object.geometry;
			var buffergeometry = geometries.get( object, geometry );

			// Update once per frame

			if ( updateList[ buffergeometry.id ] !== frame ) {

				if ( geometry.isGeometry ) {

					buffergeometry.updateFromObject( object );

				}

				geometries.update( buffergeometry );

				updateList[ buffergeometry.id ] = frame;

			}

			return buffergeometry;

		}

		function clear() {

			updateList = {};

		}

		return {

			update: update,
			clear: clear

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

		}

		if ( gl.getShaderInfoLog( shader ) !== '' ) {

			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

		}

		// --enable-privileged-webgl-extension
		// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear', '( value )' ];
			case sRGBEncoding:
				return [ 'sRGB', '( value )' ];
			case RGBEEncoding:
				return [ 'RGBE', '( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM', '( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM', '( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD', '( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case Uncharted2ToneMapping:
				toneMappingName = 'Uncharted2';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

	}

	function parseIncludes( string ) {

		var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

		function replace( match, include ) {

			var replace = ShaderChunk[ include ];

			if ( replace === undefined ) {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

			return parseIncludes( replace );

		}

		return string.replace( pattern, replace );

	}

	function unrollLoops( string ) {

		var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

		function replace( match, start, end, snippet ) {

			var unroll = '';

			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

				unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

			}

			return unroll;

		}

		return string.replace( pattern, replace );

	}

	function WebGLProgram( renderer, extensions, code, material, shader, parameters ) {

		var gl = renderer.context;

		var defines = material.defines;

		var vertexShader = shader.vertexShader;
		var fragmentShader = shader.fragmentShader;

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		}

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( material.envMap.mapping ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

			switch ( material.envMap.mapping ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

			switch ( material.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		// console.log( 'building new program ' );

		//

		var customExtensions = generateExtensions( material.extensions, parameters, extensions );

		var customDefines = generateDefines( defines );

		//

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixVertex.length > 0 ) {

				prefixVertex += '\n';

			}

			prefixFragment = [

				customExtensions,
				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixFragment.length > 0 ) {

				prefixFragment += '\n';

			}

		} else {

			prefixVertex = [

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,
				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
				'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

				parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				parameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',

				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

				parameters.dithering ? '#define DITHERING' : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

				parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = parseIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );

		fragmentShader = parseIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );

		if ( ! material.isShaderMaterial ) {

			vertexShader = unrollLoops( vertexShader );
			fragmentShader = unrollLoops( fragmentShader );

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		var programLog = gl.getProgramInfoLog( program );
		var vertexLog = gl.getShaderInfoLog( glVertexShader );
		var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

		var runnable = true;
		var haveDiagnostics = true;

		// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
		// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

			runnable = false;

			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,
				material: material,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function () {

			if ( cachedUniforms === undefined ) {

				cachedUniforms = new WebGLUniforms( gl, program, renderer );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function () {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function () {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		// DEPRECATED

		Object.defineProperties( this, {

			uniforms: {
				get: function () {

					console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
					return this.getUniforms();

				}
			},

			attributes: {
				get: function () {

					console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
					return this.getAttributes();

				}
			}

		} );


		//

		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, extensions, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap", "gradientMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
		];


		function allocateBones( object ) {

			var skeleton = object.skeleton;
			var bones = skeleton.bones;

			if ( capabilities.floatVertexTextures ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = Math.min( nVertexMatrices, bones.length );

				if ( maxBones < bones.length ) {

					console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
					return 0;

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( map.isTexture ) {

				encoding = map.encoding;

			} else if ( map.isWebGLRenderTarget ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
			var precision = capabilities.precision;

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getRenderTarget();

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				gradientMap: !! material.gradientMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: !! fog,
				useFog: material.fog,
				fogExp: ( fog && fog.isFogExp2 ),

				flatShading: material.flatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				dithering: material.dithering,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			array.push( material.onBeforeCompile.toString() );

			array.push( renderer.gammaOutput );

			return array.join();

		};

		this.acquireProgram = function ( material, shader, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, extensions, code, material, shader, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function ( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {

		var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );
		var _videoTextures = {};

		//

		function clampToMaxSize( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = _Math.floorPowerOfTwo( image.width );
				canvas.height = _Math.floorPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function textureNeedsPowerOfTwo( texture ) {

			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

		}

		function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

			return texture.generateMipmaps && isPowerOfTwo &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			if ( texture.isVideoTexture ) {

				delete _videoTextures[ texture.id ];

			}

			infoMemory.textures --;

		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			infoMemory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.remove( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) return;

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget.isWebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.remove( renderTarget.texture );
			properties.remove( renderTarget );

		}

		//



		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = ( texture && texture.isCompressedTexture );
					var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
						isPowerOfTwoImage = isPowerOfTwo( image ),
						glFormat = utils.convert( texture.format ),
						glType = utils.convert( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				if ( texture.isVideoTexture ) {

					_videoTextures[ texture.id ] = texture;

				}

				infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = utils.convert( texture.format ),
				glType = utils.convert( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture.isDepthTexture ) {

				// populate depth texture with dummy data

				var internalFormat = _gl.DEPTH_COMPONENT;

				if ( texture.type === FloatType ) {

					if ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
					internalFormat = _gl.DEPTH_COMPONENT32F;

				} else if ( _isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					internalFormat = _gl.DEPTH_COMPONENT16;

				}

				if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

						texture.type = UnsignedShortType;
						glType = utils.convert( texture.type );

					}

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					internalFormat = _gl.DEPTH_STENCIL;

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedInt248Type ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

						texture.type = UnsignedInt248Type;
						glType = utils.convert( texture.type );

					}

				}

				state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( texture.isDataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( texture.isCompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = utils.convert( renderTarget.texture.format );
			var glType = utils.convert( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

			}

			// upload an empty depth texture with framebuffer size
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {

				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;

			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else {

				throw new Error( 'Unknown depthTexture format' );

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			infoMemory.textures ++;

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

				var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				_gl.generateMipmap( target );
				state.bindTexture( target, null );

			}

		}

		function updateVideoTextures() {

			for ( var id in _videoTextures ) {

				_videoTextures[ id ].update();

			}

		}

		this.setTexture2D = setTexture2D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateVideoTextures = updateVideoTextures;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = {};

		function get( object ) {

			var uuid = object.uuid;
			var map = properties[ uuid ];

			if ( map === undefined ) {

				map = {};
				properties[ uuid ] = map;

			}

			return map;

		}

		function remove( object ) {

			delete properties[ object.uuid ];

		}

		function clear() {

			properties = {};

		}

		return {
			get: get,
			remove: remove,
			clear: clear
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, utils ) {

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4( 0, 0, 0, 0 );

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a, premultipliedAlpha ) {

					if ( premultipliedAlpha === true ) {

						r *= a; g *= a; b *= a;

					}

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( gl.NEVER );
									break;

								case AlwaysDepth:

									gl.depthFunc( gl.ALWAYS );
									break;

								case LessDepth:

									gl.depthFunc( gl.LESS );
									break;

								case LessEqualDepth:

									gl.depthFunc( gl.LEQUAL );
									break;

								case EqualDepth:

									gl.depthFunc( gl.EQUAL );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( gl.GEQUAL );
									break;

								case GreaterDepth:

									gl.depthFunc( gl.GREATER );
									break;

								case NotEqualDepth:

									gl.depthFunc( gl.NOTEQUAL );
									break;

								default:

									gl.depthFunc( gl.LEQUAL );

							}

						} else {

							gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( stencilTest ) {

						enable( gl.STENCIL_TEST );

					} else {

						disable( gl.STENCIL_TEST );

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentProgram = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

		var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
		var lineWidthAvailable = parseFloat( version ) >= 1.0;

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		// init

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( gl.DEPTH_TEST );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( gl.CULL_FACE );

		enable( gl.BLEND );
		setBlending( NormalBlending );

		//

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		}

		function getCompressedTextureFormats() {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		}

		function useProgram( program ) {

			if ( currentProgram !== program ) {

				gl.useProgram( program );

				currentProgram = program;

				return true;

			}

			return false;

		}

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending !== NoBlending ) {

				enable( gl.BLEND );

			} else {

				disable( gl.BLEND );

			}

			if ( blending !== CustomBlending ) {

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					switch ( blending ) {

						case AdditiveBlending:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

							} else {

								gl.blendEquation( gl.FUNC_ADD );
								gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

							}
							break;

						case SubtractiveBlending:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

							} else {

								gl.blendEquation( gl.FUNC_ADD );
								gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

							}
							break;

						case MultiplyBlending:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

							} else {

								gl.blendEquation( gl.FUNC_ADD );
								gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

							}
							break;

						default:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

							} else {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

							}

					}

				}

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			} else {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			}

			currentBlending = blending;
			currentPremultipledAlpha = premultipliedAlpha;

		}

		function setMaterial( material, frontFaceCW ) {

			material.side === DoubleSide
				? disable( gl.CULL_FACE )
				: enable( gl.CULL_FACE );

			var flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) flipSided = ! flipSided;

			setFlipSided( flipSided );

			material.transparent === true
				? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
				: setBlending( NoBlending );

			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );

			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				if ( lineWidthAvailable ) gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function setScissorTest( scissorTest ) {

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentProgram = null;

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,
			getCompressedTextureFormats: getCompressedTextureFormats,

			useProgram: useProgram,

			setBlending: setBlending,
			setMaterial: setMaterial,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		return {

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan(
					_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( this.view !== null && this.view.enabled ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ArrayCamera( array ) {

		PerspectiveCamera.call( this );

		this.cameras = array || [];

	}

	ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

		constructor: ArrayCamera,

		isArrayCamera: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebVRManager( renderer ) {

		var scope = this;

		var device = null;
		var frameData = null;

		var poseTarget = null;

		if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

			frameData = new window.VRFrameData();

		}

		var matrixWorldInverse = new Matrix4();

		var cameraL = new PerspectiveCamera();
		cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
		cameraL.layers.enable( 1 );

		var cameraR = new PerspectiveCamera();
		cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
		cameraR.layers.enable( 2 );

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		var currentSize, currentPixelRatio;

		function onVRDisplayPresentChange() {

			if ( device !== null && device.isPresenting ) {

				var eyeParameters = device.getEyeParameters( 'left' );
				var renderWidth = eyeParameters.renderWidth;
				var renderHeight = eyeParameters.renderHeight;

				currentPixelRatio = renderer.getPixelRatio();
				currentSize = renderer.getSize();

				renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

			} else if ( scope.enabled ) {

				renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

			}

		}

		if ( typeof window !== 'undefined' ) {

			window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

		}

		//

		this.enabled = false;

		this.getDevice = function () {

			return device;

		};

		this.setDevice = function ( value ) {

			if ( value !== undefined ) device = value;

		};

		this.setPoseTarget = function ( object ) {

			if ( object !== undefined ) poseTarget = object;

		};

		this.getCamera = function ( camera ) {

			if ( device === null ) return camera;

			device.depthNear = camera.near;
			device.depthFar = camera.far;

			device.getFrameData( frameData );

			//

			var pose = frameData.pose;
			var poseObject = poseTarget !== null ? poseTarget : camera;

			if ( pose.position !== null ) {

				poseObject.position.fromArray( pose.position );

			} else {

				poseObject.position.set( 0, 0, 0 );

			}

			if ( pose.orientation !== null ) {

				poseObject.quaternion.fromArray( pose.orientation );

			}

			poseObject.updateMatrixWorld();

			if ( device.isPresenting === false ) return camera;

			//

			cameraL.near = camera.near;
			cameraR.near = camera.near;

			cameraL.far = camera.far;
			cameraR.far = camera.far;

			cameraVR.matrixWorld.copy( camera.matrixWorld );
			cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

			cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
			cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

			var parent = poseObject.parent;

			if ( parent !== null ) {

				matrixWorldInverse.getInverse( parent.matrixWorld );

				cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
				cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

			}

			// envMap and Mirror needs camera.matrixWorld

			cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
			cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

			cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
			cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

			// HACK @mrdoob
			// https://github.com/w3c/webvr/issues/203

			cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

			//

			var layers = device.getLayers();

			if ( layers.length ) {

				var layer = layers[ 0 ];

				if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

					cameraL.bounds.fromArray( layer.leftBounds );

				}

				if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

					cameraR.bounds.fromArray( layer.rightBounds );

				}

			}

			return cameraVR;

		};

		this.submitFrame = function () {

			if ( device && device.isPresenting ) device.submitFrame();

		};

		this.dispose = function () {

			if ( typeof window !== 'undefined' ) {

				window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					case 'WEBGL_compressed_texture_etc1':
						extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function ( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function () {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function () {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

				// there's no local clipping

				if ( renderingShadows ) {

					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();

				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;

			return dstArray;

		}

	}

	/**
	 * @author thespite / http://www.twitter.com/thespite
	 */

	function WebGLUtils( gl, extensions ) {

		function convert( p ) {

			var extension;

			if ( p === RepeatWrapping ) return gl.REPEAT;
			if ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;
			if ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;

			if ( p === NearestFilter ) return gl.NEAREST;
			if ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;
			if ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;

			if ( p === LinearFilter ) return gl.LINEAR;
			if ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;
			if ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;

			if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;

			if ( p === ByteType ) return gl.BYTE;
			if ( p === ShortType ) return gl.SHORT;
			if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
			if ( p === IntType ) return gl.INT;
			if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
			if ( p === FloatType ) return gl.FLOAT;

			if ( p === HalfFloatType ) {

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) return extension.HALF_FLOAT_OES;

			}

			if ( p === AlphaFormat ) return gl.ALPHA;
			if ( p === RGBFormat ) return gl.RGB;
			if ( p === RGBAFormat ) return gl.RGBA;
			if ( p === LuminanceFormat ) return gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

			if ( p === AddEquation ) return gl.FUNC_ADD;
			if ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;
			if ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;

			if ( p === ZeroFactor ) return gl.ZERO;
			if ( p === OneFactor ) return gl.ONE;
			if ( p === SrcColorFactor ) return gl.SRC_COLOR;
			if ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;
			if ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;
			if ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;
			if ( p === DstAlphaFactor ) return gl.DST_ALPHA;
			if ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;

			if ( p === DstColorFactor ) return gl.DST_COLOR;
			if ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;
			if ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			if ( p === MinEquation || p === MaxEquation ) {

				extension = extensions.get( 'EXT_blend_minmax' );

				if ( extension !== null ) {

					if ( p === MinEquation ) return extension.MIN_EXT;
					if ( p === MaxEquation ) return extension.MAX_EXT;

				}

			}

			if ( p === UnsignedInt248Type ) {

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

			}

			return 0;

		}

		return { convert: convert };

	}

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		console.log( 'THREE.WebGLRenderer', REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,

			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
			_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';

		var lightsArray = [];
		var shadowsArray = [];

		var currentRenderList = null;

		var spritesArray = [];
		var flaresArray = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

			_isContextLost = false,

			// internal state cache

			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,
			_currentGeometryProgram = '',

			_currentCamera = null,
			_currentArrayCamera = null,

			_currentViewport = new Vector4(),
			_currentScissor = new Vector4(),
			_currentScissorTest = null,

			//

			_usedTextureUnits = 0,

			//

			_width = _canvas.width,
			_height = _canvas.height,

			_pixelRatio = 1,

			_viewport = new Vector4( 0, 0, _width, _height ),
			_scissor = new Vector4( 0, 0, _width, _height ),
			_scissorTest = false,

			// frustum

			_frustum = new Frustum(),

			// clipping

			_clipping = new WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,

			// camera matrices cache

			_projScreenMatrix = new Matrix4(),

			_vector3 = new Vector3(),

			// info

			_infoMemory = {
				geometries: 0,
				textures: 0
			},

			_infoRender = {

				frame: 0,
				calls: 0,
				vertices: 0,
				faces: 0,
				points: 0

			};

		this.info = {

			render: _infoRender,
			memory: _infoMemory,
			programs: null

		};

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		// initialize

		var _gl;

		try {

			var contextAttributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference
			};

			// event listeners must be registered before WebGL context is created, see #12753

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

			_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw new Error( 'Error creating WebGL context with your selected attributes.' );

				} else {

					throw new Error( 'Error creating WebGL context.' );

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error.message );

		}

		var extensions, capabilities, state;
		var properties, textures, attributes, geometries, objects, lights;
		var programCache, renderLists;

		var background, morphtargets, bufferRenderer, indexedBufferRenderer;
		var flareRenderer, spriteRenderer;

		var utils;

		function initGLContext() {

			extensions = new WebGLExtensions( _gl );
			extensions.get( 'WEBGL_depth_texture' );
			extensions.get( 'OES_texture_float' );
			extensions.get( 'OES_texture_float_linear' );
			extensions.get( 'OES_texture_half_float' );
			extensions.get( 'OES_texture_half_float_linear' );
			extensions.get( 'OES_standard_derivatives' );
			extensions.get( 'OES_element_index_uint' );
			extensions.get( 'ANGLE_instanced_arrays' );

			utils = new WebGLUtils( _gl, extensions );

			capabilities = new WebGLCapabilities( _gl, extensions, parameters );

			state = new WebGLState( _gl, extensions, utils );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			properties = new WebGLProperties();
			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );
			attributes = new WebGLAttributes( _gl );
			geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
			objects = new WebGLObjects( geometries, _infoRender );
			morphtargets = new WebGLMorphtargets( _gl );
			programCache = new WebGLPrograms( _this, extensions, capabilities );
			lights = new WebGLLights();
			renderLists = new WebGLRenderLists();

			background = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );

			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

			flareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );
			spriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );

			_this.info.programs = programCache.programs;

			_this.context = _gl;
			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.state = state;

		}

		initGLContext();

		// vr

		var vr = new WebVRManager( _this );

		this.vr = vr;

		// shadow map

		var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

		this.shadowMap = shadowMap;

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.loseContext();

		};

		this.forceContextRestore = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.restoreContext();

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _width, _height, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			var device = vr.getDevice();

			if ( device && device.isPresenting ) {

				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
				return;

			}

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.getDrawingBufferSize = function () {

			return {
				width: _width * _pixelRatio,
				height: _height * _pixelRatio
			};

		};

		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

			_width = width;
			_height = height;

			_pixelRatio = pixelRatio;

			_canvas.width = width * pixelRatio;
			_canvas.height = height * pixelRatio;

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			_viewport.set( x, _height - y - height, width, height );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			_scissor.set( x, _height - y - height, width, height );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return background.getClearColor();

		};

		this.setClearColor = function () {

			background.setClearColor.apply( background, arguments );

		};

		this.getClearAlpha = function () {

			return background.getClearAlpha();

		};

		this.setClearAlpha = function () {

			background.setClearAlpha.apply( background, arguments );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		//

		this.dispose = function () {

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

			renderLists.dispose();

			vr.dispose();

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			console.log( 'THREE.WebGLRenderer: Context Lost.' );

			_isContextLost = true;

		}

		function onContextRestore( /* event */ ) {

			console.log( 'THREE.WebGLRenderer: Context Restored.' );

			_isContextLost = false;

			initGLContext();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.remove( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		function renderObjectImmediate( object, program, material ) {

			object.render( function ( object ) {

				_this.renderBufferImmediate( object, program, material );

			} );

		}

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var programAttributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.position );
				_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( ! material.isMeshPhongMaterial &&
					! material.isMeshStandardMaterial &&
					! material.isMeshNormalMaterial &&
					material.flatShading === true ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.normal );

				_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.uv );

				_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.color );

				_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

			state.setMaterial( material, frontFaceCW );

			var program = setProgram( camera, fog, material, object );
			var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

			var updateBuffers = false;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			if ( object.morphTargetInfluences ) {

				morphtargets.update( object, geometry, material, program );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;
			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = geometries.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var attribute;
			var renderer = bufferRenderer;

			if ( index !== null ) {

				attribute = attributes.get( index );

				renderer = indexedBufferRenderer;
				renderer.setIndex( attribute );

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

				}

			}

			//

			var dataCount = 0;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) return;

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( _gl.LINES );

				} else if ( object.isLineLoop ) {

					renderer.setMode( _gl.LINE_LOOP );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				if ( geometry.maxInstancedCount > 0 ) {

					renderer.renderInstances( geometry, drawStart, drawCount );

				}

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var normalized = geometryAttribute.normalized;
						var size = geometryAttribute.itemSize;

						var attribute = attributes.get( geometryAttribute );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) continue;

						var buffer = attribute.buffer;
						var type = attribute.type;
						var bytesPerElement = attribute.bytesPerElement;

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Compile

		this.compile = function ( scene, camera ) {

			lightsArray.length = 0;
			shadowsArray.length = 0;

			scene.traverse( function ( object ) {

				if ( object.isLight ) {

					lightsArray.push( object );

					if ( object.castShadow ) {

						shadowsArray.push( object );

					}

				}

			} );

			lights.setup( lightsArray, shadowsArray, camera );

			scene.traverse( function ( object ) {

				if ( object.material ) {

					if ( Array.isArray( object.material ) ) {

						for ( var i = 0; i < object.material.length; i ++ ) {

							initMaterial( object.material[ i ], scene.fog, object );

						}

					} else {

						initMaterial( object.material, scene.fog, object );

					}

				}

			} );

		};

		// Animation Loop

		var isAnimating = false;
		var onAnimationFrame = null;

		function start() {

			if ( isAnimating ) return;

			var device = vr.getDevice();

			if ( device && device.isPresenting ) {

				device.requestAnimationFrame( loop );

			} else {

				window.requestAnimationFrame( loop );

			}

			isAnimating = true;

		}

		function loop( time ) {

			if ( onAnimationFrame !== null ) onAnimationFrame( time );

			var device = vr.getDevice();

			if ( device && device.isPresenting ) {

				device.requestAnimationFrame( loop );

			} else {

				window.requestAnimationFrame( loop );

			}

		}

		this.animate = function ( callback ) {

			onAnimationFrame = callback;
			start();

		};

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( ! ( camera && camera.isCamera ) ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			if ( _isContextLost ) return;

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			if ( vr.enabled ) {

				camera = vr.getCamera( camera );

			}

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lightsArray.length = 0;
			shadowsArray.length = 0;

			spritesArray.length = 0;
			flaresArray.length = 0;

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			currentRenderList = renderLists.get( scene, camera );
			currentRenderList.init();

			projectObject( scene, camera, _this.sortObjects );

			if ( _this.sortObjects === true ) {

				currentRenderList.sort();

			}

			//

			textures.updateVideoTextures();

			//

			if ( _clippingEnabled ) _clipping.beginShadows();

			shadowMap.render( shadowsArray, scene, camera );

			lights.setup( lightsArray, shadowsArray, camera );

			if ( _clippingEnabled ) _clipping.endShadows();

			//

			_infoRender.frame ++;
			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			//

			background.render( currentRenderList, scene, camera, forceClear );

			// render scene

			var opaqueObjects = currentRenderList.opaque;
			var transparentObjects = currentRenderList.transparent;

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
				if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

				// transparent pass (back-to-front order)

				if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

			}

			// custom renderers

			spriteRenderer.render( spritesArray, scene, camera );
			flareRenderer.render( flaresArray, scene, camera, _currentViewport );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				textures.updateRenderTargetMipmap( renderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest( true );
			state.buffers.depth.setMask( true );
			state.buffers.color.setMask( true );

			state.setPolygonOffset( false );

			if ( vr.enabled ) {

				vr.submitFrame();

			}

			// _gl.finish();

		};

		/*
		// TODO Duplicated code (Frustum)

		var _sphere = new Sphere();

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
			applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}
		*/

		function projectObject( object, camera, sortObjects ) {

			if ( object.visible === false ) return;

			var visible = object.layers.test( camera.layers );

			if ( visible ) {

				if ( object.isLight ) {

					lightsArray.push( object );

					if ( object.castShadow ) {

						shadowsArray.push( object );

					}

				} else if ( object.isSprite ) {

					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

						spritesArray.push( object );

					}

				} else if ( object.isLensFlare ) {

					flaresArray.push( object );

				} else if ( object.isImmediateRenderObject ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					currentRenderList.push( object, null, object.material, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						object.skeleton.update();

					}

					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						if ( Array.isArray( material ) ) {

							var groups = geometry.groups;

							for ( var i = 0, l = groups.length; i < l; i ++ ) {

								var group = groups[ i ];
								var groupMaterial = material[ group.materialIndex ];

								if ( groupMaterial && groupMaterial.visible ) {

									currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

								}

							}

						} else if ( material.visible ) {

							currentRenderList.push( object, geometry, material, _vector3.z, null );

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, sortObjects );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				if ( camera.isArrayCamera ) {

					_currentArrayCamera = camera;

					var cameras = camera.cameras;

					for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

						var camera2 = cameras[ j ];

						if ( object.layers.test( camera2.layers ) ) {

							var bounds = camera2.bounds;

							var x = bounds.x * _width;
							var y = bounds.y * _height;
							var width = bounds.z * _width;
							var height = bounds.w * _height;

							state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );

							renderObject( object, scene, camera2, geometry, material, group );

						}

					}

				} else {

					_currentArrayCamera = null;

					renderObject( object, scene, camera, geometry, material, group );

				}

			}

		}

		function renderObject( object, scene, camera, geometry, material, group ) {

			object.onBeforeRender( _this, scene, camera, geometry, material, group );

			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

			if ( object.isImmediateRenderObject ) {

				var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

				state.setMaterial( material, frontFaceCW );

				var program = setProgram( camera, scene.fog, material, object );

				_currentGeometryProgram = '';

				renderObjectImmediate( object, program, material );

			} else {

				_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

			}

			object.onAfterRender( _this, scene, camera, geometry, material, group );

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters(
				material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.shader = {
						name: material.type,
						uniforms: UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.shader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.onBeforeCompile( materialProperties.shader );

				program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var programAttributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.shader.uniforms;

			if ( ! material.isShaderMaterial &&
				! material.isRawShaderMaterial ||
				material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.lightsHash = lights.state.hash;

			if ( material.lights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.pointLights.value = lights.state.point;
				uniforms.hemisphereLights.value = lights.state.hemi;

				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
				// TODO (abelnation): add area lights shadow info to uniforms

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
					WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
						camera === _currentCamera &&
						material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
						material.clippingPlanes, material.clipIntersection, material.clipShadows,
						camera, materialProperties, useCache );

				}

			}

			if ( material.needsUpdate === false ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
					materialProperties.numIntersection !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.shader.uniforms;

			if ( state.useProgram( program.program ) ) {

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}

				// Avoid unneeded uniform updates per ArrayCamera's sub-camera

				if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

					_currentCamera = ( _currentArrayCamera || camera );

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
					material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial ||
					material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
							_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ||
					material.skinning ) {

					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				}

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					var bones = skeleton.bones;

					if ( capabilities.floatVertexTextures ) {

						if ( skeleton.boneTexture === undefined ) {

							// layout (1 matrix = 4 pixels)
							//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
							//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
							//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
							//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
							//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


							var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
							size = _Math.ceilPowerOfTwo( size );
							size = Math.max( size, 4 );

							var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
							boneMatrices.set( skeleton.boneMatrices ); // copy current values

							var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

							skeleton.boneMatrices = boneMatrices;
							skeleton.boneTexture = boneTexture;
							skeleton.boneTextureSize = size;

						}

						p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
						p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial ) {

				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
				p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

				if ( material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshToonMaterial ) {

						refreshUniformsToon( m_uniforms, material );

					} else {

						refreshUniformsPhong( m_uniforms, material );

					}

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshPhysicalMaterial ) {

						refreshUniformsPhysical( m_uniforms, material );

					} else {

						refreshUniformsStandard( m_uniforms, material );

					}

				} else if ( material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDepth( m_uniforms, material );

				} else if ( material.isMeshDistanceMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDistance( m_uniforms, material );

				} else if ( material.isMeshNormalMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsNormal( m_uniforms, material );

				} else if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

					if ( material.isLineDashedMaterial ) {

						refreshUniformsDash( m_uniforms, material );

					}

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isShadowMaterial ) {

					m_uniforms.color.value = material.color;
					m_uniforms.opacity.value = material.opacity;

				}

				// RectAreaLight Texture
				// TODO (mrdoob): Find a nicer implementation

				if ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;
				if ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;

				WebGLUniforms.upload(
					_gl, materialProperties.uniformsList, m_uniforms, _this );

			}


			// common matrices

			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			if ( material.color ) {

				uniforms.diffuse.value = material.color;

			}

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			if ( material.specularMap ) {

				uniforms.specularMap.value = material.specularMap;

			}

			if ( material.envMap ) {

				uniforms.envMap.value = material.envMap;

				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					var offset = uvScaleMap.offset;
					var repeat = uvScaleMap.repeat;
					var rotation = uvScaleMap.rotation;
					var center = uvScaleMap.center;

					uvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				if ( material.map.matrixAutoUpdate === true ) {

					var offset = material.map.offset;
					var repeat = material.map.repeat;
					var rotation = material.map.rotation;
					var center = material.map.center;

					material.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );

				}

				uniforms.uvTransform.value.copy( material.map.matrix );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsToon( uniforms, material ) {

			refreshUniformsPhong( uniforms, material );

			if ( material.gradientMap ) {

				uniforms.gradientMap.value = material.gradientMap;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

			refreshUniformsStandard( uniforms, material );

		}

		function refreshUniformsDepth( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsDistance( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			uniforms.referencePosition.value.copy( material.referencePosition );
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;

		}

		function refreshUniformsNormal( uniforms, material ) {

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			state.setCullFace( cullFace );
			state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

		};

		// Textures

		function allocTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		this.allocTextureUnit = allocTextureUnit;

		// this.setTexture2D = setTexture2D;
		this.setTexture2D = ( function () {

			var warned = false;

			// backwards compatibility: peel texture.texture
			return function setTexture2D( texture, slot ) {

				if ( texture && texture.isWebGLRenderTarget ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTexture = ( function () {

			var warned = false;

			return function setTexture( texture, slot ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
					warned = true;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTextureCube = ( function () {

			var warned = false;

			return function setTextureCube( texture, slot ) {

				// backwards compatibility: peel texture.texture
				if ( texture && texture.isWebGLRenderTargetCube ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( ( texture && texture.isCubeTexture ) ||
					( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

					// CompressedTexture can have Array in image :/

					// this function alone should take care of cube textures
					textures.setTextureCube( texture, slot );

				} else {

					// assumed: texture property of THREE.WebGLRenderTargetCube

					textures.setTextureCubeDynamic( texture, slot );

				}

			};

		}() );

		this.getRenderTarget = function () {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var framebuffer = null;
			var isCube = false;

			if ( renderTarget ) {

				var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLRenderTargetCube ) {

					framebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];
					isCube = true;

				} else {

					framebuffer = __webglFramebuffer;

				}

				_currentViewport.copy( renderTarget.viewport );
				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

			} else {

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.viewport( _currentViewport );
			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
						! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	FogExp2.prototype.isFogExp2 = true;

	FogExp2.prototype.clone = function () {

		return new FogExp2( this.color.getHex(), this.density );

	};

	FogExp2.prototype.toJSON = function ( /* meta */ ) {

		return {
			type: 'FogExp2',
			color: this.color.getHex(),
			density: this.density
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Fog.prototype.isFog = true;

	Fog.prototype.clone = function () {

		return new Fog( this.color.getHex(), this.near, this.far );

	};

	Fog.prototype.toJSON = function ( /* meta */ ) {

		return {
			type: 'Fog',
			color: this.color.getHex(),
			near: this.near,
			far: this.far
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene() {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	}

	Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Scene,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();
			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
			if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

			return data;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlare( texture, size, distance, blending, color ) {

		Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	}

	LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LensFlare,

		isLensFlare: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.positionScreen.copy( source.positionScreen );
			this.customUpdateCallback = source.customUpdateCallback;

			for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

				this.lensFlares.push( source.lensFlares[ i ] );

			}

			return this;

		},

		add: function ( texture, size, distance, blending, color, opacity ) {

			if ( size === undefined ) size = - 1;
			if ( distance === undefined ) distance = 0;
			if ( opacity === undefined ) opacity = 1;
			if ( color === undefined ) color = new Color( 0xffffff );
			if ( blending === undefined ) blending = NormalBlending;

			distance = Math.min( distance, Math.max( 0, distance ) );

			this.lensFlares.push( {
				texture: texture,	// THREE.Texture
				size: size, 		// size in pixels (-1 = use texture.width)
				distance: distance, 	// distance (0-1) from light source (0=at light source)
				x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
				scale: 1, 		// scale
				rotation: 0, 		// rotation
				opacity: opacity,	// opacity
				color: color,		// color
				blending: blending	// blending
			} );

		},

		/*
		 * Update lens flares update positions on all flares based on the screen position
		 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
		 */

		updateLensFlares: function () {

			var f, fl = this.lensFlares.length;
			var flare;
			var vecX = - this.positionScreen.x * 2;
			var vecY = - this.positionScreen.y * 2;

			for ( f = 0; f < fl; f ++ ) {

				flare = this.lensFlares[ f ];

				flare.x = this.positionScreen.x + vecX * flare.distance;
				flare.y = this.positionScreen.y + vecY * flare.distance;

				flare.wantedRotation = flare.x * Math.PI * 0.25;
				flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2()
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;
	SpriteMaterial.prototype.isSpriteMaterial = true;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: ( function () {

			var intersectPoint = new Vector3();
			var worldPosition = new Vector3();
			var worldScale = new Vector3();

			return function raycast( raycaster, intersects ) {

				worldPosition.setFromMatrixPosition( this.matrixWorld );
				raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );

				worldScale.setFromMatrixScale( this.matrixWorld );
				var guessSizeSq = worldScale.x * worldScale.y / 4;

				if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;

				var distance = raycaster.ray.origin.distanceTo( intersectPoint );

				if ( distance < raycaster.near || distance > raycaster.far ) return;

				intersects.push( {

					distance: distance,
					point: intersectPoint.clone(),
					face: null,
					object: this

				} );

			};

		}() ),

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

	}

	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) distance = 0;

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			for ( var i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		},

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( matrixPosition );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			};

		}() ),

		update: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function update( camera ) {

				var levels = this.levels;

				if ( levels.length > 1 ) {

					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );

					var distance = v1.distanceTo( v2 );

					levels[ 0 ].object.visible = true;

					for ( var i = 1, l = levels.length; i < l; i ++ ) {

						if ( distance >= levels[ i ].distance ) {

							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;

						} else {

							break;

						}

					}

					for ( ; i < l; i ++ ) {

						levels[ i ].object.visible = false;

					}

				}

			};

		}(),

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	function Skeleton( bones, boneInverses ) {

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );
		this.boneMatrices = new Float32Array( this.bones.length * 16 );

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ i ] ) {

					inverse.getInverse( this.bones[ i ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone, i, il;

			// recover the bind-time world matrices

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ i ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					if ( bone.parent && bone.parent.isBone ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: ( function () {

			var offsetMatrix = new Matrix4();
			var identityMatrix = new Matrix4();

			return function update() {

				var bones = this.bones;
				var boneInverses = this.boneInverses;
				var boneMatrices = this.boneMatrices;
				var boneTexture = this.boneTexture;

				// flatten bone matrices to array

				for ( var i = 0, il = bones.length; i < il; i ++ ) {

					// compute the offset between the current and the original transform

					var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

					offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
					offsetMatrix.toArray( boneMatrices, i * 16 );

				}

				if ( boneTexture !== undefined ) {

					boneTexture.needsUpdate = true;

				}

			};

		} )(),

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone() {

		Object3D.call( this );

		this.type = 'Bone';

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material ) {

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = 'attached';
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

		var bones = this.initBones();
		var skeleton = new Skeleton( bones );

		this.bind( skeleton, this.matrixWorld );

		this.normalizeSkinWeights();

	}

	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		initBones: function () {

			var bones = [], bone, gbone;
			var i, il;

			if ( this.geometry && this.geometry.bones !== undefined ) {

				// first, create array of 'Bone' objects from geometry data

				for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

					gbone = this.geometry.bones[ i ];

					// create new 'Bone' object

					bone = new Bone();
					bones.push( bone );

					// apply values

					bone.name = gbone.name;
					bone.position.fromArray( gbone.pos );
					bone.quaternion.fromArray( gbone.rotq );
					if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

				}

				// second, create bone hierarchy

				for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

					gbone = this.geometry.bones[ i ];

					if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

						// subsequent bones in the hierarchy

						bones[ gbone.parent ].add( bones[ i ] );

					} else {

						// topmost bone, immediate child of the skinned mesh

						this.add( bones[ i ] );

					}

				}

			}

			// now the bones are part of the scene graph and children of the skinned mesh.
			// let's update the corresponding matrices

			this.updateMatrixWorld( true );

			return bones;

		},

		bind: function ( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			var scale, i;

			if ( this.geometry && this.geometry.isGeometry ) {

				for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

					var sw = this.geometry.skinWeights[ i ];

					scale = 1.0 / sw.manhattanLength();

					if ( scale !== Infinity ) {

						sw.multiplyScalar( scale );

					} else {

						sw.set( 1, 0, 0, 0 ); // do something reasonable

					}

				}

			} else if ( this.geometry && this.geometry.isBufferGeometry ) {

				var vec = new Vector4();

				var skinWeight = this.geometry.attributes.skinWeight;

				for ( i = 0; i < skinWeight.count; i ++ ) {

					vec.x = skinWeight.getX( i );
					vec.y = skinWeight.getY( i );
					vec.z = skinWeight.getZ( i );
					vec.w = skinWeight.getW( i );

					scale = 1.0 / vec.manhattanLength();

					if ( scale !== Infinity ) {

						vec.multiplyScalar( scale );

					} else {

						vec.set( 1, 0, 0, 0 ); // do something reasonable

					}

					skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

				}

			}

		},

		updateMatrixWorld: function ( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, force );

			if ( this.bindMode === 'attached' ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === 'detached' ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.lights = false;

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new LineSegments( geometry, material );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var precision = raycaster.linePrecision;
				var precisionSq = precision * precision;

				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = ( this && this.isLineSegments ) ? 2 : 1;

				if ( geometry.isBufferGeometry ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

							var a = indices[ i ];
							var b = indices[ i + 1 ];

							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					} else {

						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				} else if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;
					var nbVertices = vertices.length;

					for ( var i = 0; i < nbVertices - 1; i += step ) {

						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true

	} );

	/**
	 * @author mgreter / http://github.com/mgreter
	 */

	function LineLoop( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineLoop';

	}

	LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineLoop,

		isLineLoop: true,

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.lights = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );
				sphere.radius += threshold;

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new Vector3();

				function testPoint( point, index ) {

					var rayPointDistanceSq = ray.distanceSqToPoint( point );

					if ( rayPointDistanceSq < localThresholdSq ) {

						var intersectPoint = ray.closestPointToPoint( point );
						intersectPoint.applyMatrix4( matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectPoint );

						if ( distance < raycaster.near || distance > raycaster.far ) return;

						intersects.push( {

							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object

						} );

					}

				}

				if ( geometry.isBufferGeometry ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, il = indices.length; i < il; i ++ ) {

							var a = indices[ i ];

							position.fromArray( positions, a * 3 );

							testPoint( position, a );

						}

					} else {

						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

							position.fromArray( positions, i * 3 );

							testPoint( position, i );

						}

					}

				} else {

					var vertices = geometry.vertices;

					for ( var i = 0, l = vertices.length; i < l; i ++ ) {

						testPoint( vertices[ i ], i );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group,

		isGroup: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		// Set needsUpdate when first frame is ready

		var scope = this;

		function onLoaded() {

			video.removeEventListener( 'loadeddata', onLoaded, false );
			scope.needsUpdate = true;

		}

		video.addEventListener( 'loadeddata', onLoaded, false );

	}

	VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

		constructor: VideoTexture,

		isVideoTexture: true,

		update: function () {

			var video = this.image;

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				this.needsUpdate = true;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

		}

		if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		this.type = 'WireframeGeometry';

		// buffer

		var vertices = [];

		// helper variables

		var i, j, l, o, ol;
		var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];
		var vertex;

		// different logic for Geometry and BufferGeometry

		if ( geometry && geometry.isGeometry ) {

			// create a data structure that contains all edges without duplicates

			var faces = geometry.faces;

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( j = 0; j < 3; j ++ ) {

					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
					edge[ 1 ] = Math.max( edge1, edge2 );

					key = edge[ 0 ] + ',' + edge[ 1 ];

					if ( edges[ key ] === undefined ) {

						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex = geometry.vertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = geometry.vertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else if ( geometry && geometry.isBufferGeometry ) {

			var position, indices, groups;
			var group, start, count;
			var index1, index2;

			vertex = new Vector3();

			if ( geometry.index !== null ) {

				// indexed BufferGeometry

				position = geometry.attributes.position;
				indices = geometry.index;
				groups = geometry.groups;

				if ( groups.length === 0 ) {

					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

				}

				// create a data structure that contains all eges without duplicates

				for ( o = 0, ol = groups.length; o < ol; ++ o ) {

					group = groups[ o ];

					start = group.start;
					count = group.count;

					for ( i = start, l = ( start + count ); i < l; i += 3 ) {

						for ( j = 0; j < 3; j ++ ) {

							edge1 = indices.getX( i + j );
							edge2 = indices.getX( i + ( j + 1 ) % 3 );
							edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
							edge[ 1 ] = Math.max( edge1, edge2 );

							key = edge[ 0 ] + ',' + edge[ 1 ];

							if ( edges[ key ] === undefined ) {

								edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

							}

						}

					}

				}

				// generate vertices

				for ( key in edges ) {

					e = edges[ key ];

					vertex.fromBufferAttribute( position, e.index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					vertex.fromBufferAttribute( position, e.index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			} else {

				// non-indexed BufferGeometry

				position = geometry.attributes.position;

				for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

					for ( j = 0; j < 3; j ++ ) {

						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

						index1 = 3 * i + j;
						vertex.fromBufferAttribute( position, index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );

						index2 = 3 * i + ( ( j + 1 ) % 3 );
						vertex.fromBufferAttribute( position, index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );

					}

				}

			}

		}

		// build geometry

		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	// ParametricGeometry

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	// ParametricBufferGeometry

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		var EPS = 0.00001;

		var normal = new Vector3();

		var p0 = new Vector3(), p1 = new Vector3();
		var pu = new Vector3(), pv = new Vector3();

		var i, j;

		// generate vertices, normals and uvs

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			var v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				var u = j / slices;

				// vertex

				p0 = func( u, v, p0 );
				vertices.push( p0.x, p0.y, p0.z );

				// normal

				// approximate tangent vectors via finite differences

				if ( u - EPS >= 0 ) {

					p1 = func( u - EPS, v, p1 );
					pu.subVectors( p0, p1 );

				} else {

					p1 = func( u + EPS, v, p1 );
					pu.subVectors( p1, p0 );

				}

				if ( v - EPS >= 0 ) {

					p1 = func( u, v - EPS, p1 );
					pv.subVectors( p0, p1 );

				} else {

					p1 = func( u, v + EPS, p1 );
					pv.subVectors( p1, p0 );

				}

				// cross product of tangent vectors returns surface normal

				normal.crossVectors( pu, pv ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, v );

			}

		}

		// generate indices

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				var a = i * sliceCount + j;
				var b = i * sliceCount + j + 1;
				var c = ( i + 1 ) * sliceCount + j + 1;
				var d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PolyhedronGeometry

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	// PolyhedronBufferGeometry

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		appplyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

		if ( detail === 0 ) {

			this.computeVertexNormals(); // flat normals

		} else {

			this.normalizeNormals(); // smooth normals

		}

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function appplyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] = uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TetrahedronGeometry

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	// TetrahedronBufferGeometry

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
		];

		var indices = [
			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// OctahedronGeometry

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	// OctahedronBufferGeometry

	function OctahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
		];

		var indices = [
			0, 2, 4,	0, 4, 3,	0, 3, 5,
			0, 5, 2,	1, 2, 5,	1, 5, 3,
			1, 3, 4,	1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// IcosahedronGeometry

	function IcosahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	// IcosahedronBufferGeometry

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
			 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
			 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
		];

		var indices = [
			 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
			 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
			 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
			 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// DodecahedronGeometry

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	// DodecahedronBufferGeometry

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,	- 1, - 1, 1,
			- 1, 1, - 1, - 1, 1, 1,
			1, - 1, - 1, 1, - 1, 1,
			1, 1, - 1, 1, 1, 1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t, 0, - r, t,
			 0, r, - t, 0, r, t,

			// (±1/φ, ±φ, 0)
			- r, - t, 0, - r, t, 0,
			 r, - t, 0, r, t, 0,

			// (±φ, 0, ±1/φ)
			- t, 0, - r, t, 0, - r,
			- t, 0, r, t, 0, r
		];

		var indices = [
			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
			1, 12, 14, 	1, 14, 5, 	1, 5, 9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 */

	// TubeGeometry

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	// TubeBufferGeometry

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();
		var P = new Vector3();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			P = path.getPointAt( i / tubularSegments, P );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin = Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * based on http://www.blackpawn.com/texts/pqtorus/
	 */

	// TorusKnotGeometry

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	// TorusKnotBufferGeometry

	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 1;
		tube = tube || 0.4;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, j;

		var vertex = new Vector3();
		var normal = new Vector3();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

				normal.subVectors( vertex, P1 ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TorusGeometry

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
		this.mergeVertices();

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	// TorusBufferGeometry

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 1;
		tube = tube || 0.4;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex

				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
				normal.subVectors( vertex, center ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices

				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.2)
	 */

	var Earcut = {

		triangulate: function ( data, holeIndices, dim ) {

			dim = dim || 2;

			var hasHoles = holeIndices && holeIndices.length,
				outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
				outerNode = linkedList( data, 0, outerLen, dim, true ),
				triangles = [];

			if ( ! outerNode ) return triangles;

			var minX, minY, maxX, maxY, x, y, invSize;

			if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

			// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

			if ( data.length > 80 * dim ) {

				minX = maxX = data[ 0 ];
				minY = maxY = data[ 1 ];

				for ( var i = dim; i < outerLen; i += dim ) {

					x = data[ i ];
					y = data[ i + 1 ];
					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;

				}

				// minX, minY and invSize are later used to transform coords into integers for z-order calculation

				invSize = Math.max( maxX - minX, maxY - minY );
				invSize = invSize !== 0 ? 1 / invSize : 0;

			}

			earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

			return triangles;

		}

	};

	// create a circular doubly linked list from polygon points in the specified winding order

	function linkedList( data, start, end, dim, clockwise ) {

		var i, last;

		if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

			for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

		} else {

			for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

		}

		if ( last && equals( last, last.next ) ) {

			removeNode( last );
			last = last.next;

		}

		return last;

	}

	// eliminate colinear or duplicate points

	function filterPoints( start, end ) {

		if ( ! start ) return start;
		if ( ! end ) end = start;

		var p = start, again;

		do {

			again = false;

			if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

				removeNode( p );
				p = end = p.prev;
				if ( p === p.next ) break;
				again = true;

			} else {

				p = p.next;

			}

		} while ( again || p !== end );

		return end;

	}

	// main ear slicing loop which triangulates a polygon (given as a linked list)

	function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

		if ( ! ear ) return;

		// interlink polygon nodes in z-order

		if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

		var stop = ear, prev, next;

		// iterate through ears, slicing them one by one

		while ( ear.prev !== ear.next ) {

			prev = ear.prev;
			next = ear.next;

			if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

				// cut off the triangle
				triangles.push( prev.i / dim );
				triangles.push( ear.i / dim );
				triangles.push( next.i / dim );

				removeNode( ear );

				// skipping the next vertice leads to less sliver triangles
				ear = next.next;
				stop = next.next;

				continue;

			}

			ear = next;

			// if we looped through the whole remaining polygon and can't find any more ears

			if ( ear === stop ) {

				// try filtering points and slicing again

				if ( ! pass ) {

					earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

					// if this didn't work, try curing all small self-intersections locally

				} else if ( pass === 1 ) {

					ear = cureLocalIntersections( ear, triangles, dim );
					earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

				// as a last resort, try splitting the remaining polygon into two

				} else if ( pass === 2 ) {

					splitEarcut( ear, triangles, dim, minX, minY, invSize );

				}

				break;

			}

		}

	}

	// check whether a polygon node forms a valid ear with adjacent nodes

	function isEar( ear ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

		// now make sure we don't have other points inside the potential ear
		var p = ear.next.next;

		while ( p !== ear.prev ) {

			if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {

				return false;

			}

			p = p.next;

		}

		return true;

	}

	function isEarHashed( ear, minX, minY, invSize ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

		// triangle bbox; min & max are calculated like this for speed

		var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
			minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
			maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
			maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

		// z-order range for the current triangle bbox;

		var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
			maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

		// first look for points inside the triangle in increasing z-order

		var p = ear.nextZ;

		while ( p && p.z <= maxZ ) {

			if ( p !== ear.prev && p !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) return false;
			p = p.nextZ;

		}

		// then look for points in decreasing z-order

		p = ear.prevZ;

		while ( p && p.z >= minZ ) {

			if ( p !== ear.prev && p !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) return false;

			p = p.prevZ;

		}

		return true;

	}

	// go through all polygon nodes and cure small local self-intersections

	function cureLocalIntersections( start, triangles, dim ) {

		var p = start;

		do {

			var a = p.prev, b = p.next.next;

			if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

				triangles.push( a.i / dim );
				triangles.push( p.i / dim );
				triangles.push( b.i / dim );

				// remove two nodes involved

				removeNode( p );
				removeNode( p.next );

				p = start = b;

			}

			p = p.next;

		} while ( p !== start );

		return p;

	}

	// try splitting polygon into two and triangulate them independently

	function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

		// look for a valid diagonal that divides the polygon into two

		var a = start;

		do {

			var b = a.next.next;

			while ( b !== a.prev ) {

				if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

					// split the polygon in two by the diagonal

					var c = splitPolygon( a, b );

					// filter colinear points around the cuts

					a = filterPoints( a, a.next );
					c = filterPoints( c, c.next );

					// run earcut on each half

					earcutLinked( a, triangles, dim, minX, minY, invSize );
					earcutLinked( c, triangles, dim, minX, minY, invSize );
					return;

				}

				b = b.next;

			}

			a = a.next;

		} while ( a !== start );

	}

	// link every hole into the outer loop, producing a single-ring polygon without holes

	function eliminateHoles( data, holeIndices, outerNode, dim ) {

		var queue = [], i, len, start, end, list;

		for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

			start = holeIndices[ i ] * dim;
			end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
			list = linkedList( data, start, end, dim, false );
			if ( list === list.next ) list.steiner = true;
			queue.push( getLeftmost( list ) );

		}

		queue.sort( compareX );

		// process holes from left to right

		for ( i = 0; i < queue.length; i ++ ) {

			eliminateHole( queue[ i ], outerNode );
			outerNode = filterPoints( outerNode, outerNode.next );

		}

		return outerNode;

	}

	function compareX( a, b ) {

		return a.x - b.x;

	}

	// find a bridge between vertices that connects hole with an outer ring and and link it

	function eliminateHole( hole, outerNode ) {

		outerNode = findHoleBridge( hole, outerNode );

		if ( outerNode ) {

			var b = splitPolygon( outerNode, hole );

			filterPoints( b, b.next );

		}

	}

	// David Eberly's algorithm for finding a bridge between hole and outer polygon

	function findHoleBridge( hole, outerNode ) {

		var p = outerNode,
			hx = hole.x,
			hy = hole.y,
			qx = - Infinity,
			m;

		// find a segment intersected by a ray from the hole's leftmost point to the left;
		// segment's endpoint with lesser x will be potential connection point

		do {

			if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

				var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );

				if ( x <= hx && x > qx ) {

					qx = x;

					if ( x === hx ) {

						if ( hy === p.y ) return p;
						if ( hy === p.next.y ) return p.next;

					}

					m = p.x < p.next.x ? p : p.next;

				}

			}

			p = p.next;

		} while ( p !== outerNode );

		if ( ! m ) return null;

		if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint

		// look for points inside the triangle of hole point, segment intersection and endpoint;
		// if there are no points found, we have a valid connection;
		// otherwise choose the point of the minimum angle with the ray as connection point

		var stop = m,
			mx = m.x,
			my = m.y,
			tanMin = Infinity,
			tan;

		p = m.next;

		while ( p !== stop ) {

			if ( hx >= p.x && p.x >= mx && hx !== p.x &&
							pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

				tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

				if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

					m = p;
					tanMin = tan;

				}

			}

			p = p.next;

		}

		return m;

	}

	// interlink polygon nodes in z-order

	function indexCurve( start, minX, minY, invSize ) {

		var p = start;

		do {

			if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;

		} while ( p !== start );

		p.prevZ.nextZ = null;
		p.prevZ = null;

		sortLinked( p );

	}

	// Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html

	function sortLinked( list ) {

		var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;

		do {

			p = list;
			list = null;
			tail = null;
			numMerges = 0;

			while ( p ) {

				numMerges ++;
				q = p;
				pSize = 0;

				for ( i = 0; i < inSize; i ++ ) {

					pSize ++;
					q = q.nextZ;
					if ( ! q ) break;

				}

				qSize = inSize;

				while ( pSize > 0 || ( qSize > 0 && q ) ) {

					if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

						e = p;
						p = p.nextZ;
						pSize --;

					} else {

						e = q;
						q = q.nextZ;
						qSize --;

					}

					if ( tail ) tail.nextZ = e;
					else list = e;

					e.prevZ = tail;
					tail = e;

				}

				p = q;

			}

			tail.nextZ = null;
			inSize *= 2;

		} while ( numMerges > 1 );

		return list;

	}

	// z-order of a point given coords and inverse of the longer side of data bbox

	function zOrder( x, y, minX, minY, invSize ) {

		// coords are transformed into non-negative 15-bit integer range

		x = 32767 * ( x - minX ) * invSize;
		y = 32767 * ( y - minY ) * invSize;

		x = ( x | ( x << 8 ) ) & 0x00FF00FF;
		x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
		x = ( x | ( x << 2 ) ) & 0x33333333;
		x = ( x | ( x << 1 ) ) & 0x55555555;

		y = ( y | ( y << 8 ) ) & 0x00FF00FF;
		y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
		y = ( y | ( y << 2 ) ) & 0x33333333;
		y = ( y | ( y << 1 ) ) & 0x55555555;

		return x | ( y << 1 );

	}

	// find the leftmost node of a polygon ring

	function getLeftmost( start ) {

		var p = start, leftmost = start;

		do {

			if ( p.x < leftmost.x ) leftmost = p;
			p = p.next;

		} while ( p !== start );

		return leftmost;

	}

	// check if a point lies within a convex triangle

	function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

		return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
		 ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
		 ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

	}

	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)

	function isValidDiagonal( a, b ) {

		return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
			locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

	}

	// signed area of a triangle

	function area( p, q, r ) {

		return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

	}

	// check if two points are equal

	function equals( p1, p2 ) {

		return p1.x === p2.x && p1.y === p2.y;

	}

	// check if two segments intersect

	function intersects( p1, q1, p2, q2 ) {

		if ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||
				( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;

		return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
					 area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

	}

	// check if a polygon diagonal intersects any polygon segments

	function intersectsPolygon( a, b ) {

		var p = a;

		do {

			if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
							intersects( p, p.next, a, b ) ) {

				return true;

			}

			p = p.next;

		} while ( p !== a );

		return false;

	}

	// check if a polygon diagonal is locally inside the polygon

	function locallyInside( a, b ) {

		return area( a.prev, a, a.next ) < 0 ?
			area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
			area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

	}

	// check if the middle point of a polygon diagonal is inside the polygon

	function middleInside( a, b ) {

		var p = a,
			inside = false,
			px = ( a.x + b.x ) / 2,
			py = ( a.y + b.y ) / 2;

		do {

			if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
							( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {

				inside = ! inside;

			}

			p = p.next;

		} while ( p !== a );

		return inside;

	}

	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring

	function splitPolygon( a, b ) {

		var a2 = new Node( a.i, a.x, a.y ),
			b2 = new Node( b.i, b.x, b.y ),
			an = a.next,
			bp = b.prev;

		a.next = b;
		b.prev = a;

		a2.next = an;
		an.prev = a2;

		b2.next = a2;
		a2.prev = b2;

		bp.next = b2;
		b2.prev = bp;

		return b2;

	}

	// create a node and optionally link it with previous one (in a circular doubly linked list)

	function insertNode( i, x, y, last ) {

		var p = new Node( i, x, y );

		if ( ! last ) {

			p.prev = p;
			p.next = p;

		} else {

			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;

		}

		return p;

	}

	function removeNode( p ) {

		p.next.prev = p.prev;
		p.prev.next = p.next;

		if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
		if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

	}

	function Node( i, x, y ) {

		// vertice index in coordinates array
		this.i = i;

		// vertex coordinates
		this.x = x;
		this.y = y;

		// previous and next vertice nodes in a polygon ring
		this.prev = null;
		this.next = null;

		// z-order curve value
		this.z = null;

		// previous and next nodes in z-order
		this.prevZ = null;
		this.nextZ = null;

		// indicates whether this is a steiner point
		this.steiner = false;

	}

	function signedArea( data, start, end, dim ) {

		var sum = 0;

		for ( var i = start, j = end - dim; i < end; i += dim ) {

			sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
			j = i;

		}

		return sum;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		triangulateShape: function ( contour, holes ) {

			function removeDupEndPts( points ) {

				var l = points.length;

				if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

					points.pop();

				}

			}

			function addContour( vertices, contour ) {

				for ( var i = 0; i < contour.length; i ++ ) {

					vertices.push( contour[ i ].x );
					vertices.push( contour[ i ].y );

				}

			}

			var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
			var holeIndices = []; // array of hole indices
			var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

			removeDupEndPts( contour );
			addContour( vertices, contour );

			//

			var holeIndex = contour.length;
			holes.forEach( removeDupEndPts );

			for ( i = 0; i < holes.length; i ++ ) {

				holeIndices.push( holeIndex );
				holeIndex += holes[ i ].length;
				addContour( vertices, holes[ i ] );

			}

			//

			var triangles = Earcut.triangulate( vertices, holeIndices );

			//

			for ( var i = 0; i < triangles.length; i += 3 ) {

				faces.push( triangles.slice( i, i + 3 ) );

			}

			return faces;

		}

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.Curve> // curve to extrude shape along
	 *  frames: <Object> // containing arrays of tangents, normals, binormals
	 *
	 *  UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */

	// ExtrudeGeometry

	function ExtrudeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
		this.mergeVertices();

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	// ExtrudeBufferGeometry

	function ExtrudeBufferGeometry( shapes, options ) {

		if ( typeof ( shapes ) === "undefined" ) {

			return;

		}

		BufferGeometry.call( this );

		this.type = 'ExtrudeBufferGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeVertexNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	}

	ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

	ExtrudeBufferGeometry.prototype.getArrays = function () {

		var positionAttribute = this.getAttribute( "position" );
		var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];

		var uvAttribute = this.getAttribute( "uv" );
		var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];

		var IndexAttribute = this.index;
		var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];

		return {
			position: verticesArray,
			uv: uvArray,
			index: indicesArray
		};

	};

	ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;
		options.arrays = this.getArrays();

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

		this.setIndex( options.arrays.index );
		this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

	};

	ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {

		var arrays = options.arrays ? options.arrays : this.getArrays();
		var verticesArray = arrays.position;
		var indicesArray = arrays.index;
		var uvArray = arrays.uv;

		var placeholder = [];


		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new Vector3();
			normal = new Vector3();
			position2 = new Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

		}


		var faces = ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x,
				v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x,
				v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
						( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
					( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return new Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false; // assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y = v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [],
			oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y, - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y, amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			var start = verticesArray.length / 3;

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

			scope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var start = verticesArray.length / 3;
			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}


			scope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );


		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0,
					sl = steps + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d );

				}

			}

		}

		function v( x, y, z ) {

			placeholder.push( x );
			placeholder.push( y );
			placeholder.push( z );

		}


		function f3( a, b, c ) {

			addVertex( a );
			addVertex( b );
			addVertex( c );

			var nextIndex = verticesArray.length / 3;
			var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

			addUV( uvs[ 0 ] );
			addUV( uvs[ 1 ] );
			addUV( uvs[ 2 ] );

		}

		function f4( a, b, c, d ) {

			addVertex( a );
			addVertex( b );
			addVertex( d );

			addVertex( b );
			addVertex( c );
			addVertex( d );


			var nextIndex = verticesArray.length / 3;
			var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

			addUV( uvs[ 0 ] );
			addUV( uvs[ 1 ] );
			addUV( uvs[ 3 ] );

			addUV( uvs[ 1 ] );
			addUV( uvs[ 2 ] );
			addUV( uvs[ 3 ] );

		}

		function addVertex( index ) {

			indicesArray.push( verticesArray.length / 3 );
			verticesArray.push( placeholder[ index * 3 + 0 ] );
			verticesArray.push( placeholder[ index * 3 + 1 ] );
			verticesArray.push( placeholder[ index * 3 + 2 ] );

		}


		function addUV( vector2 ) {

			uvArray.push( vector2.x );
			uvArray.push( vector2.y );

		}

		if ( ! options.arrays ) {

			this.setIndex( indicesArray );
			this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

		}

	};

	ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];

			return [
				new Vector2( a_x, a_y ),
				new Vector2( b_x, b_y ),
				new Vector2( c_x, c_y )
			];

		},

		generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var a_z = vertices[ indexA * 3 + 2 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var b_z = vertices[ indexB * 3 + 2 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];
			var c_z = vertices[ indexC * 3 + 2 ];
			var d_x = vertices[ indexD * 3 ];
			var d_y = vertices[ indexD * 3 + 1 ];
			var d_z = vertices[ indexD * 3 + 2 ];

			if ( Math.abs( a_y - b_y ) < 0.01 ) {

				return [
					new Vector2( a_x, 1 - a_z ),
					new Vector2( b_x, 1 - b_z ),
					new Vector2( c_x, 1 - c_z ),
					new Vector2( d_x, 1 - d_z )
				];

			} else {

				return [
					new Vector2( a_y, 1 - a_z ),
					new Vector2( b_y, 1 - b_z ),
					new Vector2( c_y, 1 - c_z ),
					new Vector2( d_y, 1 - d_z )
				];

			}

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	// TextGeometry

	function TextGeometry( text, parameters ) {

		Geometry.call( this );

		this.type = 'TextGeometry';

		this.parameters = {
			text: text,
			parameters: parameters
		};

		this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
		this.mergeVertices();

	}

	TextGeometry.prototype = Object.create( Geometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	// TextBufferGeometry

	function TextBufferGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( ! ( font && font.isFont ) ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

		// translate parameters to ExtrudeGeometry API

		parameters.amount = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		ExtrudeBufferGeometry.call( this, shapes, parameters );

		this.type = 'TextBufferGeometry';

	}

	TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
	TextBufferGeometry.prototype.constructor = TextBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// SphereGeometry

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	// SphereBufferGeometry

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var ix, iy;

		var index = 0;
		var grid = [];

		var vertex = new Vector3();
		var normal = new Vector3();

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy <= heightSegments; iy ++ ) {

			var verticesRow = [];

			var v = iy / heightSegments;

			for ( ix = 0; ix <= widthSegments; ix ++ ) {

				var u = ix / widthSegments;

				// vertex

				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.set( vertex.x, vertex.y, vertex.z ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, 1 - v );

				verticesRow.push( index ++ );

			}

			grid.push( verticesRow );

		}

		// indices

		for ( iy = 0; iy < heightSegments; iy ++ ) {

			for ( ix = 0; ix < widthSegments; ix ++ ) {

				var a = grid[ iy ][ ix + 1 ];
				var b = grid[ iy ][ ix ];
				var c = grid[ iy + 1 ][ ix ];
				var d = grid[ iy + 1 ][ ix + 1 ];

				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// RingGeometry

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	// RingBufferGeometry

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 0.5;
		outerRadius = outerRadius || 1;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// some helper variables

		var segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				// values are generate from the inside of the ring to the outside

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex

				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, 0, 1 );

				// uv

				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;

				uvs.push( uv.x, uv.y );

			}

			// increase the radius for next row of vertices

			radius += radiusStep;

		}

		// indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// LatheGeometry

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	// LatheBufferGeometry

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]

		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


		// buffers

		var indices = [];
		var vertices = [];
		var uvs = [];

		// helper variables

		var base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex

				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;

				vertices.push( vertex.x, vertex.y, vertex.z );

				// uv

				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );

				uvs.push( uv.x, uv.y );


			}

		}

		// indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if ( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices

			base = segments * points.length * 3;

			for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line

				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line

				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals

				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals

				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			}

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// ShapeGeometry

	function ShapeGeometry( shapes, curveSegments ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( typeof curveSegments === 'object' ) {

			console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

			curveSegments = curveSegments.curveSegments;

		}

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
		this.mergeVertices();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	ShapeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON( shapes, data );

	};

	// ShapeBufferGeometry

	function ShapeBufferGeometry( shapes, curveSegments ) {

		BufferGeometry.call( this );

		this.type = 'ShapeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		curveSegments = curveSegments || 12;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var groupStart = 0;
		var groupCount = 0;

		// allow single and array values for "shapes" parameter

		if ( Array.isArray( shapes ) === false ) {

			addShape( shapes );

		} else {

			for ( var i = 0; i < shapes.length; i ++ ) {

				addShape( shapes[ i ] );

				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

				groupStart += groupCount;
				groupCount = 0;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


		// helper functions

		function addShape( shape ) {

			var i, l, shapeHole;

			var indexOffset = vertices.length / 3;
			var points = shape.extractPoints( curveSegments );

			var shapeVertices = points.shape;
			var shapeHoles = points.holes;

			// check direction of vertices

			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

				shapeVertices = shapeVertices.reverse();

				// also check if holes are in the opposite direction

				for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

					shapeHole = shapeHoles[ i ];

					if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

						shapeHoles[ i ] = shapeHole.reverse();

					}

				}

			}

			var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

			// join vertices of inner and outer paths to a single array

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );

			}

			// vertices, normals, uvs

			for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

				var vertex = shapeVertices[ i ];

				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs

			}

			// incides

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var a = face[ 0 ] + indexOffset;
				var b = face[ 1 ] + indexOffset;
				var c = face[ 2 ] + indexOffset;

				indices.push( a, b, c );
				groupCount += 3;

			}

		}

	}

	ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

	ShapeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON( shapes, data );

	};

	//

	function toJSON( shapes, data ) {

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		return data;

	}

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		this.type = 'EdgesGeometry';

		this.parameters = {
			thresholdAngle: thresholdAngle
		};

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		// buffer

		var vertices = [];

		// helper variables

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
		var edge = [ 0, 0 ], edges = {}, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];

		// prepare source geometry

		var geometry2;

		if ( geometry.isBufferGeometry ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var sourceVertices = geometry2.vertices;
		var faces = geometry2.faces;

		// now create a data structure where each entry represents an edge with its adjoining faces

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 );
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					edges[ key ].face2 = i;

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			var e = edges[ key ];

			// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

			if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

				var vertex = sourceVertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = sourceVertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		// build geometry

		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// CylinderGeometry

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	// CylinderBufferGeometry

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 1;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
		height = height || 1;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var index = 0;
		var indexArray = [];
		var halfHeight = height / 2;
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row

				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					// save index of vertex in respective row

					indexRow.push( index ++ );

				}

				// now save vertices of the row in our index array

				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices

					var a = indexArray[ y ][ x ];
					var b = indexArray[ y + 1 ][ x ];
					var c = indexArray[ y + 1 ][ x + 1 ];
					var d = indexArray[ y ][ x + 1 ];

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// update group counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex

				vertices.push( 0, halfHeight * sign, 0 );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uvs.push( 0.5, 0.5 );

				// increase index

				index ++;

			}

			// save the index of the last center vertex

			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );

				// increase index

				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top

					indices.push( i, i + 1, c );

				} else {

					// face bottom

					indices.push( i + 1, i, c );

				}

				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	// ConeGeometry

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	// ConeBufferGeometry

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author hughes
	 */

	// CircleGeometry

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	// CircleBufferGeometry

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, s;
		var vertex = new Vector3();
		var uv = new Vector2();

		// center point

		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );

		for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

			var segment = thetaStart + s / segments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uvs

			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// indices

		for ( i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



	var Geometries = Object.freeze({
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		TextBufferGeometry: TextBufferGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeBufferGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeBufferGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxBufferGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  color: <THREE.Color>,
	 *  opacity: <float>
	 * }
	 */

	function ShadowMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShadowMaterial';

		this.color = new Color( 0x000000 );
		this.opacity = 1.0;

		this.lights = true;
		this.transparent = true;

		this.setValues( parameters );

	}

	ShadowMaterial.prototype = Object.create( Material.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = { 'PHYSICAL': '' };

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = { 'PHYSICAL': '' };

		this.reflectivity = source.reflectivity;

		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author takahirox / http://github.com/takahirox
	 *
	 * parameters = {
	 *  gradientMap: new THREE.Texture( <Image> )
	 * }
	 */

	function MeshToonMaterial( parameters ) {

		MeshPhongMaterial.call( this );

		this.defines = { 'TOON': '' };

		this.type = 'MeshToonMaterial';

		this.gradientMap = null;

		this.setValues( parameters );

	}

	MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
	MeshToonMaterial.prototype.constructor = MeshToonMaterial;

	MeshToonMaterial.prototype.isMeshToonMaterial = true;

	MeshToonMaterial.prototype.copy = function ( source ) {

		MeshPhongMaterial.prototype.copy.call( this, source );

		this.gradientMap = source.gradientMap;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshNormalMaterial';

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		LineBasicMaterial.call( this );

		this.type = 'LineDashedMaterial';

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		LineBasicMaterial.prototype.copy.call( this, source );

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = Object.freeze({
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshToonMaterial: MeshToonMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshDistanceMaterial: MeshDistanceMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false;
		var itemsLoaded = 0;
		var itemsTotal = 0;
		var urlModifier = undefined;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

		this.resolveURL = function ( url ) {

			if ( urlModifier ) {

				return urlModifier( url );

			}

			return url;

		};

		this.setURLModifier = function ( transform ) {

			urlModifier = transform;
			return this;

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var loading = {};

	function FileLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FileLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check if request is duplicate

			if ( loading[ url ] !== undefined ) {

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				return;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[ 1 ];
				var isBase64 = !! dataUriRegexResult[ 2 ];
				var data = dataUriRegexResult[ 3 ];

				data = window.decodeURIComponent( data );

				if ( isBase64 ) data = window.atob( data );

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

							var view = new Uint8Array( data.length );

							for ( var i = 0; i < data.length; i ++ ) {

								view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ view.buffer ], { type: mimeType } );

							} else {

								response = view.buffer;

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					window.setTimeout( function () {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					}, 0 );

				} catch ( error ) {

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					window.setTimeout( function () {

						if ( onError ) onError( error );

						scope.manager.itemEnd( url );
						scope.manager.itemError( url );

					}, 0 );

				}

			} else {

				// Initialise array for duplicate requests

				loading[ url ] = [];

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				var request = new XMLHttpRequest();

				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = this.response;

					Cache.add( url, response );

					var callbacks = loading[ url ];

					delete loading[ url ];

					if ( this.status === 200 ) {

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onLoad ) callback.onLoad( response );

						}

						scope.manager.itemEnd( url );

					} else if ( this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onLoad ) callback.onLoad( response );

						}

						scope.manager.itemEnd( url );

					} else {

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onError ) callback.onError( event );

						}

						scope.manager.itemEnd( url );
						scope.manager.itemError( url );

					}

				}, false );

				request.addEventListener( 'progress', function ( event ) {

					var callbacks = loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onProgress ) callback.onProgress( event );

					}

				}, false );

				request.addEventListener( 'error', function ( event ) {

					var callbacks = loading[ url ];

					delete loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) callback.onError( event );

					}

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, false );

				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

				if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

				for ( var header in this.requestHeader ) {

					request.setRequestHeader( header, this.requestHeader[ header ] );

				}

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setMimeType: function ( value ) {

			this.mimeType = value;
			return this;

		},

		setRequestHeader: function ( value ) {

			this.requestHeader = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	function CompressedTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( CompressedTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps: [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	function DataTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( DataTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ImageLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( ImageLoader.prototype, {

		crossOrigin: 'Anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

			image.addEventListener( 'load', function () {

				Cache.add( url, this );

				if ( onLoad ) onLoad( this );

				scope.manager.itemEnd( url );

			}, false );

			/*
			image.addEventListener( 'progress', function ( event ) {

				if ( onProgress ) onProgress( event );

			}, false );
			*/

			image.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			}, false );

			if ( url.substr( 0, 5 ) !== 'data:' ) {

				if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

			}

			scope.manager.itemStart( url );

			image.src = url;

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( CubeTextureLoader.prototype, {

		crossOrigin: 'Anonymous',

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function TextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( TextureLoader.prototype, {

		crossOrigin: 'Anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			loader.load( url, function ( image ) {

				texture.image = image;

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	Object.assign( Curve.prototype, {

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( /* t, optionalTarget */ ) {

			console.warn( 'THREE.Curve: .getPoint() not implemented.' );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u, optionalTarget ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t, optionalTarget );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( divisions === undefined ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( divisions === undefined ) divisions = this.arcLengthDivisions;

			if ( this.cacheArcLengths &&
				( this.cacheArcLengths.length === divisions + 1 ) &&
				! this.needsUpdate ) {

				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum: sum }; Sum is in the last element.

		},

		updateArcLengths: function () {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			if ( arcLengths[ i ] === targetArcLength ) {

				return i / ( il - 1 );

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function ( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.arcLengthDivisions = source.arcLengthDivisions;

			return this;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};

			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;

			return data;

		},

		fromJSON: function ( json ) {

			this.arcLengthDivisions = json.arcLengthDivisions;

			return this;

		}

	} );

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		Curve.call( this );

		this.type = 'EllipseCurve';

		this.aX = aX || 0;
		this.aY = aY || 0;

		this.xRadius = xRadius || 1;
		this.yRadius = yRadius || 1;

		this.aStartAngle = aStartAngle || 0;
		this.aEndAngle = aEndAngle || 2 * Math.PI;

		this.aClockwise = aClockwise || false;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return point.set( x, y );

	};

	EllipseCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.aX = source.aX;
		this.aY = source.aY;

		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;

		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;

		this.aClockwise = source.aClockwise;

		this.aRotation = source.aRotation;

		return this;

	};


	EllipseCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.aX = this.aX;
		data.aY = this.aY;

		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;

		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;

		data.aClockwise = this.aClockwise;

		data.aRotation = this.aRotation;

		return data;

	};

	EllipseCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.aX = json.aX;
		this.aY = json.aY;

		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;

		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;

		this.aClockwise = json.aClockwise;

		this.aRotation = json.aRotation;

		return this;

	};

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		this.type = 'ArcCurve';

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	ArcCurve.prototype.isArcCurve = true;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */


	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/

	function CubicPoly() {

		var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		function init( x0, x1, t0, t1 ) {

			c0 = x0;
			c1 = t0;
			c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;

		}

		return {

			initCatmullRom: function ( x0, x1, x2, x3, tension ) {

				init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

			},

			initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

				// compute tangents when parameterized in [t1,t2]
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

				// rescale tangents for parametrization in [0,1]
				t1 *= dt1;
				t2 *= dt1;

				init( x1, x2, t1, t2 );

			},

			calc: function ( t ) {

				var t2 = t * t;
				var t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;

			}

		};

	}

	//

	var tmp = new Vector3();
	var px = new CubicPoly();
	var py = new CubicPoly();
	var pz = new CubicPoly();

	function CatmullRomCurve3( points, closed, curveType, tension ) {

		Curve.call( this );

		this.type = 'CatmullRomCurve3';

		this.points = points || [];
		this.closed = closed || false;
		this.curveType = curveType || 'centripetal';
		this.tension = tension || 0.5;

	}

	CatmullRomCurve3.prototype = Object.create( Curve.prototype );
	CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

	CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var points = this.points;
		var l = points.length;

		var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		var p0, p1, p2, p3; // 4 points

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		p1 = points[ intPoint % l ];
		p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	};

	CatmullRomCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	};

	CatmullRomCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	};

	CatmullRomCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/Bézier_curve
	 */

	function CatmullRom( t, p0, p1, p2, p3 ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

	//

	function QuadraticBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * p;

	}

	function QuadraticBezierP1( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	}

	function QuadraticBezierP2( t, p ) {

		return t * t * p;

	}

	function QuadraticBezier( t, p0, p1, p2 ) {

		return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
			QuadraticBezierP2( t, p2 );

	}

	//

	function CubicBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	}

	function CubicBezierP1( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	}

	function CubicBezierP2( t, p ) {

		return 3 * ( 1 - t ) * t * t * p;

	}

	function CubicBezierP3( t, p ) {

		return t * t * t * p;

	}

	function CubicBezier( t, p0, p1, p2, p3 ) {

		return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
			CubicBezierP3( t, p3 );

	}

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
		this.v3 = v3 || new Vector2();

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.isCubicBezierCurve = true;

	CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);

		return point;

	};

	CubicBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function CubicBezierCurve3( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
		this.v3 = v3 || new Vector3();

	}

	CubicBezierCurve3.prototype = Object.create( Curve.prototype );
	CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

	CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);

		return point;

	};

	CubicBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function LineCurve( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve';

		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve.prototype.getTangent = function ( /* t */ ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	LineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function LineCurve3( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve3';

		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	LineCurve3.prototype = Object.create( Curve.prototype );
	LineCurve3.prototype.constructor = LineCurve3;

	LineCurve3.prototype.isLineCurve3 = true;

	LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

	QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);

		return point;

	};

	QuadraticBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve3( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

	QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);

		return point;

	};

	QuadraticBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function SplineCurve( points /* array of Vector2 */ ) {

		Curve.call( this );

		this.type = 'SplineCurve';

		this.points = points || [];

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var points = this.points;
		var p = ( points.length - 1 ) * t;

		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var p1 = points[ intPoint ];
		var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);

		return point;

	};

	SplineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		return this;

	};

	SplineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		return data;

	};

	SplineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );

		}

		return this;

	};



	var Curves = Object.freeze({
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		Curve.call( this );

		this.type = 'CurvePath';

		this.curves = [];
		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) divisions = 40;

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
					: ( curve && curve.isLineCurve ) ? 1
						: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
							: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j ++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		copy: function ( source ) {

			Curve.prototype.copy.call( this, source );

			this.curves = [];

			for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

				var curve = source.curves[ i ];

				this.curves.push( curve.clone() );

			}

			this.autoClose = source.autoClose;

			return this;

		},

		toJSON: function () {

			var data = Curve.prototype.toJSON.call( this );

			data.autoClose = this.autoClose;
			data.curves = [];

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				var curve = this.curves[ i ];
				data.curves.push( curve.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Curve.prototype.fromJSON.call( this, json );

			this.autoClose = json.autoClose;
			this.curves = [];

			for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

				var curve = json.curves[ i ];
				this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

			}

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 **/

	function Path( points ) {

		CurvePath.call( this );

		this.type = 'Path';

		this.currentPoint = new Vector2();

		if ( points ) {

			this.setFromPoints( points );

		}

	}

	Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

		constructor: Path,

		setFromPoints: function ( points ) {

			this.moveTo( points[ 0 ].x, points[ 0 ].y );

			for ( var i = 1, l = points.length; i < l; i ++ ) {

				this.lineTo( points[ i ].x, points[ i ].y );

			}

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

		},

		copy: function ( source ) {

			CurvePath.prototype.copy.call( this, source );

			this.currentPoint.copy( source.currentPoint );

			return this;

		},

		toJSON: function () {

			var data = CurvePath.prototype.toJSON.call( this );

			data.currentPoint = this.currentPoint.toArray();

			return data;

		},

		fromJSON: function ( json ) {

			CurvePath.prototype.fromJSON.call( this, json );

			this.currentPoint.fromArray( json.currentPoint );

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape( points ) {

		Path.call( this, points );

		this.uuid = _Math.generateUUID();

		this.type = 'Shape';

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( Path.prototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// get points of shape and holes (keypoints based on segments parameter)

		extractPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		copy: function ( source ) {

			Path.prototype.copy.call( this, source );

			this.holes = [];

			for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

				var hole = source.holes[ i ];

				this.holes.push( hole.clone() );

			}

			return this;

		},

		toJSON: function () {

			var data = Path.prototype.toJSON.call( this );

			data.uuid = this.uuid;
			data.holes = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				var hole = this.holes[ i ];
				data.holes.push( hole.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Path.prototype.fromJSON.call( this, json );

			this.uuid = json.uuid;
			this.holes = [];

			for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

				var hole = json.holes[ i ];
				this.holes.push( new Path().fromJSON( hole ) );

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

			if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.matrix = new Matrix4();

	}

	Object.assign( LightShadow.prototype, {

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) object.bias = this.bias;
			if ( this.radius !== 1 ) object.radius = this.radius;
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		update: function ( light ) {

			var camera = this.camera;

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || camera.far;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / Math.PI;

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / ( 4 * Math.PI );

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow( ) {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true

	} );

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function RectAreaLight( color, intensity, width, height ) {

		Light.call( this, color, intensity );

		this.type = 'RectAreaLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.width = ( width !== undefined ) ? width : 10;
		this.height = ( height !== undefined ) ? height : 10;

		// TODO (abelnation): distance/decay

		// TODO (abelnation): update method for RectAreaLight to update transform to lookat target

		// TODO (abelnation): shadows

	}

	// TODO (abelnation): RectAreaLight update when light shape is changed
	RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: RectAreaLight,

		isRectAreaLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.width = source.width;
			this.height = source.height;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Light.prototype.toJSON.call( this, meta );

			data.object.width = this.width;
			data.object.height = this.height;

			return data;

		}

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrack.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Object.assign( Interpolant.prototype, {

		evaluate: function ( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[ i1 ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {

						//- See http://jsperf.com/comparison-to-undefined/3
						//- slower code:
						//-
						//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ; ) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

						//- slower code:
						//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ; ) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[ i1 ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function () {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function ( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function ( /* i1, t0, t, t1 */ ) {

			throw new Error( 'call to abstract method' );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function ( /* i1, t0, t1 */ ) {

			// empty

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( Interpolant.prototype, {

		//( 0, t, t0 ), returns this.resultBuffer
		beforeStart_: Interpolant.prototype.copySampleValue_,

		//( N-1, tN-1, t ), returns this.resultBuffer
		afterEnd_: Interpolant.prototype.copySampleValue_,

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function ( result ) {

			return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = - 0;
		this._offsetPrev = - 0;
		this._weightNext = - 0;
		this._offsetNext = - 0;

	}

	CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding

		},

		intervalChanged_: function ( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP = - wP * ppp + 2 * wP * pp - wP * p;
			var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
			var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
			var sN = wN * ppp - wN * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function ( i1 /*, t0, t, t1 */ ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function ( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				// in ios9 array.subarray(from, undefined) will return empty array
				// but array.subarray(from) or array.subarray(from, len) is correct
				return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function ( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function ( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function ( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function ( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {

				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {

				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
		if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	}

	// Static methods:

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function ( json ) {

			if ( json.type === undefined ) {

				throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

			}

			var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				var times = [], values = [];

				AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we assume a constructor compatible with the base
				return new trackType( json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function ( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function ( typeName ) {

			switch ( typeName.toLowerCase() ) {

				case 'scalar':
				case 'double':
				case 'float':
				case 'number':
				case 'integer':

					return NumberKeyframeTrack;

				case 'vector':
				case 'vector2':
				case 'vector3':
				case 'vector4':

					return VectorKeyframeTrack;

				case 'color':

					return ColorKeyframeTrack;

				case 'quaternion':

					return QuaternionKeyframeTrack;

				case 'bool':
				case 'boolean':

					return BooleanKeyframeTrack;

				case 'string':

					return StringKeyframeTrack;

			}

			throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

		}

	} );

	Object.assign( KeyframeTrack.prototype, {

		constructor: KeyframeTrack,

		TimeBufferType: Float32Array,

		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function ( result ) {

			return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function ( result ) {

			return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function ( result ) {

			return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function ( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( 'THREE.KeyframeTrack:', message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function () {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function () {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function ( timeOffset ) {

			if ( timeOffset !== 0.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function ( timeScale ) {

			if ( timeScale !== 1.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function ( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) {

				++ from;

			}

			while ( to !== - 1 && times[ to ] > endTime ) {

				-- to;

			}

			++ to; // inclusive -> exclusive bound

			if ( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function () {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if ( nKeys === 0 ) {

				console.error( 'THREE.KeyframeTrack: Track is empty.', this );
				valid = false;

			}

			var prevTime = null;

			for ( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
					valid = false;
					break;

				}

				if ( prevTime !== null && prevTime > currTime ) {

					console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function () {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for ( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else {

						keep = true;

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

					values[ writeOffset + j ] = values[ readOffset + j ];

				}

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	} );

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : - 1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		this.optimize();

	}

	Object.assign( AnimationClip, {

		parse: function ( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},

		toJSON: function ( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},

		CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );

			}

			return new AnimationClip( name, - 1, tracks );

		},

		findByName: function ( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}

			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function ( animation, bones ) {

			if ( ! animation ) {

				console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
				return null;

			}

			var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || - 1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) continue;

				// process morph targets
				if ( animationKeys[ 0 ].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};

					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[ k ].morphTargets ) {

							for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[ k ];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {

					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );

					addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	Object.assign( AnimationClip.prototype, {

		resetDuration: function () {

			var tracks = this.tracks, duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max( duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.textures = {};

	}

	Object.assign( MaterialLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
			if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.fog !== undefined ) material.fog = json.fog;
			if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
			if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
			if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

			if ( json.rotation !== undefined ) material.rotation = json.rotation;

			if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
			if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
			if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
			if ( json.scale !== undefined ) material.scale = json.scale;

			if ( json.skinning !== undefined ) material.skinning = json.skinning;
			if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
			if ( json.dithering !== undefined ) material.dithering = json.dithering;

			if ( json.visible !== undefined ) material.visible = json.visible;
			if ( json.userData !== undefined ) material.userData = json.userData;

			// Deprecated

			if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

			// for PointsMaterial

			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

			if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

			return material;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( BufferGeometryLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new BufferGeometry();

			var index = json.data.index;

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	} );

	var TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		// Workaround for IE11 pre KB2929437. See #11440
		Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader() {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	}

	Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	Object.assign( Loader.prototype, {

		crossOrigin: undefined,

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var BlendingMode = {
				NoBlending: NoBlending,
				NormalBlending: NormalBlending,
				AdditiveBlending: AdditiveBlending,
				SubtractiveBlending: SubtractiveBlending,
				MultiplyBlending: MultiplyBlending,
				CustomBlending: CustomBlending
			};

			var color = new Color();
			var textureLoader = new TextureLoader();
			var materialLoader = new MaterialLoader();

			return function createMaterial( m, texturePath, crossOrigin ) {

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = _Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: _Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {

						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = BlendingMode[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = BackSide;
							break;
						case 'doubleSided':
							json.side = DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = VertexColors;
							if ( value === 'face' ) json.vertexColors = FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;

					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	} );

	/**
	 * @author Don McCurdy / https://www.donmccurdy.com
	 */

	var LoaderUtils = {

		decodeText: function ( array ) {

			if ( typeof TextDecoder !== 'undefined' ) {

				return new TextDecoder().decode( array );

			}

			// Avoid the String.fromCharCode.apply(null, array) shortcut, which
			// throws a "maximum call stack size exceeded" error for large arrays.

			var s = '';

			for ( var i = 0, il = array.length; i < il; i ++ ) {

				// Implicitly assumes little-endian.
				s += String.fromCharCode( array[ i ] );

			}

			return s;

		},

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function JSONLoader( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.withCredentials = false;

	}

	Object.assign( JSONLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );

			var loader = new FileLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: ( function () {

			function parseModel( json, geometry ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

					offset, zLength,

					colorIndex, normalIndex, uvIndex, materialIndex,

					type,
					isQuad,
					hasMaterial,
					hasFaceVertexUv,
					hasFaceNormal, hasFaceVertexNormal,
					hasFaceColor, hasFaceVertexColor,

					vertex, face, faceA, faceB, hex, normal,

					uvLayer, uv, u, v,

					faces = json.faces,
					vertices = json.vertices,
					normals = json.normals,
					colors = json.colors,

					scale = json.scale,

					nUvLayers = 0;


				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];

					isQuad = isBitSet( type, 0 );
					hasMaterial = isBitSet( type, 1 );
					hasFaceVertexUv = isBitSet( type, 3 );
					hasFaceNormal = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor = isBitSet( type, 6 );
					hasFaceVertexColor = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			}

			function parseSkin( json, geometry ) {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x = json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a = json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			}

			function parseMorphing( json, geometry ) {

				var scale = json.scale;

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations( json, geometry ) {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			}

			return function ( json, texturePath ) {

				if ( json.data !== undefined ) {

					// Geometry 4.0 spec
					json = json.data;

				}

				if ( json.scale !== undefined ) {

					json.scale = 1.0 / json.scale;

				} else {

					json.scale = 1.0;

				}

				var geometry = new Geometry();

				parseModel( json, geometry );
				parseSkin( json, geometry );
				parseMorphing( json, geometry );
				parseAnimations( json, geometry );

				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();

				if ( json.materials === undefined || json.materials.length === 0 ) {

					return { geometry: geometry };

				} else {

					var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

					return { geometry: geometry, materials: materials };

				}

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.texturePath = '';

	}

	Object.assign( ObjectLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.load( url, function ( text ) {

				var json = null;

				try {

					json = JSON.parse( text );

				} catch ( error ) {

					if ( onError !== undefined ) onError( error );

					console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

					return;

				}

				var metadata = json.metadata;

				if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

					console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
					return;

				}

				scope.parse( json, onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var shapes = this.parseShape( json.shapes );
			var geometries = this.parseGeometries( json.geometries, shapes );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseShape: function ( json ) {

			var shapes = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var shape = new Shape().fromJSON( json[ i ] );

					shapes[ shape.uuid ] = shape;

				}

			}

			return shapes;

		},

		parseGeometries: function ( json, shapes ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new JSONLoader();
				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'DodecahedronBufferGeometry':
						case 'IcosahedronGeometry':
						case 'IcosahedronBufferGeometry':
						case 'OctahedronGeometry':
						case 'OctahedronBufferGeometry':
						case 'TetrahedronGeometry':
						case 'TetrahedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'PolyhedronGeometry':
						case 'PolyhedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.vertices,
								data.indices,
								data.radius,
								data.details
							);

							break;

						case 'ShapeGeometry':
						case 'ShapeBufferGeometry':

							var geometryShapes = [];

							for ( var i = 0, l = data.shapes.length; i < l; i ++ ) {

								var shape = shapes[ data.shapes[ i ] ];

								geometryShapes.push( shape );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.curveSegments
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.type === 'MultiMaterial' ) {

						// Deprecated

						var array = [];

						for ( var j = 0; j < data.materials.length; j ++ ) {

							array.push( loader.parse( data.materials[ j ] ) );

						}

						materials[ data.uuid ] = array;

					} else {

						materials[ data.uuid ] = loader.parse( data );

					}

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof value === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;

					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

					if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
					if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
					if ( data.center !== undefined ) texture.center.fromArray( data.center );
					if ( data.rotation !== undefined ) texture.rotation = data.rotation;

					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

					}

					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

					if ( data.flipY !== undefined ) texture.flipY = data.flipY;

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new Matrix4();

			return function parseObject( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( Array.isArray( name ) ) {

						var array = [];

						for ( var i = 0, l = name.length; i < l; i ++ ) {

							var uuid = name[ i ];

							if ( materials[ uuid ] === undefined ) {

								console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

							}

							array.push( materials[ uuid ] );

						}

						return array;

					}

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new Scene();

						if ( data.background !== undefined ) {

							if ( Number.isInteger( data.background ) ) {

								object.background = new Color( data.background );

							}

						}

						if ( data.fog !== undefined ) {

							if ( data.fog.type === 'Fog' ) {

								object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

							} else if ( data.fog.type === 'FogExp2' ) {

								object.fog = new FogExp2( data.fog.color, data.fog.density );

							}

						}

						break;

					case 'PerspectiveCamera':

						object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						if ( data.focus !== undefined ) object.focus = data.focus;
						if ( data.zoom !== undefined ) object.zoom = data.zoom;
						if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
						if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
						if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

						break;

					case 'OrthographicCamera':

						object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'RectAreaLight':

						object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

						break;

					case 'SpotLight':

						object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

						break;

					case 'HemisphereLight':

						object = new HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'SkinnedMesh':

						console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new SkinnedMesh( geometry, material );

						} else {

							object = new Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new LOD();

						break;

					case 'Line':

						object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'LineLoop':

						object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'LineSegments':

						object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'PointCloud':
					case 'Points':

						object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new Group();

						break;

					default:

						object = new Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.shadow ) {

					if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
					if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
					if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
					if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

				}

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					var children = data.children;

					for ( var i = 0; i < children.length; i ++ ) {

						object.add( this.parseObject( children[ i ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			};

		}()

	} );

	var TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};

	var TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};

	var TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipMapNearestFilter: NearestMipMapNearestFilter,
		NearestMipMapLinearFilter: NearestMipMapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipMapNearestFilter: LinearMipMapNearestFilter,
		LinearMipMapLinearFilter: LinearMipMapLinearFilter
	};

	/**
	 * @author thespite / http://clicktorelease.com/
	 */

	function ImageBitmapLoader( manager ) {

		if ( typeof createImageBitmap === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

		}

		if ( typeof fetch === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

		}

		this.manager = manager !== undefined ? manager : DefaultLoadingManager;
		this.options = undefined;

	}

	ImageBitmapLoader.prototype = {

		constructor: ImageBitmapLoader,

		setOptions: function setOptions( options ) {

			this.options = options;

			return this;

		},

		load: function load( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			fetch( url ).then( function ( res ) {

				return res.blob();

			} ).then( function ( blob ) {

				return createImageBitmap( blob, scope.options );

			} ).then( function ( imageBitmap ) {

				Cache.add( url, imageBitmap );

				if ( onLoad ) onLoad( imageBitmap );

				scope.manager.itemEnd( url );

			} ).catch( function ( e ) {

				if ( onError ) onError( e );

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			} );

		},

		setCrossOrigin: function ( /* value */ ) {

			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	 **/

	function ShapePath() {

		this.type = 'ShapePath';

		this.subPaths = [];
		this.currentPath = null;

	}

	Object.assign( ShapePath.prototype, {

		moveTo: function ( x, y ) {

			this.currentPath = new Path();
			this.subPaths.push( this.currentPath );
			this.currentPath.moveTo( x, y );

		},

		lineTo: function ( x, y ) {

			this.currentPath.lineTo( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

		},

		splineThru: function ( pts ) {

			this.currentPath.splineThru( pts );

		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) return [];

			if ( noHoles === true )	return	toShapesNoHoles( subPaths );


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Font( data ) {

		this.type = 'Font';

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size, divisions ) {

			function createPaths( text ) {

				var chars = String( text ).split( '' );
				var scale = size / data.resolution;
				var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

				var offsetX = 0, offsetY = 0;

				var paths = [];

				for ( var i = 0; i < chars.length; i ++ ) {

					var char = chars[ i ];

					if ( char === '\n' ) {

						offsetX = 0;
						offsetY -= line_height;

					} else {

						var ret = createPath( char, scale, offsetX, offsetY );
						offsetX += ret.offsetX;
						paths.push( ret.path );

					}

				}

				return paths;

			}

			function createPath( c, scale, offsetX, offsetY ) {

				var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

				if ( ! glyph ) return;

				var path = new ShapePath();

				var pts = [];
				var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

				if ( glyph.o ) {

					var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

					for ( var i = 0, l = outline.length; i < l; ) {

						var action = outline[ i ++ ];

						switch ( action ) {

							case 'm': // moveTo

								x = outline[ i ++ ] * scale + offsetX;
								y = outline[ i ++ ] * scale + offsetY;

								path.moveTo( x, y );

								break;

							case 'l': // lineTo

								x = outline[ i ++ ] * scale + offsetX;
								y = outline[ i ++ ] * scale + offsetY;

								path.lineTo( x, y );

								break;

							case 'q': // quadraticCurveTo

								cpx = outline[ i ++ ] * scale + offsetX;
								cpy = outline[ i ++ ] * scale + offsetY;
								cpx1 = outline[ i ++ ] * scale + offsetX;
								cpy1 = outline[ i ++ ] * scale + offsetY;

								path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									

								}

								break;

							case 'b': // bezierCurveTo

								cpx = outline[ i ++ ] * scale + offsetX;
								cpy = outline[ i ++ ] * scale + offsetY;
								cpx1 = outline[ i ++ ] * scale + offsetX;
								cpy1 = outline[ i ++ ] * scale + offsetY;
								cpx2 = outline[ i ++ ] * scale + offsetX;
								cpy2 = outline[ i ++ ] * scale + offsetY;

								path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									

								}

								break;

						}

					}

				}

				return { offsetX: glyph.ha * scale, path: path };

			}

			//

			if ( size === undefined ) size = 100;
			if ( divisions === undefined ) divisions = 4;

			var data = this.data;

			var paths = createPaths( text );
			var shapes = [];

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FontLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) onLoad( font );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var context;

	var AudioContext = {

		getContext: function () {

			if ( context === undefined ) {

				context = new ( window.AudioContext || window.webkitAudioContext )();

			}

			return context;

		},

		setContext: function ( value ) {

			context = value;

		}

	};

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( AudioLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.load( url, function ( buffer ) {

				var context = AudioContext.getContext();

				context.decodeAudioData( buffer, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	}

	Object.assign( StereoCamera.prototype, {

		update: ( function () {

			var instance, focus, fov, aspect, near, far, zoom, eyeSep;

			var eyeRight = new Matrix4();
			var eyeLeft = new Matrix4();

			return function update( camera ) {

				var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

				if ( needsUpdate ) {

					instance = this;
					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;
					zoom = camera.zoom;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					eyeSep = this.eyeSep / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CubeCamera( near, far, cubeResolution ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
		this.renderTarget.texture.name = "CubeCamera";

		this.update = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

		this.clear = function ( renderer, color, depth, stencil ) {

			var renderTarget = this.renderTarget;

			for ( var i = 0; i < 6; i ++ ) {

				renderTarget.activeCubeFace = i;
				renderer.setRenderTarget( renderTarget );

				renderer.clear( color, depth, stencil );

			}

			renderer.setRenderTarget( null );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = AudioContext.getContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.value = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();

			var orientation = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				var listener = this.context.listener;
				var up = this.up;

				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				if ( listener.positionX ) {

					listener.positionX.setValueAtTime( position.x, this.context.currentTime );
					listener.positionY.setValueAtTime( position.y, this.context.currentTime );
					listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
					listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
					listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
					listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
					listener.upX.setValueAtTime( up.x, this.context.currentTime );
					listener.upY.setValueAtTime( up.y, this.context.currentTime );
					listener.upZ.setValueAtTime( up.z, this.context.currentTime );

				} else {

					listener.setPosition( position.x, position.y, position.z );
					listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

				}

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.buffer = null;
		this.loop = false;
		this.startTime = 0;
		this.offset = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) this.play();

			return this;

		},

		play: function () {

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			var source = this.context.createBufferSource();

			source.buffer = this.buffer;
			source.loop = this.loop;
			source.onended = this.onEnded.bind( this );
			source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
			this.startTime = this.context.currentTime;
			source.start( this.startTime, this.offset );

			this.isPlaying = true;

			this.source = source;

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			if ( this.isPlaying === true ) {

				this.source.stop();
				this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
				this.isPlaying = false;

			}

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.offset = 0;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) value = [];

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.loop = value;

			if ( this.isPlaying === true ) {

				this.source.loop = this.loop;

			}

			return this;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},

		setVolume: function ( value ) {

			this.gain.gain.value = value;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				position.setFromMatrixPosition( this.matrixWorld );

				this.panner.setPosition( position.x, position.y, position.z );

			};

		} )()


	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':
				mixFunction = this._slerp;
				break;

			case 'string':
			case 'bool':
				bufferType = Array;
				mixFunction = this._select;
				break;

			default:
				mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	Object.assign( PropertyMixer.prototype, {

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function ( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function ( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
					buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function () {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function () {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function ( buffer, dstOffset, srcOffset, t ) {

			Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	} );

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function Composite( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	}

	Object.assign( Composite.prototype, {

		getValue: function ( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function ( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					  n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					  n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					  n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	} );


	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	Object.assign( PropertyBinding, {

		Composite: Composite,

		create: function ( root, path, parsedPath ) {

			if ( ! ( root && root.isAnimationObjectGroup ) ) {

				return new PropertyBinding( root, path, parsedPath );

			} else {

				return new PropertyBinding.Composite( root, path, parsedPath );

			}

		},

		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param  {string} name Node name to be sanitized.
		 * @return {string}
		 */
		sanitizeNodeName: function ( name ) {

			return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );

		},

		parseTrackName: function () {

			// Parent directories, delimited by '/' or ':'. Currently unused, but must
			// be matched to parse the rest of the track name.
			var directoryRe = /((?:[\w-]+[\/:])*)/;

			// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
			var nodeRe = /([\w-\.]+)?/;

			// Object on target node, and accessor. Name may contain only word
			// characters. Accessor may contain any character except closing bracket.
			var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;

			// Property and accessor. May contain only word characters. Accessor may
			// contain any non-bracket characters.
			var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;

			var trackRe = new RegExp( ''
				+ '^'
				+ directoryRe.source
				+ nodeRe.source
				+ objectRe.source
				+ propertyRe.source
				+ '$'
			);

			var supportedObjectNames = [ 'material', 'materials', 'bones' ];

			return function ( trackName ) {

				var matches = trackRe.exec( trackName );

				if ( ! matches ) {

					throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

				}

				var results = {
					// directoryName: matches[ 1 ], // (tschw) currently unused
					nodeName: matches[ 2 ],
					objectName: matches[ 3 ],
					objectIndex: matches[ 4 ],
					propertyName: matches[ 5 ], // required
					propertyIndex: matches[ 6 ]
				};

				var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

				if ( lastDot !== undefined && lastDot !== - 1 ) {

					var objectName = results.nodeName.substring( lastDot + 1 );

					// Object names must be checked against a whitelist. Otherwise, there
					// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
					// 'bar' could be the objectName, or part of a nodeName (which can
					// include '.' characters).
					if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {

						results.nodeName = results.nodeName.substring( 0, lastDot );
						results.objectName = objectName;

					}

				}

				if ( results.propertyName === null || results.propertyName.length === 0 ) {

					throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

				}

				return results;

			};

		}(),

		findNode: function ( root, nodeName ) {

			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

				return root;

			}

			// search into skeleton bones.
			if ( root.skeleton ) {

				var searchSkeleton = function ( skeleton ) {

					for ( var i = 0; i < skeleton.bones.length; i ++ ) {

						var bone = skeleton.bones[ i ];

						if ( bone.name === nodeName ) {

							return bone;

						}

					}

					return null;

				};

				var bone = searchSkeleton( root.skeleton );

				if ( bone ) {

					return bone;

				}

			}

			// search into node subtree.
			if ( root.children ) {

				var searchNodeSubtree = function ( children ) {

					for ( var i = 0; i < children.length; i ++ ) {

						var childNode = children[ i ];

						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

							return childNode;

						}

						var result = searchNodeSubtree( childNode.children );

						if ( result ) return result;

					}

					return null;

				};

				var subTreeNode = searchNodeSubtree( root.children );

				if ( subTreeNode ) {

					return subTreeNode;

				}

			}

			return null;

		}

	} );

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function () {},
		_setValue_unavailable: function () {},

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		],

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function () {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

			// ensure there is a value node
			if ( ! targetObject ) {

				console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
					'.' + propertyName + ' but it wasn\'t found.', targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {

				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {

					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
						return;

					}

					if ( targetObject.geometry.isBufferGeometry ) {

						if ( ! targetObject.geometry.morphAttributes ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

							if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}


					} else {

						if ( ! targetObject.geometry.morphTargets ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( Array.isArray( nodeProperty ) ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function () {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( PropertyBinding.prototype, {

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

	} );

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup() {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() {

					return scope._objects.length;

				},
				get inUse() {

					return this.total - scope.nCachedObjects_;

				}
			},
			get bindingsPerObject() {

				return scope._bindings.length;

			}

		};

	}

	Object.assign( AnimationObjectGroup.prototype, {

		isAnimationObjectGroup: true,

		add: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ],
					knownObject = undefined;

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject ) {

					console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
							'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function () {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function ( path, parsedPath ) {

			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];
				bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function ( path ) {

			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	} );

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = - 1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// true -> zero effective time scale
		this.enabled = true;				// false -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	}

	Object.assign( AnimationAction.prototype, {

		// State & Scheduling

		play: function () {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function () {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function () {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = - 1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function () {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function () {

			return this._mixer._isActiveAction( this );

		},

		startAt: function ( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function ( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function ( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function () {

			return this._effectiveWeight;

		},

		fadeIn: function ( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function ( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function ( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if ( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function ( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function () {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the time scale stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function ( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function () {

			return this._effectiveTimeScale;

		},

		setDuration: function ( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function ( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function ( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function ( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function () {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function () {

			return this._mixer;

		},

		getClip: function () {

			return this._clip;

		},

		getRoot: function () {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function ( time, deltaTime, timeDirection, accuIndex ) {

			// called by the mixer

			if ( ! this.enabled ) {

				// call ._updateWeight() to update ._effectiveWeight

				this._updateWeight( time );
				return;

			}

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function ( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function ( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function ( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount;

			if ( loop === LoopOnce ) {

				if ( loopCount === - 1 ) {

					// just started

					this._loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break handle_stop;

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? - 1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				var pingPong = ( loop === LoopPingPong );

				if ( loopCount === - 1 ) {

					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings( true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings( this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {

					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending < 0 ) {

						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						time = deltaTime > 0 ? duration : 0;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : - 1
						} );

					} else {

						// keep running

						if ( pending === 0 ) {

							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {

					// invert time for the "pong round"

					this.time = time;
					return duration - time;

				}

			}

			this.time = time;
			return time;

		},

		_setEndings: function ( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= ZeroSlopeEnding;
				settings.endingEnd		= ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function ( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	} );

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: AnimationMixer,

		_bindAction: function ( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
						PropertyBinding.create( root, trackName, path ),
						track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function ( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
						actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function ( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function () {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< AnimationAction >	- used as prototypes
			// 		actionByRoot: AnimationAction			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() {

						return scope._actions.length;

					},
					get inUse() {

						return scope._nActiveActions;

					}
				},
				bindings: {
					get total() {

						return scope._bindings.length;

					},
					get inUse() {

						return scope._nActiveBindings;

					}
				},
				controlInterpolants: {
					get total() {

						return scope._controlInterpolants.length;

					},
					get inUse() {

						return scope._nActiveControlInterpolants;

					}
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function ( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function ( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function ( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( action._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function ( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function ( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function ( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function ( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function ( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function () {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
					new Float32Array( 2 ), new Float32Array( 2 ),
					1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function ( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 ),

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					clipObject = prototypeAction._clip;

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function () {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function ( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				action._update( time, deltaTime, timeDirection, accuIndex );

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function () {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function ( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function ( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function ( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	Uniform.prototype.clone = function () {

		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

		constructor: InstancedBufferGeometry,

		isInstancedBufferGeometry: true,

		copy: function ( source ) {

			BufferGeometry.prototype.copy.call( this, source );

			this.maxInstancedCount = source.maxInstancedCount;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.uuid = _Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}

	Object.defineProperties( InterleavedBufferAttribute.prototype, {

		count: {

			get: function () {

				return this.data.count;

			}

		},

		array: {

			get: function () {

				return this.data.array;

			}

		}

	} );

	Object.assign( InterleavedBufferAttribute.prototype, {

		isInterleavedBufferAttribute: true,

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.onUploadCallback = function () {};

		this.version = 0;

	}

	Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) this.version ++;

		}

	} );

	Object.assign( InterleavedBuffer.prototype, {

		isInterleavedBuffer: true,

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.stride : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

		constructor: InstancedInterleavedBuffer,

		isInstancedInterleavedBuffer: true,

		copy: function ( source ) {

			InterleavedBuffer.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

		BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

		constructor: InstancedBufferAttribute,

		isInstancedBufferAttribute: true,

		copy: function ( source ) {

			BufferAttribute.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {

					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;

				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) return;

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	Object.assign( Raycaster.prototype, {

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( ( camera && camera.isPerspectiveCamera ) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

			} else if ( ( camera && camera.isOrthographicCamera ) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive ) {

			var intersects = [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive ) {

			var intersects = [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Object.assign( Clock.prototype, {

		start: function () {

			this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();
				return 0;

			}

			if ( this.running ) {

				var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The poles (phi) are at the positive and negative y axis.
	 * The equator starts at positive z.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
		this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

		return this;

	}

	Object.assign( Spherical.prototype, {

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function () {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function ( vec3 ) {

			this.radius = vec3.length();

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
				this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

			}

			return this;

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 *
	 */

	function Cylindrical( radius, theta, y ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
		this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
		this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

		return this;

	}

	Object.assign( Cylindrical.prototype, {

		set: function ( radius, theta, y ) {

			this.radius = radius;
			this.theta = theta;
			this.y = y;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;

			return this;

		},

		setFromVector3: function ( vec3 ) {

			this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
			this.theta = Math.atan2( vec3.x, vec3.z );
			this.y = vec3.y;

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( /* renderCallback */ ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( objGeometry && objGeometry.isGeometry ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( objGeometry && objGeometry.isBufferGeometry ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function SpotLightHelper( light, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0, 	0, 0, 1,
			0, 0, 0, 	1, 0, 1,
			0, 0, 0,	- 1, 0, 1,
			0, 0, 0, 	0, 1, 1,
			0, 0, 0, 	0, - 1, 1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		var vector = new Vector3();
		var vector2 = new Vector3();

		return function update() {

			this.light.updateMatrixWorld();

			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			if ( this.color !== undefined ) {

				this.cone.material.color.set( this.color );

			} else {

				this.cone.material.color.copy( this.light.color );

			}

		};

	}();

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function getBoneList( object ) {

		var boneList = [];

		if ( object && object.isBone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

		}

		return boneList;

	}

	function SkeletonHelper( object ) {

		var bones = getBoneList( object );

		var geometry = new BufferGeometry();

		var vertices = [];
		var colors = [];

		var color1 = new Color( 0, 0, 1 );
		var color2 = new Color( 0, 1, 0 );

		for ( var i = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				vertices.push( 0, 0, 0 );
				vertices.push( 0, 0, 0 );
				colors.push( color1.r, color1.g, color1.b );
				colors.push( color2.r, color2.g, color2.b );

			}

		}

		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;
		this.bones = bones;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	}

	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.updateMatrixWorld = function () {

		var vector = new Vector3();

		var boneMatrix = new Matrix4();
		var matrixWorldInv = new Matrix4();

		return function updateMatrixWorld( force ) {

			var bones = this.bones;

			var geometry = this.geometry;
			var position = geometry.getAttribute( 'position' );

			matrixWorldInv.getInverse( this.root.matrixWorld );

			for ( var i = 0, j = 0; i < bones.length; i ++ ) {

				var bone = bones[ i ];

				if ( bone.parent && bone.parent.isBone ) {

					boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
					vector.setFromMatrixPosition( boneMatrix );
					position.setXYZ( j, vector.x, vector.y, vector.z );

					boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
					vector.setFromMatrixPosition( boneMatrix );
					position.setXYZ( j + 1, vector.x, vector.y, vector.z );

					j += 2;

				}

			}

			geometry.getAttribute( 'position' ).needsUpdate = true;

			Object3D.prototype.updateMatrixWorld.call( this, force );

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize, color ) {

		this.light = light;
		this.light.updateMatrixWorld();

		this.color = color;

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();


		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color );

		}

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author abelnation / http://github.com/abelnation
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function RectAreaLightHelper( light, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var material = new LineBasicMaterial( { fog: false } );

		var geometry = new BufferGeometry();

		geometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );

		this.line = new Line( geometry, material );
		this.add( this.line );


		this.update();

	}

	RectAreaLightHelper.prototype = Object.create( Object3D.prototype );
	RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

	RectAreaLightHelper.prototype.dispose = function () {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	RectAreaLightHelper.prototype.update = function () {

		// calculate new dimensions of the helper

		var hx = this.light.width * 0.5;
		var hy = this.light.height * 0.5;

		var position = this.line.geometry.attributes.position;
		var array = position.array;

		// update vertices

		array[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;
		array[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;
		array[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;
		array[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;
		array[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;

		position.needsUpdate = true;

		if ( this.color !== undefined ) {

			this.line.material.color.set( this.color );

		} else {

			this.line.material.color.copy( this.light.color );

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function HemisphereLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new OctahedronBufferGeometry( size );
		geometry.rotateY( Math.PI * 0.5 );

		this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		if ( this.color === undefined ) this.material.vertexColors = VertexColors;

		var position = geometry.getAttribute( 'position' );
		var colors = new Float32Array( position.count * 3 );

		geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

		this.add( new Mesh( geometry, this.material ) );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var vector = new Vector3();

		var color1 = new Color();
		var color2 = new Color();

		return function update() {

			var mesh = this.children[ 0 ];

			if ( this.color !== undefined ) {

				this.material.color.set( this.color );

			} else {

				var colors = mesh.geometry.getAttribute( 'color' );

				color1.copy( this.light.color );
				color2.copy( this.light.groundColor );

				for ( var i = 0, l = colors.count; i < l; i ++ ) {

					var color = ( i < ( l / 2 ) ) ? color1 : color2;

					colors.setXYZ( i, color.r, color.g, color.b );

				}

				colors.needsUpdate = true;

			}

			mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		size = size || 10;
		divisions = divisions || 10;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = size / divisions;
		var halfSize = size / 2;

		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

			vertices.push( - halfSize, 0, k, halfSize, 0, k );
			vertices.push( k, 0, - halfSize, k, 0, halfSize );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.create( LineSegments.prototype );
	GridHelper.prototype.constructor = GridHelper;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author Hectate / http://www.github.com/Hectate
	 */

	function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

		radius = radius || 10;
		radials = radials || 16;
		circles = circles || 8;
		divisions = divisions || 64;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var vertices = [];
		var colors = [];

		var x, z;
		var v, i, j, r, color;

		// create the radials

		for ( i = 0; i <= radials; i ++ ) {

			v = ( i / radials ) * ( Math.PI * 2 );

			x = Math.sin( v ) * radius;
			z = Math.cos( v ) * radius;

			vertices.push( 0, 0, 0 );
			vertices.push( x, 0, z );

			color = ( i & 1 ) ? color1 : color2;

			colors.push( color.r, color.g, color.b );
			colors.push( color.r, color.g, color.b );

		}

		// create the circles

		for ( i = 0; i <= circles; i ++ ) {

			color = ( i & 1 ) ? color1 : color2;

			r = radius - ( radius / circles * i );

			for ( j = 0; j < divisions; j ++ ) {

				// first vertex

				v = ( j / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

				// second vertex

				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

			}

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	PolarGridHelper.prototype = Object.create( LineSegments.prototype );
	PolarGridHelper.prototype.constructor = PolarGridHelper;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function DirectionalLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		if ( size === undefined ) size = 1;

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( [
			- size, size, 0,
			size, size, 0,
			size, - size, 0,
			- size, - size, 0,
			- size, size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.lightPlane = new Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.targetLine = new Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var v3 = new Vector3();

		return function update() {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			this.lightPlane.lookAt( v3 );

			if ( this.color !== undefined ) {

				this.lightPlane.material.color.set( this.color );
				this.targetLine.material.color.set( this.color );

			} else {

				this.lightPlane.material.color.copy( this.light.color );
				this.targetLine.material.color.copy( this.light.color );

			}

			this.targetLine.lookAt( v3 );
			this.targetLine.scale.z = v3.length();

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	function CameraHelper( camera ) {

		var geometry = new BufferGeometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var vertices = [];
		var colors = [];

		var pointMap = {};

		// colors

		var colorFrustum = new Color( 0xffaa00 );
		var colorCone = new Color( 0xff0000 );
		var colorUp = new Color( 0x00aaff );
		var colorTarget = new Color( 0xffffff );
		var colorCross = new Color( 0x333333 );

		// near

		addLine( 'n1', 'n2', colorFrustum );
		addLine( 'n2', 'n4', colorFrustum );
		addLine( 'n4', 'n3', colorFrustum );
		addLine( 'n3', 'n1', colorFrustum );

		// far

		addLine( 'f1', 'f2', colorFrustum );
		addLine( 'f2', 'f4', colorFrustum );
		addLine( 'f4', 'f3', colorFrustum );
		addLine( 'f3', 'f1', colorFrustum );

		// sides

		addLine( 'n1', 'f1', colorFrustum );
		addLine( 'n2', 'f2', colorFrustum );
		addLine( 'n3', 'f3', colorFrustum );
		addLine( 'n4', 'f4', colorFrustum );

		// cone

		addLine( 'p', 'n1', colorCone );
		addLine( 'p', 'n2', colorCone );
		addLine( 'p', 'n3', colorCone );
		addLine( 'p', 'n4', colorCone );

		// up

		addLine( 'u1', 'u2', colorUp );
		addLine( 'u2', 'u3', colorUp );
		addLine( 'u3', 'u1', colorUp );

		// target

		addLine( 'c', 't', colorTarget );
		addLine( 'p', 'c', colorCross );

		// cross

		addLine( 'cn1', 'cn2', colorCross );
		addLine( 'cn3', 'cn4', colorCross );

		addLine( 'cf1', 'cf2', colorCross );
		addLine( 'cf3', 'cf4', colorCross );

		function addLine( a, b, color ) {

			addPoint( a, color );
			addPoint( b, color );

		}

		function addPoint( id, color ) {

			vertices.push( 0, 0, 0 );
			colors.push( color.r, color.g, color.b );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

		}

		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new Vector3();
		var camera = new Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				var position = geometry.getAttribute( 'position' );

				for ( var i = 0, l = points.length; i < l; i ++ ) {

					position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

				}

			}

		}

		return function update() {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( 'c', 0, 0, - 1 );
			setPoint( 't', 0, 0, 1 );

			// near

			setPoint( 'n1', - w, - h, - 1 );
			setPoint( 'n2', w, - h, - 1 );
			setPoint( 'n3', - w, h, - 1 );
			setPoint( 'n4', w, h, - 1 );

			// far

			setPoint( 'f1', - w, - h, 1 );
			setPoint( 'f2', w, - h, 1 );
			setPoint( 'f3', - w, h, 1 );
			setPoint( 'f4', w, h, 1 );

			// up

			setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
			setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
			setPoint( 'u3', 0, h * 2, - 1 );

			// cross

			setPoint( 'cf1', - w, 0, 1 );
			setPoint( 'cf2', w, 0, 1 );
			setPoint( 'cf3', 0, - h, 1 );
			setPoint( 'cf4', 0, h, 1 );

			setPoint( 'cn1', - w, 0, - 1 );
			setPoint( 'cn2', w, 0, - 1 );
			setPoint( 'cn3', 0, - h, - 1 );
			setPoint( 'cn4', 0, h, - 1 );

			geometry.getAttribute( 'position' ).needsUpdate = true;

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 */

	function BoxHelper( object, color ) {

		this.object = object;

		if ( color === undefined ) color = 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.matrixAutoUpdate = false;

		this.update();

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = ( function () {

		var box = new Box3();

		return function update( object ) {

			if ( object !== undefined ) {

				console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

			}

			if ( this.object !== undefined ) {

				box.setFromObject( this.object );

			}

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
			array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
			array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
			array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	BoxHelper.prototype.setFromObject = function ( object ) {

		this.object = object;
		this.update();

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3Helper( box, hex ) {

		this.type = 'Box3Helper';

		this.box = box;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

		var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

		var geometry = new BufferGeometry();

		geometry.setIndex( new BufferAttribute( indices, 1 ) );

		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.geometry.computeBoundingSphere();

	}

	Box3Helper.prototype = Object.create( LineSegments.prototype );
	Box3Helper.prototype.constructor = Box3Helper;

	Box3Helper.prototype.updateMatrixWorld = function ( force ) {

		var box = this.box;

		if ( box.isEmpty() ) return;

		box.getCenter( this.position );

		box.getSize( this.scale );

		this.scale.multiplyScalar( 0.5 );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function PlaneHelper( plane, size, hex ) {

		this.type = 'PlaneHelper';

		this.plane = plane;

		this.size = ( size === undefined ) ? 1 : size;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		//

		var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

		var geometry2 = new BufferGeometry();
		geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

	}

	PlaneHelper.prototype = Object.create( Line.prototype );
	PlaneHelper.prototype.constructor = PlaneHelper;

	PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

		var scale = - this.plane.constant;

		if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

		this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

		this.lookAt( this.plane.normal );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var lineGeometry;
	var coneGeometry;

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( color === undefined ) color = 0xffff00;
		if ( length === undefined ) length = 1;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		if ( lineGeometry === undefined ) {

			lineGeometry = new BufferGeometry();
			lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

			coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
			coneGeometry.translate( 0, - 0.5, 0 );

		}

		this.position.copy( origin );

		this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = ( function () {

		var axis = new Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.copy( color );
		this.cone.material.color.copy( color );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxesHelper( size ) {

		size = size || 1;

		var vertices = [
			0, 0, 0,	size, 0, 0,
			0, 0, 0,	0, size, 0,
			0, 0, 0,	0, 0, size
		];

		var colors = [
			1, 0, 0,	1, 0.6, 0,
			0, 1, 0,	0.6, 1, 0,
			0, 0, 1,	0, 0.6, 1
		];

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxesHelper.prototype = Object.create( LineSegments.prototype );
	AxesHelper.prototype.constructor = AxesHelper;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	var SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			child.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );

			scene.remove( child );
			parent.add( child );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Face4( a, b, c, d, normal, color, materialIndex ) {

		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );

	}

	var LineStrip = 0;

	var LinePieces = 1;

	function MeshFaceMaterial( materials ) {

		console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
		return materials;

	}

	function MultiMaterial( materials ) {

		if ( materials === undefined ) materials = [];

		console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
		materials.isMultiMaterial = true;
		materials.materials = materials;
		materials.clone = function () {

			return materials.slice();

		};
		return materials;

	}

	function PointCloud( geometry, material ) {

		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );

	}

	function Particle( material ) {

		console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
		return new Sprite( material );

	}

	function ParticleSystem( geometry, material ) {

		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );

	}

	function PointCloudMaterial( parameters ) {

		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function ParticleBasicMaterial( parameters ) {

		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function ParticleSystemMaterial( parameters ) {

		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function Vertex( x, y, z ) {

		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );

	}

	//

	function DynamicBufferAttribute( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );

	}

	function Int8Attribute( array, itemSize ) {

		console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
		return new Int8BufferAttribute( array, itemSize );

	}

	function Uint8Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
		return new Uint8BufferAttribute( array, itemSize );

	}

	function Uint8ClampedAttribute( array, itemSize ) {

		console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
		return new Uint8ClampedBufferAttribute( array, itemSize );

	}

	function Int16Attribute( array, itemSize ) {

		console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
		return new Int16BufferAttribute( array, itemSize );

	}

	function Uint16Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
		return new Uint16BufferAttribute( array, itemSize );

	}

	function Int32Attribute( array, itemSize ) {

		console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
		return new Int32BufferAttribute( array, itemSize );

	}

	function Uint32Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
		return new Uint32BufferAttribute( array, itemSize );

	}

	function Float32Attribute( array, itemSize ) {

		console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
		return new Float32BufferAttribute( array, itemSize );

	}

	function Float64Attribute( array, itemSize ) {

		console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
		return new Float64BufferAttribute( array, itemSize );

	}

	//

	Curve.create = function ( construct, getPoint ) {

		console.log( 'THREE.Curve.create() has been deprecated' );

		construct.prototype = Object.create( Curve.prototype );
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;

		return construct;

	};

	//

	Object.assign( CurvePath.prototype, {

		createPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from path points (for Line or Points objects)

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		createSpacedPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from equidistant sampling along the path

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	//

	Object.assign( Path.prototype, {

		fromPoints: function ( points ) {

			console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
			this.setFromPoints( points );

		}

	} );

	//

	function ClosedSplineCurve3( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	}

	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	//

	function SplineCurve3( points ) {

		console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	//

	function Spline( points ) {

		console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	Spline.prototype = Object.create( CatmullRomCurve3.prototype );

	Object.assign( Spline.prototype, {

		initFromArray: function ( /* a */ ) {

			console.error( 'THREE.Spline: .initFromArray() has been removed.' );

		},
		getControlPointsArray: function ( /* optionalTarget */ ) {

			console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

		},
		reparametrizeByArcLength: function ( /* samplingCoef */ ) {

			console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

		}

	} );

	//

	function AxisHelper( size ) {

		console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
		return new AxesHelper( size );

	}

	function BoundingBoxHelper( object, color ) {

		console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
		return new BoxHelper( object, color );

	}

	function EdgesHelper( object, hex ) {

		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

	}

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	SkeletonHelper.prototype.update = function () {

		console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

	};

	function WireframeHelper( object, hex ) {

		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

	}

	//

	Object.assign( Loader.prototype, {

		extractUrlBase: function ( url ) {

			console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
			return LoaderUtils.extractUrlBase( url );

		}

	} );

	function XHRLoader( manager ) {

		console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
		return new FileLoader( manager );

	}

	function BinaryTextureLoader( manager ) {

		console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
		return new DataTextureLoader( manager );

	}

	//

	Object.assign( Box2.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Object.assign( Box3.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Line3.prototype.center = function ( optionalTarget ) {

		console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	};

	Object.assign( _Math, {

		random16: function () {

			console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		nearestPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
			return _Math.floorPowerOfTwo( value );

		},

		nextPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
			return _Math.ceilPowerOfTwo( value );

		}

	} );

	Object.assign( Matrix3.prototype, {

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

		}

	} );

	Object.assign( Matrix4.prototype, {

		extractPosition: function ( m ) {

			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );

		},
		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		getPosition: function () {

			var v1;

			return function getPosition() {

				if ( v1 === undefined ) v1 = new Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
				return v1.setFromMatrixColumn( this, 3 );

			};

		}(),
		setRotationFromQuaternion: function ( q ) {

			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );

		},
		multiplyToArray: function () {

			console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector4: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

		},
		rotateAxis: function ( v ) {

			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );

		},
		crossVector: function ( vector ) {

			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		translate: function () {

			console.error( 'THREE.Matrix4: .translate() has been removed.' );

		},
		rotateX: function () {

			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

		},
		rotateY: function () {

			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

		},
		rotateZ: function () {

			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

		},
		rotateByAxis: function () {

			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

		},
		makeFrustum: function ( left, right, bottom, top, near, far ) {

			console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
			return this.makePerspective( left, right, top, bottom, near, far );

		}

	} );

	Plane.prototype.isIntersectionLine = function ( line ) {

		console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
		return this.intersectsLine( line );

	};

	Quaternion.prototype.multiplyVector3 = function ( vector ) {

		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );

	};

	Object.assign( Ray.prototype, {

		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionPlane: function ( plane ) {

			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		}

	} );

	Object.assign( Shape.prototype, {

		extractAllPoints: function ( divisions ) {

			console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
			return this.extractPoints( divisions );

		},
		extrude: function ( options ) {

			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );

		},
		makeGeometry: function ( options ) {

			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );

		}

	} );

	Object.assign( Vector2.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector3.prototype, {

		setEulerFromRotationMatrix: function () {

			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

		},
		setEulerFromQuaternion: function () {

			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

		},
		getPositionFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );

		},
		getScaleFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );

		},
		getColumnFromMatrix: function ( index, matrix ) {

			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );

		},
		applyProjection: function ( m ) {

			console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
			return this.applyMatrix4( m );

		},
		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector4.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	//

	Geometry.prototype.computeTangents = function () {

		console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

	};

	Object.assign( Object3D.prototype, {

		getChildByName: function ( name ) {

			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );

		},
		renderDepth: function () {

			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

		},
		translate: function ( distance, axis ) {

			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );

		}

	} );

	Object.defineProperties( Object3D.prototype, {

		eulerOrder: {
			get: function () {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;

			},
			set: function ( value ) {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;

			}
		},
		useQuaternion: {
			get: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			},
			set: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			}
		}

	} );

	Object.defineProperties( LOD.prototype, {

		objects: {
			get: function () {

				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;

			}
		}

	} );

	Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

		get: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		}

	} );

	Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

		get: function () {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			return this.arcLengthDivisions;

		},
		set: function ( value ) {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			this.arcLengthDivisions = value;

		}

	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function () {

				console.warn( 'THREE.Light: .onlyShadow has been removed.' );

			}
		},
		shadowCameraFov: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;

			}
		},
		shadowCameraLeft: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;

			}
		},
		shadowCameraRight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;

			}
		},
		shadowCameraTop: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;

			}
		},
		shadowCameraBottom: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;

			}
		},
		shadowCameraNear: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;

			}
		},
		shadowCameraFar: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;

			}
		},
		shadowCameraVisible: {
			set: function () {

				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

			}
		},
		shadowBias: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;

			}
		},
		shadowDarkness: {
			set: function () {

				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

			}
		},
		shadowMapWidth: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;

			}
		},
		shadowMapHeight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;

			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {

		length: {
			get: function () {

				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
				return this.array.length;

			}
		}

	} );

	Object.assign( BufferGeometry.prototype, {

		addIndex: function ( index ) {

			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );

		},
		addDrawCall: function ( start, count, indexOffset ) {

			if ( indexOffset !== undefined ) {

				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );

		},
		clearDrawCalls: function () {

			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();

		},
		computeTangents: function () {

			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

		},
		computeOffsets: function () {

			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

		}

	} );

	Object.defineProperties( BufferGeometry.prototype, {

		drawcalls: {
			get: function () {

				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;

			}
		},
		offsets: {
			get: function () {

				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;

			}
		}

	} );

	//

	Object.defineProperties( Uniform.prototype, {

		dynamic: {
			set: function () {

				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

			}
		},
		onUpdate: {
			value: function () {

				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;

			}
		}

	} );

	//

	Object.defineProperties( Material.prototype, {

		wrapAround: {
			get: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			}
		},
		wrapRGB: {
			get: function () {

				console.warn( 'THREE.Material: .wrapRGB has been removed.' );
				return new Color();

			}
		},

		shading: {
			get: function () {

				console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

			},
			set: function ( value ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( value === FlatShading );

			}
		}

	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {

		metal: {
			get: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;

			},
			set: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

			}
		}

	} );

	Object.defineProperties( ShaderMaterial.prototype, {

		derivatives: {
			get: function () {

				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;

			},
			set: function ( value ) {

				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;

			}
		}

	} );

	//

	Object.assign( WebGLRenderer.prototype, {

		getCurrentRenderTarget: function () {

			console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
			return this.getRenderTarget();

		},

		getMaxAnisotropy: function () {

			console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
			return this.capabilities.getMaxAnisotropy();

		},

		getPrecision: function () {

			console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
			return this.capabilities.precision;

		},

		resetGLState: function () {

			console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
			return this.state.reset();

		},

		supportsFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );

		},
		supportsHalfFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );

		},
		supportsStandardDerivatives: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );

		},
		supportsCompressedTextureS3TC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

		},
		supportsCompressedTexturePVRTC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

		},
		supportsBlendMinMax: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );

		},
		supportsVertexTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
			return this.capabilities.vertexTextures;

		},
		supportsInstancedArrays: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );

		},
		enableScissorTest: function ( boolean ) {

			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );

		},
		initMaterial: function () {

			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

		},
		addPrePlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

		},
		addPostPlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

		},
		updateShadowMap: function () {

			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

		}

	} );

	Object.defineProperties( WebGLRenderer.prototype, {

		shadowMapEnabled: {
			get: function () {

				return this.shadowMap.enabled;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;

			}
		},
		shadowMapType: {
			get: function () {

				return this.shadowMap.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;

			}
		},
		shadowMapCullFace: {
			get: function () {

				return this.shadowMap.cullFace;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;

			}
		}
	} );

	Object.defineProperties( WebGLShadowMap.prototype, {

		cullFace: {
			get: function () {

				return this.renderReverseSided ? CullFaceFront : CullFaceBack;

			},
			set: function ( cullFace ) {

				var value = ( cullFace !== CullFaceBack );
				console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
				this.renderReverseSided = value;

			}
		}

	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {

		wrapS: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;

			}
		},
		wrapT: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;

			}
		},
		magFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;

			}
		},
		minFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;

			}
		},
		anisotropy: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;

			}
		},
		offset: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;

			}
		},
		repeat: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;

			}
		},
		format: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;

			}
		},
		type: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;

			}
		},
		generateMipmaps: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;

			}
		}

	} );

	//

	Object.assign( WebVRManager.prototype, {

		getStandingMatrix: function () {

			console.warn( 'THREE.WebVRManager: .getStandingMatrix() has been removed.' );

		}

	} );

	Object.defineProperties( WebVRManager.prototype, {

		standing: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebVRManager: .standing has been removed.' );

			}
		}

	} );

	//

	Audio.prototype.load = function ( file ) {

		console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
		var scope = this;
		var audioLoader = new AudioLoader();
		audioLoader.load( file, function ( buffer ) {

			scope.setBuffer( buffer );

		} );
		return this;

	};

	AudioAnalyser.prototype.getData = function () {

		console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
		return this.getFrequencyData();

	};

	//

	CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

		console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
		return this.update( renderer, scene );

	};

	//

	var GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
			var matrix;

			if ( geometry2.isMesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	var ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

		}

	};

	//

	function Projector() {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function () {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	}

	//

	function CanvasRenderer() {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	}

	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderer = WebGLRenderer;
	exports.ShaderLib = ShaderLib;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.FogExp2 = FogExp2;
	exports.Fog = Fog;
	exports.Scene = Scene;
	exports.LensFlare = LensFlare;
	exports.Sprite = Sprite;
	exports.LOD = LOD;
	exports.SkinnedMesh = SkinnedMesh;
	exports.Skeleton = Skeleton;
	exports.Bone = Bone;
	exports.Mesh = Mesh;
	exports.LineSegments = LineSegments;
	exports.LineLoop = LineLoop;
	exports.Line = Line;
	exports.Points = Points;
	exports.Group = Group;
	exports.VideoTexture = VideoTexture;
	exports.DataTexture = DataTexture;
	exports.CompressedTexture = CompressedTexture;
	exports.CubeTexture = CubeTexture;
	exports.CanvasTexture = CanvasTexture;
	exports.DepthTexture = DepthTexture;
	exports.Texture = Texture;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.DataTextureLoader = DataTextureLoader;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.TextureLoader = TextureLoader;
	exports.ObjectLoader = ObjectLoader;
	exports.MaterialLoader = MaterialLoader;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.LoadingManager = LoadingManager;
	exports.JSONLoader = JSONLoader;
	exports.ImageLoader = ImageLoader;
	exports.ImageBitmapLoader = ImageBitmapLoader;
	exports.FontLoader = FontLoader;
	exports.FileLoader = FileLoader;
	exports.Loader = Loader;
	exports.LoaderUtils = LoaderUtils;
	exports.Cache = Cache;
	exports.AudioLoader = AudioLoader;
	exports.SpotLightShadow = SpotLightShadow;
	exports.SpotLight = SpotLight;
	exports.PointLight = PointLight;
	exports.RectAreaLight = RectAreaLight;
	exports.HemisphereLight = HemisphereLight;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DirectionalLight = DirectionalLight;
	exports.AmbientLight = AmbientLight;
	exports.LightShadow = LightShadow;
	exports.Light = Light;
	exports.StereoCamera = StereoCamera;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.OrthographicCamera = OrthographicCamera;
	exports.CubeCamera = CubeCamera;
	exports.ArrayCamera = ArrayCamera;
	exports.Camera = Camera;
	exports.AudioListener = AudioListener;
	exports.PositionalAudio = PositionalAudio;
	exports.AudioContext = AudioContext;
	exports.AudioAnalyser = AudioAnalyser;
	exports.Audio = Audio;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.PropertyMixer = PropertyMixer;
	exports.PropertyBinding = PropertyBinding;
	exports.KeyframeTrack = KeyframeTrack;
	exports.AnimationUtils = AnimationUtils;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationClip = AnimationClip;
	exports.Uniform = Uniform;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.BufferGeometry = BufferGeometry;
	exports.Geometry = Geometry;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.Face3 = Face3;
	exports.Object3D = Object3D;
	exports.Raycaster = Raycaster;
	exports.Layers = Layers;
	exports.EventDispatcher = EventDispatcher;
	exports.Clock = Clock;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.LinearInterpolant = LinearInterpolant;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.CubicInterpolant = CubicInterpolant;
	exports.Interpolant = Interpolant;
	exports.Triangle = Triangle;
	exports.Math = _Math;
	exports.Spherical = Spherical;
	exports.Cylindrical = Cylindrical;
	exports.Plane = Plane;
	exports.Frustum = Frustum;
	exports.Sphere = Sphere;
	exports.Ray = Ray;
	exports.Matrix4 = Matrix4;
	exports.Matrix3 = Matrix3;
	exports.Box3 = Box3;
	exports.Box2 = Box2;
	exports.Line3 = Line3;
	exports.Euler = Euler;
	exports.Vector4 = Vector4;
	exports.Vector3 = Vector3;
	exports.Vector2 = Vector2;
	exports.Quaternion = Quaternion;
	exports.Color = Color;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SkeletonHelper = SkeletonHelper;
	exports.PointLightHelper = PointLightHelper;
	exports.RectAreaLightHelper = RectAreaLightHelper;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.GridHelper = GridHelper;
	exports.PolarGridHelper = PolarGridHelper;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.CameraHelper = CameraHelper;
	exports.BoxHelper = BoxHelper;
	exports.Box3Helper = Box3Helper;
	exports.PlaneHelper = PlaneHelper;
	exports.ArrowHelper = ArrowHelper;
	exports.AxesHelper = AxesHelper;
	exports.Shape = Shape;
	exports.Path = Path;
	exports.ShapePath = ShapePath;
	exports.Font = Font;
	exports.CurvePath = CurvePath;
	exports.Curve = Curve;
	exports.ShapeUtils = ShapeUtils;
	exports.SceneUtils = SceneUtils;
	exports.WebGLUtils = WebGLUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.TextBufferGeometry = TextBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.RingGeometry = RingGeometry;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ShapeBufferGeometry = ShapeBufferGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
	exports.EdgesGeometry = EdgesGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.ShadowMaterial = ShadowMaterial;
	exports.SpriteMaterial = SpriteMaterial;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.ShaderMaterial = ShaderMaterial;
	exports.PointsMaterial = PointsMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshToonMaterial = MeshToonMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshDistanceMaterial = MeshDistanceMaterial;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.Material = Material;
	exports.Float64BufferAttribute = Float64BufferAttribute;
	exports.Float32BufferAttribute = Float32BufferAttribute;
	exports.Uint32BufferAttribute = Uint32BufferAttribute;
	exports.Int32BufferAttribute = Int32BufferAttribute;
	exports.Uint16BufferAttribute = Uint16BufferAttribute;
	exports.Int16BufferAttribute = Int16BufferAttribute;
	exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
	exports.Uint8BufferAttribute = Uint8BufferAttribute;
	exports.Int8BufferAttribute = Int8BufferAttribute;
	exports.BufferAttribute = BufferAttribute;
	exports.ArcCurve = ArcCurve;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.EllipseCurve = EllipseCurve;
	exports.LineCurve = LineCurve;
	exports.LineCurve3 = LineCurve3;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.SplineCurve = SplineCurve;
	exports.REVISION = REVISION;
	exports.MOUSE = MOUSE;
	exports.CullFaceNone = CullFaceNone;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.BasicShadowMap = BasicShadowMap;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.FrontSide = FrontSide;
	exports.BackSide = BackSide;
	exports.DoubleSide = DoubleSide;
	exports.FlatShading = FlatShading;
	exports.SmoothShading = SmoothShading;
	exports.NoColors = NoColors;
	exports.FaceColors = FaceColors;
	exports.VertexColors = VertexColors;
	exports.NoBlending = NoBlending;
	exports.NormalBlending = NormalBlending;
	exports.AdditiveBlending = AdditiveBlending;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.MultiplyBlending = MultiplyBlending;
	exports.CustomBlending = CustomBlending;
	exports.AddEquation = AddEquation;
	exports.SubtractEquation = SubtractEquation;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.MinEquation = MinEquation;
	exports.MaxEquation = MaxEquation;
	exports.ZeroFactor = ZeroFactor;
	exports.OneFactor = OneFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.NeverDepth = NeverDepth;
	exports.AlwaysDepth = AlwaysDepth;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.EqualDepth = EqualDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterDepth = GreaterDepth;
	exports.NotEqualDepth = NotEqualDepth;
	exports.MultiplyOperation = MultiplyOperation;
	exports.MixOperation = MixOperation;
	exports.AddOperation = AddOperation;
	exports.NoToneMapping = NoToneMapping;
	exports.LinearToneMapping = LinearToneMapping;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.CineonToneMapping = CineonToneMapping;
	exports.UVMapping = UVMapping;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.LinearFilter = LinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.UnsignedByteType = UnsignedByteType;
	exports.ByteType = ByteType;
	exports.ShortType = ShortType;
	exports.UnsignedShortType = UnsignedShortType;
	exports.IntType = IntType;
	exports.UnsignedIntType = UnsignedIntType;
	exports.FloatType = FloatType;
	exports.HalfFloatType = HalfFloatType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.AlphaFormat = AlphaFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBAFormat = RGBAFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.RGBEFormat = RGBEFormat;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.LoopOnce = LoopOnce;
	exports.LoopRepeat = LoopRepeat;
	exports.LoopPingPong = LoopPingPong;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.LinearEncoding = LinearEncoding;
	exports.sRGBEncoding = sRGBEncoding;
	exports.GammaEncoding = GammaEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBDEncoding = RGBDEncoding;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.CubeGeometry = BoxGeometry;
	exports.Face4 = Face4;
	exports.LineStrip = LineStrip;
	exports.LinePieces = LinePieces;
	exports.MeshFaceMaterial = MeshFaceMaterial;
	exports.MultiMaterial = MultiMaterial;
	exports.PointCloud = PointCloud;
	exports.Particle = Particle;
	exports.ParticleSystem = ParticleSystem;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Vertex = Vertex;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.Int8Attribute = Int8Attribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Int16Attribute = Int16Attribute;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Float32Attribute = Float32Attribute;
	exports.Float64Attribute = Float64Attribute;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.SplineCurve3 = SplineCurve3;
	exports.Spline = Spline;
	exports.AxisHelper = AxisHelper;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.EdgesHelper = EdgesHelper;
	exports.WireframeHelper = WireframeHelper;
	exports.XHRLoader = XHRLoader;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.GeometryUtils = GeometryUtils;
	exports.ImageUtils = ImageUtils;
	exports.Projector = Projector;
	exports.CanvasRenderer = CanvasRenderer;

	Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ })
/******/ ]);
    </script>
</head>

<body>
    <button class="btn btn-outline-primary" id="btn_sendPython">send request to python
        <span class="icon icon-pencil"></span>
    </button>
    <p id="p_info"></p>
    <!-- <div id="app">
        {{ message }}
    </div> -->
    <div id='three'></div>
    <script>
        /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// var textJson = {
//   'metadata': {
//     'type': 'App'
//   },
//   'project': {
//     'gammaInput': false,
//     'gammaOutput': false,
//     'shadows': true,
//     'vr': false
//   },
//   'camera': {
//     'metadata': {
//       'version': 4.5,
//       'type': 'Object',
//       'generator': 'Object3D.toJSON'
//     },
//     'object': {
//       'uuid': '237F56AB-D3FF-4AA4-8CCD-7578A5CE3D20',
//       'type': 'PerspectiveCamera',
//       'name': 'Camera',
//       'matrix': [0.939236, 0, -0.343272, 0, -0.147782, 0.902586, -0.404351, 0, 0.309832, 0.430511, 0.847741, 0, 142.321259, 202.754852, 389.409363, 1],
//       'fov': 50,
//       'zoom': 1,
//       'near': 0.1,
//       'far': 100000,
//       'focus': 10,
//       'aspect': 1.57129,
//       'filmGauge': 35,
//       'filmOffset': 0
//     }
//   },
//   'scene': {
//     'metadata': {
//       'version': 4.5,
//       'type': 'Object',
//       'generator': 'Object3D.toJSON'
//     },
//     'geometries': [
//       {
//         'uuid': '8F05A1F2-3877-478B-8DFC-F572AC61AB3A',
//         'type': 'PlaneGeometry',
//         'width': 300,
//         'height': 400,
//         'widthSegments': 1,
//         'heightSegments': 1
//       },
//       {
//         'uuid': '7149652B-DBD7-4CB7-A600-27A9AC005C95',
//         'type': 'BoxGeometry',
//         'width': 20,
//         'height': 10,
//         'depth': 10,
//         'widthSegments': 1,
//         'heightSegments': 1,
//         'depthSegments': 1
//       },
//       {
//         'uuid': 'EEDF0A9A-D174-44E4-9C2F-A2F5BB8BE7F5',
//         'type': 'CylinderGeometry',
//         'radiusTop': 5,
//         'radiusBottom': 5,
//         'height': 20,
//         'radialSegments': 32,
//         'heightSegments': 1,
//         'openEnded': false
//       },
//       {
//         'uuid': 'CABCC711-1331-4D4C-9FF6-409299F10C68',
//         'type': 'SphereGeometry',
//         'radius': 5,
//         'widthSegments': 32,
//         'heightSegments': 16,
//         'phiStart': 0,
//         'phiLength': 6.28,
//         'thetaStart': 0,
//         'thetaLength': 3.14
//       },
//       {
//         'uuid': 'EFBF641D-F092-462E-B7FB-0BFAD1591EFC',
//         'type': 'BoxGeometry',
//         'width': 20,
//         'height': 10,
//         'depth': 10,
//         'widthSegments': 1,
//         'heightSegments': 1,
//         'depthSegments': 1
//       }],
//     'materials': [
//       {
//         'uuid': '2F69AF3A-DDF5-4BBA-87B5-80159F90DDBF',
//         'type': 'MeshPhongMaterial',
//         'color': 86015,
//         'emissive': 0,
//         'specular': 1118481,
//         'shininess': 30,
//         'depthFunc': 3,
//         'depthTest': true,
//         'depthWrite': true
//       },
//       {
//         'uuid': 'D98FC4D1-169E-420A-92EA-20E55009A46D',
//         'type': 'MeshBasicMaterial',
//         'color': 63744,
//         'depthFunc': 3,
//         'depthTest': true,
//         'depthWrite': true,
//         'wireframe': true
//       },
//       {
//         'uuid': '3B9DE64D-E1C8-4C24-9F73-3A9E10E3E655',
//         'type': 'MeshPhongMaterial',
//         'color': 16777215,
//         'emissive': 0,
//         'specular': 1118481,
//         'shininess': 30,
//         'depthFunc': 3,
//         'depthTest': true,
//         'depthWrite': true
//       },
//       {
//         'uuid': '043B208C-1F83-42C6-802C-E0E35621C27C',
//         'type': 'MeshPhongMaterial',
//         'color': 16777215,
//         'emissive': 0,
//         'specular': 1118481,
//         'shininess': 30,
//         'depthFunc': 3,
//         'depthTest': true,
//         'depthWrite': true
//       },
//       {
//         'uuid': '40EC9BDA-91C0-4671-937A-2BCB6DA7EEBB',
//         'type': 'MeshBasicMaterial',
//         'color': 63744,
//         'depthFunc': 3,
//         'depthTest': true,
//         'depthWrite': true,
//         'wireframe': true
//       }],
//     'object': {
//       'uuid': '31517222-A9A7-4EAF-B5F6-60751C0BABA3',
//       'type': 'Scene',
//       'name': 'Scene',
//       'matrix': [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
//       'children': [
//         {
//           'uuid': 'EBBB1E63-6318-4752-AE2E-440A4E0B3EF3',
//           'type': 'Mesh',
//           'name': 'Ground',
//           'matrix': [1, 0, 0, 0, 0, 0.000796, -1, 0, 0, 1, 0.000796, 0, 0, 0, 0, 1],
//           'geometry': '8F05A1F2-3877-478B-8DFC-F572AC61AB3A',
//           'material': '2F69AF3A-DDF5-4BBA-87B5-80159F90DDBF'
//         },
//         {
//           'uuid': '6EE2E764-43E0-48E0-85F2-E0C8823C20DC',
//           'type': 'DirectionalLight',
//           'name': 'DirectionalLight 1',
//           'matrix': [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 100, 200, 150, 1],
//           'color': 16777215,
//           'intensity': 1,
//           'shadow': {
//             'camera': {
//               'uuid': '346D382D-C8E1-41BD-8464-4766CB43E9CD',
//               'type': 'OrthographicCamera',
//               'zoom': 1,
//               'left': -5,
//               'right': 5,
//               'top': 5,
//               'bottom': -5,
//               'near': 0.5,
//               'far': 500
//             }
//           }
//         },
//         {
//           'uuid': '38219749-1E67-45F2-AB15-E64BA0940CAD',
//           'type': 'Mesh',
//           'name': 'Brick',
//           'matrix': [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 5, 0, 1],
//           'geometry': '7149652B-DBD7-4CB7-A600-27A9AC005C95',
//           'material': 'D98FC4D1-169E-420A-92EA-20E55009A46D',
//           'children': [
//             {
//               'uuid': '711A5955-8F17-4A8B-991A-7604D27E6FA0',
//               'type': 'Mesh',
//               'name': 'Cylinder',
//               'matrix': [0.000796, 0.000796, 1, 0, -1, 0, 0.000796, 0, 0, -1, 0.000796, 0, 0, 0, 0, 1],
//               'geometry': 'EEDF0A9A-D174-44E4-9C2F-A2F5BB8BE7F5',
//               'material': '3B9DE64D-E1C8-4C24-9F73-3A9E10E3E655'
//             }]
//         },
//         {
//           'uuid': '18FFA67C-F893-4E7A-8A76-8D996DEBE0C6',
//           'type': 'Mesh',
//           'name': 'Ball',
//           'matrix': [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 5, 35.549999, 1],
//           'geometry': 'CABCC711-1331-4D4C-9FF6-409299F10C68',
//           'material': '043B208C-1F83-42C6-802C-E0E35621C27C'
//         },
//         {
//           'uuid': '6D660D49-39B8-40C3-95F6-E4E007AA8D79',
//           'type': 'Mesh',
//           'name': 'Paddle',
//           'matrix': [2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 5, 159.539993, 1],
//           'geometry': 'EFBF641D-F092-462E-B7FB-0BFAD1591EFC',
//           'material': '40EC9BDA-91C0-4671-937A-2BCB6DA7EEBB',
//           'children': [
//             {
//               'uuid': '4F5F884C-9E1B-45E6-8F1E-4D538A46D8CB',
//               'type': 'Mesh',
//               'name': 'Cylinder',
//               'matrix': [0.000796, 0.000796, 1, 0, -1, 0, 0.000796, 0, 0, -1, 0.000796, 0, 0, 0, 0, 1],
//               'geometry': 'EEDF0A9A-D174-44E4-9C2F-A2F5BB8BE7F5',
//               'material': '3B9DE64D-E1C8-4C24-9F73-3A9E10E3E655'
//             }]
//         },
//         {
//           'uuid': 'B0BEAF69-8B5D-4D87-ADCA-FDE83A02762D',
//           'type': 'PointLight',
//           'name': 'PointLight 2',
//           'matrix': [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -116.543564, 69.489571, -206.824829, 1],
//           'color': 16777215,
//           'intensity': 1,
//           'distance': 0,
//           'decay': 1,
//           'shadow': {
//             'camera': {
//               'uuid': 'AEC3B8E5-350B-49E3-BCD2-A0DF329B8461',
//               'type': 'PerspectiveCamera',
//               'fov': 90,
//               'zoom': 1,
//               'near': 0.5,
//               'far': 500,
//               'focus': 10,
//               'aspect': 1,
//               'filmGauge': 35,
//               'filmOffset': 0
//             }
//           }
//         }],
//       'background': 11184810
//     }
//   },
//   'scripts': {
//     '6D660D49-39B8-40C3-95F6-E4E007AA8D79': [
//       {
//         'name': 'User',
//         'source': 'function mousemove( event ) {\n\n\tthis.position.x = ( event.clientX / player.width ) * 300 - 150;\n\n}\n\n// function update( event ) {}'
//       }],
//     '31517222-A9A7-4EAF-B5F6-60751C0BABA3': [
//       {
//         'name': 'Game Logic',
//         'source': "var ball = this.getObjectByName( 'Ball' );\n\nvar direction = new THREE.Vector3();\ndirection.x = Math.random() - 0.5;\ndirection.z = - 0.5;\ndirection.normalize();\n\nvar speed = new THREE.Vector3();\n\n//\n\nvar group = new THREE.Group();\nthis.add( group );\n\nvar paddle = this.getObjectByName( 'Paddle' );\npaddle.material.visible = false;\ngroup.add( paddle );\n\nvar brick = this.getObjectByName( 'Brick' );\n\nfor ( var j = 0; j < 8; j ++ ) {\n\n\tvar material = new THREE.MeshPhongMaterial( { color: Math.random() * 0xffffff } );\n\n\tfor ( var i = 0; i < 12; i ++ ) {\n\t\t\n\t\tvar object = brick.clone();\n\t\tobject.position.x = i * 22 - 120;\n\t\tobject.position.z = j * 14 - 120;\n\t\tgroup.add( object );\n\n\t\tvar cylinder = object.getObjectByName( 'Cylinder' );\n\t\tcylinder.material = material;\n\n\t}\n\t\n}\n\nbrick.visible = false;\nbrick.material.visible = false;\n\n//\n\nvar raycaster = new THREE.Raycaster();\n\nfunction update( event ) {\n\t\n\tif ( ball.position.x < - 150 || ball.position.x > 150 ) direction.x = - direction.x;\n\tif ( ball.position.z < - 200 || ball.position.z > 200 ) direction.z = - direction.z;\n\n\tball.position.x = Math.max( - 150, Math.min( 150, ball.position.x ) );\n\tball.position.z = Math.max( - 200, Math.min( 200, ball.position.z ) );\n\t\n\tball.position.add( speed.copy( direction ).multiplyScalar( event.delta / 4 ) );\n\t\n\traycaster.set( ball.position, direction );\n\t\n\tvar intersections = raycaster.intersectObjects( group.children );\n\t\n\tif ( intersections.length > 0 ) {\n\t\n\t\tvar intersection = intersections[ 0 ];\n\t\t\n\t\tif ( intersection.distance < 5 ) {\n\t\t\t\n\t\t\tif ( intersection.object !== paddle ) {\n\n\t\t\t\tgroup.remove( intersection.object );\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tdirection.reflect( intersection.face.normal );\n\t\t\t\n\t\t}\n\t\t\n\t}\n\n}"
//       }]
//   }
// }
$('#btn_sendPython').click(function () {
  $('#p_info').text('btn_sendPython is clicked')
})
// var app = new Vue({
//   el: '#app',
//   data: {
//     message: 'Hello Vue!'
//   }
// })

// $.getJSON('./app.json', function (textJson) {
// var player = new THREEAPP.Player()
// player.load(textJson)
// player.setSize(800,600)
// player.play()

// var threeContainer = document.getElementById('three')
// threeContainer.appendChild(player.dom)

// window.addEventListener('resize', function () {
//   player.setSize(800, 600)
// })
// })


/***/ })
/******/ ]);
    </script>

</body>

</html>

[0210/201011.945:INFO:cef_log.cpp(8)] [Browser process] CefBrowser::CreateBrowserSync()

[0210/201011.975:INFO:cef_log.cpp(8)] [Browser process] GetPyBrowser(): create new PyBrowser, browserId=1

[0210/201012.232:WARNING:navigator_impl.cc(320)] Refusing to load URL as it exceeds 2097152 characters.
[0210/201012.234:INFO:cef_log.cpp(8)] [Browser process] CefBrowser::CreateBrowserSync() succeeded

[0210/201012.234:INFO:cef_log.cpp(8)] [Browser process] CefBrowser window handle = 3344648

[0210/201012.235:INFO:cef_log.cpp(8)] [Browser process] MessageLoop()

[0210/201347.723:INFO:cef_log.cpp(8)] [Browser process] LifespanHandler_OnBeforeClose

[0210/201347.724:INFO:cef_log.cpp(8)] [Browser process] del g_pyBrowsers[1]

[0210/201347.724:INFO:cef_log.cpp(8)] [Browser process] QuitMessageLoop()

[0210/201347.749:INFO:cef_log.cpp(8)] [Browser process] Shutdown()

[0210/201347.954:INFO:cef_log.cpp(8)] [Browser process] CefShutdown()

[0210/212346.669:INFO:cefpython_app.cpp(196)] [Browser process] OnBeforeChildProcessLaunch() command line: "C:\Python36\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support /prefetch:2

[0210/212346.669:INFO:cefpython_app.cpp(196)] [Browser process] OnBeforeChildProcessLaunch() command line: "C:\Python36\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support --supports-dual-gpus=false --gpu-driver-bug-workarounds=7,10,19,23,41,61,74 --disable-gl-extensions="GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent" --gpu-vendor-id=0x8086 --gpu-device-id=0x0d26 --gpu-driver-vendor="Intel Corporation" --gpu-driver-version=20.19.15.4835 --gpu-driver-date=10-16-2017 --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support /prefetch:2

[0210/212346.676:INFO:cef_log.cpp(8)] [Browser process] CreateBrowserSync() called

[0210/212346.676:INFO:cef_log.cpp(8)] [Browser process] navigateUrl: data:text/html;base64,

[0210/212346.677:INFO:cef_log.cpp(8)] [Browser process] CefBrowser::CreateBrowserSync()

[0210/212346.706:INFO:cef_log.cpp(8)] [Browser process] GetPyBrowser(): create new PyBrowser, browserId=1

[0210/212346.707:INFO:cefpython_app.cpp(196)] [Browser process] OnBeforeChildProcessLaunch() command line: "C:\Python36\lib\site-packages\cefpython3\subprocess" --type=renderer --no-sandbox --disable-databases --primordial-pipe-token=31F4B36B7D256D58D8A292D5ADD89EC9 --lang=en-US --lang=en-US --locales-dir-path="C:\Python36\lib\site-packages\cefpython3\locales" --log-file="D:\projects\hybrid-app-test\hybrid_app\pyinstaller\debug.log" --log-severity=info --resources-dir-path="C:\Python36\lib\site-packages\cefpython3" --enable-high-dpi-support /prefetch:1

[0210/212346.716:INFO:cef_log.cpp(8)] [Browser process] CefBrowser::CreateBrowserSync() succeeded

[0210/212346.718:INFO:cef_log.cpp(8)] [Browser process] CefBrowser window handle = 5833136

[0210/212346.718:INFO:cef_log.cpp(8)] [Browser process] MessageLoop()

[0210/212346.767:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[0210/212427.662:INFO:cef_log.cpp(8)] [Browser process] LifespanHandler_OnBeforeClose

[0210/212427.662:INFO:cef_log.cpp(8)] [Browser process] del g_pyFrames[1#2]

[0210/212427.662:INFO:cef_log.cpp(8)] [Browser process] del g_pyBrowsers[1]

[0210/212427.663:INFO:cef_log.cpp(8)] [Browser process] QuitMessageLoop()

[0210/212427.667:INFO:cefpython_app.cpp(256)] [Renderer process] OnBrowserDestroyed()

[0210/212427.692:INFO:cef_log.cpp(8)] [Browser process] Shutdown()

[0210/212427.912:INFO:cef_log.cpp(8)] [Browser process] CefShutdown()

